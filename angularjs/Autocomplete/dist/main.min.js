"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*!
 * jQuery JavaScript Library v3.4.0 -ajax,-ajax/jsonp,-ajax/load,-ajax/parseXML,-ajax/script,-ajax/var/location,-ajax/var/nonce,-ajax/var/rquery,-ajax/xhr,-manipulation/_evalUrl,-event/ajax,-effects,-effects/Tween,-effects/animatedSelector
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2019-04-10T19:49Z
 */
(function (global, factory) {
  "use strict";

  if ((typeof module === "undefined" ? "undefined" : _typeof(module)) === "object" && _typeof(module.exports) === "object") {
    // For CommonJS and CommonJS-like environments where a proper `window`
    // is present, execute the factory and get jQuery.
    // For environments that do not have a `window` with a `document`
    // (such as Node.js), expose a factory as module.exports.
    // This accentuates the need for the creation of a real `window`.
    // e.g. var jQuery = require("jquery")(window);
    // See ticket #14549 for more info.
    module.exports = global.document ? factory(global, true) : function (w) {
      if (!w.document) {
        throw new Error("jQuery requires a window with a document");
      }

      return factory(w);
    };
  } else {
    factory(global);
  } // Pass this if window is not defined yet

})(typeof window !== "undefined" ? window : void 0, function (window, noGlobal) {
  // Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
  // throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
  // arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
  // enough that all such attempts are guarded in a try block.
  "use strict";

  var arr = [];
  var document = window.document;
  var getProto = Object.getPrototypeOf;
  var _slice = arr.slice;
  var concat = arr.concat;
  var push = arr.push;
  var indexOf = arr.indexOf;
  var class2type = {};
  var toString = class2type.toString;
  var hasOwn = class2type.hasOwnProperty;
  var fnToString = hasOwn.toString;
  var ObjectFunctionString = fnToString.call(Object);
  var support = {};

  var isFunction = function isFunction(obj) {
    // Support: Chrome <=57, Firefox <=52
    // In some browsers, typeof returns "function" for HTML <object> elements
    // (i.e., `typeof document.createElement( "object" ) === "function"`).
    // We don't want to classify *any* DOM node as a function.
    return typeof obj === "function" && typeof obj.nodeType !== "number";
  };

  var isWindow = function isWindow(obj) {
    return obj != null && obj === obj.window;
  };

  var preservedScriptAttributes = {
    type: true,
    src: true,
    nonce: true,
    noModule: true
  };

  function DOMEval(code, node, doc) {
    doc = doc || document;
    var i,
        val,
        script = doc.createElement("script");
    script.text = code;

    if (node) {
      for (i in preservedScriptAttributes) {
        // Support: Firefox 64+, Edge 18+
        // Some browsers don't support the "nonce" property on scripts.
        // On the other hand, just using `getAttribute` is not enough as
        // the `nonce` attribute is reset to an empty string whenever it
        // becomes browsing-context connected.
        // See https://github.com/whatwg/html/issues/2369
        // See https://html.spec.whatwg.org/#nonce-attributes
        // The `node.getAttribute` check was added for the sake of
        // `jQuery.globalEval` so that it can fake a nonce-containing node
        // via an object.
        val = node[i] || node.getAttribute && node.getAttribute(i);

        if (val) {
          script.setAttribute(i, val);
        }
      }
    }

    doc.head.appendChild(script).parentNode.removeChild(script);
  }

  function toType(obj) {
    if (obj == null) {
      return obj + "";
    } // Support: Android <=2.3 only (functionish RegExp)


    return _typeof(obj) === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : _typeof(obj);
  }
  /* global Symbol */
  // Defining this global in .eslintrc.json would create a danger of using the global
  // unguarded in another place, it seems safer to define global only for this module


  var version = "3.4.0 -ajax,-ajax/jsonp,-ajax/load,-ajax/parseXML,-ajax/script,-ajax/var/location,-ajax/var/nonce,-ajax/var/rquery,-ajax/xhr,-manipulation/_evalUrl,-event/ajax,-effects,-effects/Tween,-effects/animatedSelector",
      // Define a local copy of jQuery
  jQuery = function jQuery(selector, context) {
    // The jQuery object is actually just the init constructor 'enhanced'
    // Need init if jQuery is called (just allow error to be thrown if not included)
    return new jQuery.fn.init(selector, context);
  },
      // Support: Android <=4.0 only
  // Make sure we trim BOM and NBSP
  rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

  jQuery.fn = jQuery.prototype = {
    // The current version of jQuery being used
    jquery: version,
    constructor: jQuery,
    // The default length of a jQuery object is 0
    length: 0,
    toArray: function toArray() {
      return _slice.call(this);
    },
    // Get the Nth element in the matched element set OR
    // Get the whole matched element set as a clean array
    get: function get(num) {
      // Return all the elements in a clean array
      if (num == null) {
        return _slice.call(this);
      } // Return just the one element from the set


      return num < 0 ? this[num + this.length] : this[num];
    },
    // Take an array of elements and push it onto the stack
    // (returning the new matched element set)
    pushStack: function pushStack(elems) {
      // Build a new jQuery matched element set
      var ret = jQuery.merge(this.constructor(), elems); // Add the old object onto the stack (as a reference)

      ret.prevObject = this; // Return the newly-formed element set

      return ret;
    },
    // Execute a callback for every element in the matched set.
    each: function each(callback) {
      return jQuery.each(this, callback);
    },
    map: function map(callback) {
      return this.pushStack(jQuery.map(this, function (elem, i) {
        return callback.call(elem, i, elem);
      }));
    },
    slice: function slice() {
      return this.pushStack(_slice.apply(this, arguments));
    },
    first: function first() {
      return this.eq(0);
    },
    last: function last() {
      return this.eq(-1);
    },
    eq: function eq(i) {
      var len = this.length,
          j = +i + (i < 0 ? len : 0);
      return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
    },
    end: function end() {
      return this.prevObject || this.constructor();
    },
    // For internal use only.
    // Behaves like an Array's method, not like a jQuery method.
    push: push,
    sort: arr.sort,
    splice: arr.splice
  };

  jQuery.extend = jQuery.fn.extend = function () {
    var options,
        name,
        src,
        copy,
        copyIsArray,
        clone,
        target = arguments[0] || {},
        i = 1,
        length = arguments.length,
        deep = false; // Handle a deep copy situation

    if (typeof target === "boolean") {
      deep = target; // Skip the boolean and the target

      target = arguments[i] || {};
      i++;
    } // Handle case when target is a string or something (possible in deep copy)


    if (_typeof(target) !== "object" && !isFunction(target)) {
      target = {};
    } // Extend jQuery itself if only one argument is passed


    if (i === length) {
      target = this;
      i--;
    }

    for (; i < length; i++) {
      // Only deal with non-null/undefined values
      if ((options = arguments[i]) != null) {
        // Extend the base object
        for (name in options) {
          copy = options[name]; // Prevent Object.prototype pollution
          // Prevent never-ending loop

          if (name === "__proto__" || target === copy) {
            continue;
          } // Recurse if we're merging plain objects or arrays


          if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {
            src = target[name]; // Ensure proper type for the source value

            if (copyIsArray && !Array.isArray(src)) {
              clone = [];
            } else if (!copyIsArray && !jQuery.isPlainObject(src)) {
              clone = {};
            } else {
              clone = src;
            }

            copyIsArray = false; // Never move original objects, clone them

            target[name] = jQuery.extend(deep, clone, copy); // Don't bring in undefined values
          } else if (copy !== undefined) {
            target[name] = copy;
          }
        }
      }
    } // Return the modified object


    return target;
  };

  jQuery.extend({
    // Unique for each copy of jQuery on the page
    expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),
    // Assume jQuery is ready without the ready module
    isReady: true,
    error: function error(msg) {
      throw new Error(msg);
    },
    noop: function noop() {},
    isPlainObject: function isPlainObject(obj) {
      var proto, Ctor; // Detect obvious negatives
      // Use toString instead of jQuery.type to catch host objects

      if (!obj || toString.call(obj) !== "[object Object]") {
        return false;
      }

      proto = getProto(obj); // Objects with no prototype (e.g., `Object.create( null )`) are plain

      if (!proto) {
        return true;
      } // Objects with prototype are plain iff they were constructed by a global Object function


      Ctor = hasOwn.call(proto, "constructor") && proto.constructor;
      return typeof Ctor === "function" && fnToString.call(Ctor) === ObjectFunctionString;
    },
    isEmptyObject: function isEmptyObject(obj) {
      var name;

      for (name in obj) {
        return false;
      }

      return true;
    },
    // Evaluates a script in a global context
    globalEval: function globalEval(code, options) {
      DOMEval(code, {
        nonce: options && options.nonce
      });
    },
    each: function each(obj, callback) {
      var length,
          i = 0;

      if (isArrayLike(obj)) {
        length = obj.length;

        for (; i < length; i++) {
          if (callback.call(obj[i], i, obj[i]) === false) {
            break;
          }
        }
      } else {
        for (i in obj) {
          if (callback.call(obj[i], i, obj[i]) === false) {
            break;
          }
        }
      }

      return obj;
    },
    // Support: Android <=4.0 only
    trim: function trim(text) {
      return text == null ? "" : (text + "").replace(rtrim, "");
    },
    // results is for internal usage only
    makeArray: function makeArray(arr, results) {
      var ret = results || [];

      if (arr != null) {
        if (isArrayLike(Object(arr))) {
          jQuery.merge(ret, typeof arr === "string" ? [arr] : arr);
        } else {
          push.call(ret, arr);
        }
      }

      return ret;
    },
    inArray: function inArray(elem, arr, i) {
      return arr == null ? -1 : indexOf.call(arr, elem, i);
    },
    // Support: Android <=4.0 only, PhantomJS 1 only
    // push.apply(_, arraylike) throws on ancient WebKit
    merge: function merge(first, second) {
      var len = +second.length,
          j = 0,
          i = first.length;

      for (; j < len; j++) {
        first[i++] = second[j];
      }

      first.length = i;
      return first;
    },
    grep: function grep(elems, callback, invert) {
      var callbackInverse,
          matches = [],
          i = 0,
          length = elems.length,
          callbackExpect = !invert; // Go through the array, only saving the items
      // that pass the validator function

      for (; i < length; i++) {
        callbackInverse = !callback(elems[i], i);

        if (callbackInverse !== callbackExpect) {
          matches.push(elems[i]);
        }
      }

      return matches;
    },
    // arg is for internal usage only
    map: function map(elems, callback, arg) {
      var length,
          value,
          i = 0,
          ret = []; // Go through the array, translating each of the items to their new values

      if (isArrayLike(elems)) {
        length = elems.length;

        for (; i < length; i++) {
          value = callback(elems[i], i, arg);

          if (value != null) {
            ret.push(value);
          }
        } // Go through every key on the object,

      } else {
        for (i in elems) {
          value = callback(elems[i], i, arg);

          if (value != null) {
            ret.push(value);
          }
        }
      } // Flatten any nested arrays


      return concat.apply([], ret);
    },
    // A global GUID counter for objects
    guid: 1,
    // jQuery.support is not used in Core but other projects attach their
    // properties to it so it needs to exist.
    support: support
  });

  if (typeof Symbol === "function") {
    jQuery.fn[Symbol.iterator] = arr[Symbol.iterator];
  } // Populate the class2type map


  jQuery.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function (i, name) {
    class2type["[object " + name + "]"] = name.toLowerCase();
  });

  function isArrayLike(obj) {
    // Support: real iOS 8.2 only (not reproducible in simulator)
    // `in` check used to prevent JIT error (gh-2145)
    // hasOwn isn't used here due to false negatives
    // regarding Nodelist length in IE
    var length = !!obj && "length" in obj && obj.length,
        type = toType(obj);

    if (isFunction(obj) || isWindow(obj)) {
      return false;
    }

    return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj;
  }

  var Sizzle =
  /*!
   * Sizzle CSS Selector Engine v2.3.4
   * https://sizzlejs.com/
   *
   * Copyright JS Foundation and other contributors
   * Released under the MIT license
   * https://js.foundation/
   *
   * Date: 2019-04-08
   */
  function (window) {
    var i,
        support,
        Expr,
        getText,
        isXML,
        tokenize,
        compile,
        select,
        outermostContext,
        sortInput,
        hasDuplicate,
        // Local document vars
    setDocument,
        document,
        docElem,
        documentIsHTML,
        rbuggyQSA,
        rbuggyMatches,
        matches,
        contains,
        // Instance-specific data
    expando = "sizzle" + 1 * new Date(),
        preferredDoc = window.document,
        dirruns = 0,
        done = 0,
        classCache = createCache(),
        tokenCache = createCache(),
        compilerCache = createCache(),
        nonnativeSelectorCache = createCache(),
        sortOrder = function sortOrder(a, b) {
      if (a === b) {
        hasDuplicate = true;
      }

      return 0;
    },
        // Instance methods
    hasOwn = {}.hasOwnProperty,
        arr = [],
        pop = arr.pop,
        push_native = arr.push,
        push = arr.push,
        slice = arr.slice,
        // Use a stripped-down indexOf as it's faster than native
    // https://jsperf.com/thor-indexof-vs-for/5
    indexOf = function indexOf(list, elem) {
      var i = 0,
          len = list.length;

      for (; i < len; i++) {
        if (list[i] === elem) {
          return i;
        }
      }

      return -1;
    },
        booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
        // Regular expressions
    // http://www.w3.org/TR/css3-selectors/#whitespace
    whitespace = "[\\x20\\t\\r\\n\\f]",
        // http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
    identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",
        // Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
    attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace + // Operator (capture 2)
    "*([*^$|!~]?=)" + whitespace + // "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
    "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace + "*\\]",
        pseudos = ":(" + identifier + ")(?:\\((" + // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
    // 1. quoted (capture 3; capture 4 or capture 5)
    "('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" + // 2. simple (capture 6)
    "((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" + // 3. anything else (capture 2)
    ".*" + ")\\)|)",
        // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
    rwhitespace = new RegExp(whitespace + "+", "g"),
        rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"),
        rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),
        rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"),
        rdescend = new RegExp(whitespace + "|>"),
        rpseudo = new RegExp(pseudos),
        ridentifier = new RegExp("^" + identifier + "$"),
        matchExpr = {
      "ID": new RegExp("^#(" + identifier + ")"),
      "CLASS": new RegExp("^\\.(" + identifier + ")"),
      "TAG": new RegExp("^(" + identifier + "|[*])"),
      "ATTR": new RegExp("^" + attributes),
      "PSEUDO": new RegExp("^" + pseudos),
      "CHILD": new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
      "bool": new RegExp("^(?:" + booleans + ")$", "i"),
      // For use in libraries implementing .is()
      // We use this for POS matching in `select`
      "needsContext": new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
    },
        rhtml = /HTML$/i,
        rinputs = /^(?:input|select|textarea|button)$/i,
        rheader = /^h\d$/i,
        rnative = /^[^{]+\{\s*\[native \w/,
        // Easily-parseable/retrievable ID or TAG or CLASS selectors
    rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
        rsibling = /[+~]/,
        // CSS escapes
    // http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
    runescape = new RegExp("\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig"),
        funescape = function funescape(_, escaped, escapedWhitespace) {
      var high = "0x" + escaped - 0x10000; // NaN means non-codepoint
      // Support: Firefox<24
      // Workaround erroneous numeric interpretation of +"0x"

      return high !== high || escapedWhitespace ? escaped : high < 0 ? // BMP codepoint
      String.fromCharCode(high + 0x10000) : // Supplemental Plane codepoint (surrogate pair)
      String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);
    },
        // CSS string/identifier serialization
    // https://drafts.csswg.org/cssom/#common-serializing-idioms
    rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
        fcssescape = function fcssescape(ch, asCodePoint) {
      if (asCodePoint) {
        // U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
        if (ch === "\0") {
          return "\uFFFD";
        } // Control characters and (dependent upon position) numbers get escaped as code points


        return ch.slice(0, -1) + "\\" + ch.charCodeAt(ch.length - 1).toString(16) + " ";
      } // Other potentially-special ASCII characters get backslash-escaped


      return "\\" + ch;
    },
        // Used for iframes
    // See setDocument()
    // Removing the function wrapper causes a "Permission Denied"
    // error in IE
    unloadHandler = function unloadHandler() {
      setDocument();
    },
        inDisabledFieldset = addCombinator(function (elem) {
      return elem.disabled === true && elem.nodeName.toLowerCase() === "fieldset";
    }, {
      dir: "parentNode",
      next: "legend"
    }); // Optimize for push.apply( _, NodeList )


    try {
      push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes); // Support: Android<4.0
      // Detect silently failing push.apply

      arr[preferredDoc.childNodes.length].nodeType;
    } catch (e) {
      push = {
        apply: arr.length ? // Leverage slice if possible
        function (target, els) {
          push_native.apply(target, slice.call(els));
        } : // Support: IE<9
        // Otherwise append directly
        function (target, els) {
          var j = target.length,
              i = 0; // Can't trust NodeList.length

          while (target[j++] = els[i++]) {}

          target.length = j - 1;
        }
      };
    }

    function Sizzle(selector, context, results, seed) {
      var m,
          i,
          elem,
          nid,
          match,
          groups,
          newSelector,
          newContext = context && context.ownerDocument,
          // nodeType defaults to 9, since context defaults to document
      nodeType = context ? context.nodeType : 9;
      results = results || []; // Return early from calls with invalid selector or context

      if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {
        return results;
      } // Try to shortcut find operations (as opposed to filters) in HTML documents


      if (!seed) {
        if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
          setDocument(context);
        }

        context = context || document;

        if (documentIsHTML) {
          // If the selector is sufficiently simple, try using a "get*By*" DOM method
          // (excepting DocumentFragment context, where the methods don't exist)
          if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {
            // ID selector
            if (m = match[1]) {
              // Document context
              if (nodeType === 9) {
                if (elem = context.getElementById(m)) {
                  // Support: IE, Opera, Webkit
                  // TODO: identify versions
                  // getElementById can match elements by name instead of ID
                  if (elem.id === m) {
                    results.push(elem);
                    return results;
                  }
                } else {
                  return results;
                } // Element context

              } else {
                // Support: IE, Opera, Webkit
                // TODO: identify versions
                // getElementById can match elements by name instead of ID
                if (newContext && (elem = newContext.getElementById(m)) && contains(context, elem) && elem.id === m) {
                  results.push(elem);
                  return results;
                }
              } // Type selector

            } else if (match[2]) {
              push.apply(results, context.getElementsByTagName(selector));
              return results; // Class selector
            } else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {
              push.apply(results, context.getElementsByClassName(m));
              return results;
            }
          } // Take advantage of querySelectorAll


          if (support.qsa && !nonnativeSelectorCache[selector + " "] && (!rbuggyQSA || !rbuggyQSA.test(selector)) && ( // Support: IE 8 only
          // Exclude object elements
          nodeType !== 1 || context.nodeName.toLowerCase() !== "object")) {
            newSelector = selector;
            newContext = context; // qSA considers elements outside a scoping root when evaluating child or
            // descendant combinators, which is not what we want.
            // In such cases, we work around the behavior by prefixing every selector in the
            // list with an ID selector referencing the scope context.
            // Thanks to Andrew Dupont for this technique.

            if (nodeType === 1 && rdescend.test(selector)) {
              // Capture the context ID, setting it first if necessary
              if (nid = context.getAttribute("id")) {
                nid = nid.replace(rcssescape, fcssescape);
              } else {
                context.setAttribute("id", nid = expando);
              } // Prefix every selector in the list


              groups = tokenize(selector);
              i = groups.length;

              while (i--) {
                groups[i] = "#" + nid + " " + toSelector(groups[i]);
              }

              newSelector = groups.join(","); // Expand context for sibling selectors

              newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
            }

            try {
              push.apply(results, newContext.querySelectorAll(newSelector));
              return results;
            } catch (qsaError) {
              nonnativeSelectorCache(selector, true);
            } finally {
              if (nid === expando) {
                context.removeAttribute("id");
              }
            }
          }
        }
      } // All others


      return select(selector.replace(rtrim, "$1"), context, results, seed);
    }
    /**
     * Create key-value caches of limited size
     * @returns {function(string, object)} Returns the Object data after storing it on itself with
     *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
     *	deleting the oldest entry
     */


    function createCache() {
      var keys = [];

      function cache(key, value) {
        // Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
        if (keys.push(key + " ") > Expr.cacheLength) {
          // Only keep the most recent entries
          delete cache[keys.shift()];
        }

        return cache[key + " "] = value;
      }

      return cache;
    }
    /**
     * Mark a function for special use by Sizzle
     * @param {Function} fn The function to mark
     */


    function markFunction(fn) {
      fn[expando] = true;
      return fn;
    }
    /**
     * Support testing using an element
     * @param {Function} fn Passed the created element and returns a boolean result
     */


    function assert(fn) {
      var el = document.createElement("fieldset");

      try {
        return !!fn(el);
      } catch (e) {
        return false;
      } finally {
        // Remove from its parent by default
        if (el.parentNode) {
          el.parentNode.removeChild(el);
        } // release memory in IE


        el = null;
      }
    }
    /**
     * Adds the same handler for all of the specified attrs
     * @param {String} attrs Pipe-separated list of attributes
     * @param {Function} handler The method that will be applied
     */


    function addHandle(attrs, handler) {
      var arr = attrs.split("|"),
          i = arr.length;

      while (i--) {
        Expr.attrHandle[arr[i]] = handler;
      }
    }
    /**
     * Checks document order of two siblings
     * @param {Element} a
     * @param {Element} b
     * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
     */


    function siblingCheck(a, b) {
      var cur = b && a,
          diff = cur && a.nodeType === 1 && b.nodeType === 1 && a.sourceIndex - b.sourceIndex; // Use IE sourceIndex if available on both nodes

      if (diff) {
        return diff;
      } // Check if b follows a


      if (cur) {
        while (cur = cur.nextSibling) {
          if (cur === b) {
            return -1;
          }
        }
      }

      return a ? 1 : -1;
    }
    /**
     * Returns a function to use in pseudos for input types
     * @param {String} type
     */


    function createInputPseudo(type) {
      return function (elem) {
        var name = elem.nodeName.toLowerCase();
        return name === "input" && elem.type === type;
      };
    }
    /**
     * Returns a function to use in pseudos for buttons
     * @param {String} type
     */


    function createButtonPseudo(type) {
      return function (elem) {
        var name = elem.nodeName.toLowerCase();
        return (name === "input" || name === "button") && elem.type === type;
      };
    }
    /**
     * Returns a function to use in pseudos for :enabled/:disabled
     * @param {Boolean} disabled true for :disabled; false for :enabled
     */


    function createDisabledPseudo(disabled) {
      // Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
      return function (elem) {
        // Only certain elements can match :enabled or :disabled
        // https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
        // https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
        if ("form" in elem) {
          // Check for inherited disabledness on relevant non-disabled elements:
          // * listed form-associated elements in a disabled fieldset
          //   https://html.spec.whatwg.org/multipage/forms.html#category-listed
          //   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
          // * option elements in a disabled optgroup
          //   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
          // All such elements have a "form" property.
          if (elem.parentNode && elem.disabled === false) {
            // Option elements defer to a parent optgroup if present
            if ("label" in elem) {
              if ("label" in elem.parentNode) {
                return elem.parentNode.disabled === disabled;
              } else {
                return elem.disabled === disabled;
              }
            } // Support: IE 6 - 11
            // Use the isDisabled shortcut property to check for disabled fieldset ancestors


            return elem.isDisabled === disabled || // Where there is no isDisabled, check manually

            /* jshint -W018 */
            elem.isDisabled !== !disabled && inDisabledFieldset(elem) === disabled;
          }

          return elem.disabled === disabled; // Try to winnow out elements that can't be disabled before trusting the disabled property.
          // Some victims get caught in our net (label, legend, menu, track), but it shouldn't
          // even exist on them, let alone have a boolean value.
        } else if ("label" in elem) {
          return elem.disabled === disabled;
        } // Remaining elements are neither :enabled nor :disabled


        return false;
      };
    }
    /**
     * Returns a function to use in pseudos for positionals
     * @param {Function} fn
     */


    function createPositionalPseudo(fn) {
      return markFunction(function (argument) {
        argument = +argument;
        return markFunction(function (seed, matches) {
          var j,
              matchIndexes = fn([], seed.length, argument),
              i = matchIndexes.length; // Match elements found at the specified indexes

          while (i--) {
            if (seed[j = matchIndexes[i]]) {
              seed[j] = !(matches[j] = seed[j]);
            }
          }
        });
      });
    }
    /**
     * Checks a node for validity as a Sizzle context
     * @param {Element|Object=} context
     * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
     */


    function testContext(context) {
      return context && typeof context.getElementsByTagName !== "undefined" && context;
    } // Expose support vars for convenience


    support = Sizzle.support = {};
    /**
     * Detects XML nodes
     * @param {Element|Object} elem An element or a document
     * @returns {Boolean} True iff elem is a non-HTML XML node
     */

    isXML = Sizzle.isXML = function (elem) {
      var namespace = elem.namespaceURI,
          docElem = (elem.ownerDocument || elem).documentElement; // Support: IE <=8
      // Assume HTML when documentElement doesn't yet exist, such as inside loading iframes
      // https://bugs.jquery.com/ticket/4833

      return !rhtml.test(namespace || docElem && docElem.nodeName || "HTML");
    };
    /**
     * Sets document-related variables once based on the current document
     * @param {Element|Object} [doc] An element or document object to use to set the document
     * @returns {Object} Returns the current document
     */


    setDocument = Sizzle.setDocument = function (node) {
      var hasCompare,
          subWindow,
          doc = node ? node.ownerDocument || node : preferredDoc; // Return early if doc is invalid or already selected

      if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
        return document;
      } // Update global variables


      document = doc;
      docElem = document.documentElement;
      documentIsHTML = !isXML(document); // Support: IE 9-11, Edge
      // Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)

      if (preferredDoc !== document && (subWindow = document.defaultView) && subWindow.top !== subWindow) {
        // Support: IE 11, Edge
        if (subWindow.addEventListener) {
          subWindow.addEventListener("unload", unloadHandler, false); // Support: IE 9 - 10 only
        } else if (subWindow.attachEvent) {
          subWindow.attachEvent("onunload", unloadHandler);
        }
      }
      /* Attributes
      ---------------------------------------------------------------------- */
      // Support: IE<8
      // Verify that getAttribute really returns attributes and not properties
      // (excepting IE8 booleans)


      support.attributes = assert(function (el) {
        el.className = "i";
        return !el.getAttribute("className");
      });
      /* getElement(s)By*
      ---------------------------------------------------------------------- */
      // Check if getElementsByTagName("*") returns only elements

      support.getElementsByTagName = assert(function (el) {
        el.appendChild(document.createComment(""));
        return !el.getElementsByTagName("*").length;
      }); // Support: IE<9

      support.getElementsByClassName = rnative.test(document.getElementsByClassName); // Support: IE<10
      // Check if getElementById returns elements by name
      // The broken getElementById methods don't pick up programmatically-set names,
      // so use a roundabout getElementsByName test

      support.getById = assert(function (el) {
        docElem.appendChild(el).id = expando;
        return !document.getElementsByName || !document.getElementsByName(expando).length;
      }); // ID filter and find

      if (support.getById) {
        Expr.filter["ID"] = function (id) {
          var attrId = id.replace(runescape, funescape);
          return function (elem) {
            return elem.getAttribute("id") === attrId;
          };
        };

        Expr.find["ID"] = function (id, context) {
          if (typeof context.getElementById !== "undefined" && documentIsHTML) {
            var elem = context.getElementById(id);
            return elem ? [elem] : [];
          }
        };
      } else {
        Expr.filter["ID"] = function (id) {
          var attrId = id.replace(runescape, funescape);
          return function (elem) {
            var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
            return node && node.value === attrId;
          };
        }; // Support: IE 6 - 7 only
        // getElementById is not reliable as a find shortcut


        Expr.find["ID"] = function (id, context) {
          if (typeof context.getElementById !== "undefined" && documentIsHTML) {
            var node,
                i,
                elems,
                elem = context.getElementById(id);

            if (elem) {
              // Verify the id attribute
              node = elem.getAttributeNode("id");

              if (node && node.value === id) {
                return [elem];
              } // Fall back on getElementsByName


              elems = context.getElementsByName(id);
              i = 0;

              while (elem = elems[i++]) {
                node = elem.getAttributeNode("id");

                if (node && node.value === id) {
                  return [elem];
                }
              }
            }

            return [];
          }
        };
      } // Tag


      Expr.find["TAG"] = support.getElementsByTagName ? function (tag, context) {
        if (typeof context.getElementsByTagName !== "undefined") {
          return context.getElementsByTagName(tag); // DocumentFragment nodes don't have gEBTN
        } else if (support.qsa) {
          return context.querySelectorAll(tag);
        }
      } : function (tag, context) {
        var elem,
            tmp = [],
            i = 0,
            // By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
        results = context.getElementsByTagName(tag); // Filter out possible comments

        if (tag === "*") {
          while (elem = results[i++]) {
            if (elem.nodeType === 1) {
              tmp.push(elem);
            }
          }

          return tmp;
        }

        return results;
      }; // Class

      Expr.find["CLASS"] = support.getElementsByClassName && function (className, context) {
        if (typeof context.getElementsByClassName !== "undefined" && documentIsHTML) {
          return context.getElementsByClassName(className);
        }
      };
      /* QSA/matchesSelector
      ---------------------------------------------------------------------- */
      // QSA and matchesSelector support
      // matchesSelector(:active) reports false when true (IE9/Opera 11.5)


      rbuggyMatches = []; // qSa(:focus) reports false when true (Chrome 21)
      // We allow this because of a bug in IE8/9 that throws an error
      // whenever `document.activeElement` is accessed on an iframe
      // So, we allow :focus to pass through QSA all the time to avoid the IE error
      // See https://bugs.jquery.com/ticket/13378

      rbuggyQSA = [];

      if (support.qsa = rnative.test(document.querySelectorAll)) {
        // Build QSA regex
        // Regex strategy adopted from Diego Perini
        assert(function (el) {
          // Select is set to empty string on purpose
          // This is to test IE's treatment of not explicitly
          // setting a boolean content attribute,
          // since its presence should be enough
          // https://bugs.jquery.com/ticket/12359
          docElem.appendChild(el).innerHTML = "<a id='" + expando + "'></a>" + "<select id='" + expando + "-\r\\' msallowcapture=''>" + "<option selected=''></option></select>"; // Support: IE8, Opera 11-12.16
          // Nothing should be selected when empty strings follow ^= or $= or *=
          // The test attribute must be unknown in Opera but "safe" for WinRT
          // https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section

          if (el.querySelectorAll("[msallowcapture^='']").length) {
            rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
          } // Support: IE8
          // Boolean attributes and "value" are not treated correctly


          if (!el.querySelectorAll("[selected]").length) {
            rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
          } // Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+


          if (!el.querySelectorAll("[id~=" + expando + "-]").length) {
            rbuggyQSA.push("~=");
          } // Webkit/Opera - :checked should return selected option elements
          // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
          // IE8 throws error here and will not see later tests


          if (!el.querySelectorAll(":checked").length) {
            rbuggyQSA.push(":checked");
          } // Support: Safari 8+, iOS 8+
          // https://bugs.webkit.org/show_bug.cgi?id=136851
          // In-page `selector#id sibling-combinator selector` fails


          if (!el.querySelectorAll("a#" + expando + "+*").length) {
            rbuggyQSA.push(".#.+[+~]");
          }
        });
        assert(function (el) {
          el.innerHTML = "<a href='' disabled='disabled'></a>" + "<select disabled='disabled'><option/></select>"; // Support: Windows 8 Native Apps
          // The type and name attributes are restricted during .innerHTML assignment

          var input = document.createElement("input");
          input.setAttribute("type", "hidden");
          el.appendChild(input).setAttribute("name", "D"); // Support: IE8
          // Enforce case-sensitivity of name attribute

          if (el.querySelectorAll("[name=d]").length) {
            rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
          } // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
          // IE8 throws error here and will not see later tests


          if (el.querySelectorAll(":enabled").length !== 2) {
            rbuggyQSA.push(":enabled", ":disabled");
          } // Support: IE9-11+
          // IE's :disabled selector does not pick up the children of disabled fieldsets


          docElem.appendChild(el).disabled = true;

          if (el.querySelectorAll(":disabled").length !== 2) {
            rbuggyQSA.push(":enabled", ":disabled");
          } // Opera 10-11 does not throw on post-comma invalid pseudos


          el.querySelectorAll("*,:x");
          rbuggyQSA.push(",.*:");
        });
      }

      if (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {
        assert(function (el) {
          // Check to see if it's possible to do matchesSelector
          // on a disconnected node (IE 9)
          support.disconnectedMatch = matches.call(el, "*"); // This should fail with an exception
          // Gecko does not error, returns false instead

          matches.call(el, "[s!='']:x");
          rbuggyMatches.push("!=", pseudos);
        });
      }

      rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
      rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));
      /* Contains
      ---------------------------------------------------------------------- */

      hasCompare = rnative.test(docElem.compareDocumentPosition); // Element contains another
      // Purposefully self-exclusive
      // As in, an element does not contain itself

      contains = hasCompare || rnative.test(docElem.contains) ? function (a, b) {
        var adown = a.nodeType === 9 ? a.documentElement : a,
            bup = b && b.parentNode;
        return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
      } : function (a, b) {
        if (b) {
          while (b = b.parentNode) {
            if (b === a) {
              return true;
            }
          }
        }

        return false;
      };
      /* Sorting
      ---------------------------------------------------------------------- */
      // Document order sorting

      sortOrder = hasCompare ? function (a, b) {
        // Flag for duplicate removal
        if (a === b) {
          hasDuplicate = true;
          return 0;
        } // Sort on method existence if only one input has compareDocumentPosition


        var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;

        if (compare) {
          return compare;
        } // Calculate position if both inputs belong to the same document


        compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : // Otherwise we know they are disconnected
        1; // Disconnected nodes

        if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {
          // Choose the first element that is related to our preferred document
          if (a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {
            return -1;
          }

          if (b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {
            return 1;
          } // Maintain original order


          return sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
        }

        return compare & 4 ? -1 : 1;
      } : function (a, b) {
        // Exit early if the nodes are identical
        if (a === b) {
          hasDuplicate = true;
          return 0;
        }

        var cur,
            i = 0,
            aup = a.parentNode,
            bup = b.parentNode,
            ap = [a],
            bp = [b]; // Parentless nodes are either documents or disconnected

        if (!aup || !bup) {
          return a === document ? -1 : b === document ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0; // If the nodes are siblings, we can do a quick check
        } else if (aup === bup) {
          return siblingCheck(a, b);
        } // Otherwise we need full lists of their ancestors for comparison


        cur = a;

        while (cur = cur.parentNode) {
          ap.unshift(cur);
        }

        cur = b;

        while (cur = cur.parentNode) {
          bp.unshift(cur);
        } // Walk down the tree looking for a discrepancy


        while (ap[i] === bp[i]) {
          i++;
        }

        return i ? // Do a sibling check if the nodes have a common ancestor
        siblingCheck(ap[i], bp[i]) : // Otherwise nodes in our document sort first
        ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;
      };
      return document;
    };

    Sizzle.matches = function (expr, elements) {
      return Sizzle(expr, null, null, elements);
    };

    Sizzle.matchesSelector = function (elem, expr) {
      // Set document vars if needed
      if ((elem.ownerDocument || elem) !== document) {
        setDocument(elem);
      }

      if (support.matchesSelector && documentIsHTML && !nonnativeSelectorCache[expr + " "] && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {
        try {
          var ret = matches.call(elem, expr); // IE 9's matchesSelector returns false on disconnected nodes

          if (ret || support.disconnectedMatch || // As well, disconnected nodes are said to be in a document
          // fragment in IE 9
          elem.document && elem.document.nodeType !== 11) {
            return ret;
          }
        } catch (e) {
          nonnativeSelectorCache(expr, true);
        }
      }

      return Sizzle(expr, document, null, [elem]).length > 0;
    };

    Sizzle.contains = function (context, elem) {
      // Set document vars if needed
      if ((context.ownerDocument || context) !== document) {
        setDocument(context);
      }

      return contains(context, elem);
    };

    Sizzle.attr = function (elem, name) {
      // Set document vars if needed
      if ((elem.ownerDocument || elem) !== document) {
        setDocument(elem);
      }

      var fn = Expr.attrHandle[name.toLowerCase()],
          // Don't get fooled by Object.prototype properties (jQuery #13807)
      val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;
      return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
    };

    Sizzle.escape = function (sel) {
      return (sel + "").replace(rcssescape, fcssescape);
    };

    Sizzle.error = function (msg) {
      throw new Error("Syntax error, unrecognized expression: " + msg);
    };
    /**
     * Document sorting and removing duplicates
     * @param {ArrayLike} results
     */


    Sizzle.uniqueSort = function (results) {
      var elem,
          duplicates = [],
          j = 0,
          i = 0; // Unless we *know* we can detect duplicates, assume their presence

      hasDuplicate = !support.detectDuplicates;
      sortInput = !support.sortStable && results.slice(0);
      results.sort(sortOrder);

      if (hasDuplicate) {
        while (elem = results[i++]) {
          if (elem === results[i]) {
            j = duplicates.push(i);
          }
        }

        while (j--) {
          results.splice(duplicates[j], 1);
        }
      } // Clear input after sorting to release objects
      // See https://github.com/jquery/sizzle/pull/225


      sortInput = null;
      return results;
    };
    /**
     * Utility function for retrieving the text value of an array of DOM nodes
     * @param {Array|Element} elem
     */


    getText = Sizzle.getText = function (elem) {
      var node,
          ret = "",
          i = 0,
          nodeType = elem.nodeType;

      if (!nodeType) {
        // If no nodeType, this is expected to be an array
        while (node = elem[i++]) {
          // Do not traverse comment nodes
          ret += getText(node);
        }
      } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
        // Use textContent for elements
        // innerText usage removed for consistency of new lines (jQuery #11153)
        if (typeof elem.textContent === "string") {
          return elem.textContent;
        } else {
          // Traverse its children
          for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
            ret += getText(elem);
          }
        }
      } else if (nodeType === 3 || nodeType === 4) {
        return elem.nodeValue;
      } // Do not include comment or processing instruction nodes


      return ret;
    };

    Expr = Sizzle.selectors = {
      // Can be adjusted by the user
      cacheLength: 50,
      createPseudo: markFunction,
      match: matchExpr,
      attrHandle: {},
      find: {},
      relative: {
        ">": {
          dir: "parentNode",
          first: true
        },
        " ": {
          dir: "parentNode"
        },
        "+": {
          dir: "previousSibling",
          first: true
        },
        "~": {
          dir: "previousSibling"
        }
      },
      preFilter: {
        "ATTR": function ATTR(match) {
          match[1] = match[1].replace(runescape, funescape); // Move the given value to match[3] whether quoted or unquoted

          match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);

          if (match[2] === "~=") {
            match[3] = " " + match[3] + " ";
          }

          return match.slice(0, 4);
        },
        "CHILD": function CHILD(match) {
          /* matches from matchExpr["CHILD"]
          	1 type (only|nth|...)
          	2 what (child|of-type)
          	3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
          	4 xn-component of xn+y argument ([+-]?\d*n|)
          	5 sign of xn-component
          	6 x of xn-component
          	7 sign of y-component
          	8 y of y-component
          */
          match[1] = match[1].toLowerCase();

          if (match[1].slice(0, 3) === "nth") {
            // nth-* requires argument
            if (!match[3]) {
              Sizzle.error(match[0]);
            } // numeric x and y parameters for Expr.filter.CHILD
            // remember that false/true cast respectively to 0/1


            match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
            match[5] = +(match[7] + match[8] || match[3] === "odd"); // other types prohibit arguments
          } else if (match[3]) {
            Sizzle.error(match[0]);
          }

          return match;
        },
        "PSEUDO": function PSEUDO(match) {
          var excess,
              unquoted = !match[6] && match[2];

          if (matchExpr["CHILD"].test(match[0])) {
            return null;
          } // Accept quoted arguments as-is


          if (match[3]) {
            match[2] = match[4] || match[5] || ""; // Strip excess characters from unquoted arguments
          } else if (unquoted && rpseudo.test(unquoted) && ( // Get excess from tokenize (recursively)
          excess = tokenize(unquoted, true)) && ( // advance to the next closing parenthesis
          excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {
            // excess is a negative index
            match[0] = match[0].slice(0, excess);
            match[2] = unquoted.slice(0, excess);
          } // Return only captures needed by the pseudo filter method (type and argument)


          return match.slice(0, 3);
        }
      },
      filter: {
        "TAG": function TAG(nodeNameSelector) {
          var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
          return nodeNameSelector === "*" ? function () {
            return true;
          } : function (elem) {
            return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
          };
        },
        "CLASS": function CLASS(className) {
          var pattern = classCache[className + " "];
          return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function (elem) {
            return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");
          });
        },
        "ATTR": function ATTR(name, operator, check) {
          return function (elem) {
            var result = Sizzle.attr(elem, name);

            if (result == null) {
              return operator === "!=";
            }

            if (!operator) {
              return true;
            }

            result += "";
            return operator === "=" ? result === check : operator === "!=" ? result !== check : operator === "^=" ? check && result.indexOf(check) === 0 : operator === "*=" ? check && result.indexOf(check) > -1 : operator === "$=" ? check && result.slice(-check.length) === check : operator === "~=" ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1 : operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" : false;
          };
        },
        "CHILD": function CHILD(type, what, argument, first, last) {
          var simple = type.slice(0, 3) !== "nth",
              forward = type.slice(-4) !== "last",
              ofType = what === "of-type";
          return first === 1 && last === 0 ? // Shortcut for :nth-*(n)
          function (elem) {
            return !!elem.parentNode;
          } : function (elem, context, xml) {
            var cache,
                uniqueCache,
                outerCache,
                node,
                nodeIndex,
                start,
                dir = simple !== forward ? "nextSibling" : "previousSibling",
                parent = elem.parentNode,
                name = ofType && elem.nodeName.toLowerCase(),
                useCache = !xml && !ofType,
                diff = false;

            if (parent) {
              // :(first|last|only)-(child|of-type)
              if (simple) {
                while (dir) {
                  node = elem;

                  while (node = node[dir]) {
                    if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {
                      return false;
                    }
                  } // Reverse direction for :only-* (if we haven't yet done so)


                  start = dir = type === "only" && !start && "nextSibling";
                }

                return true;
              }

              start = [forward ? parent.firstChild : parent.lastChild]; // non-xml :nth-child(...) stores cache data on `parent`

              if (forward && useCache) {
                // Seek `elem` from a previously-cached index
                // ...in a gzip-friendly way
                node = parent;
                outerCache = node[expando] || (node[expando] = {}); // Support: IE <9 only
                // Defend against cloned attroperties (jQuery gh-1709)

                uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                cache = uniqueCache[type] || [];
                nodeIndex = cache[0] === dirruns && cache[1];
                diff = nodeIndex && cache[2];
                node = nodeIndex && parent.childNodes[nodeIndex];

                while (node = ++nodeIndex && node && node[dir] || ( // Fallback to seeking `elem` from the start
                diff = nodeIndex = 0) || start.pop()) {
                  // When found, cache indexes on `parent` and break
                  if (node.nodeType === 1 && ++diff && node === elem) {
                    uniqueCache[type] = [dirruns, nodeIndex, diff];
                    break;
                  }
                }
              } else {
                // Use previously-cached element index if available
                if (useCache) {
                  // ...in a gzip-friendly way
                  node = elem;
                  outerCache = node[expando] || (node[expando] = {}); // Support: IE <9 only
                  // Defend against cloned attroperties (jQuery gh-1709)

                  uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                  cache = uniqueCache[type] || [];
                  nodeIndex = cache[0] === dirruns && cache[1];
                  diff = nodeIndex;
                } // xml :nth-child(...)
                // or :nth-last-child(...) or :nth(-last)?-of-type(...)


                if (diff === false) {
                  // Use the same loop as above to seek `elem` from the start
                  while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                    if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
                      // Cache the index of each encountered element
                      if (useCache) {
                        outerCache = node[expando] || (node[expando] = {}); // Support: IE <9 only
                        // Defend against cloned attroperties (jQuery gh-1709)

                        uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                        uniqueCache[type] = [dirruns, diff];
                      }

                      if (node === elem) {
                        break;
                      }
                    }
                  }
                }
              } // Incorporate the offset, then check against cycle size


              diff -= last;
              return diff === first || diff % first === 0 && diff / first >= 0;
            }
          };
        },
        "PSEUDO": function PSEUDO(pseudo, argument) {
          // pseudo-class names are case-insensitive
          // http://www.w3.org/TR/selectors/#pseudo-classes
          // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
          // Remember that setFilters inherits from pseudos
          var args,
              fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo); // The user may use createPseudo to indicate that
          // arguments are needed to create the filter function
          // just as Sizzle does

          if (fn[expando]) {
            return fn(argument);
          } // But maintain support for old signatures


          if (fn.length > 1) {
            args = [pseudo, pseudo, "", argument];
            return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {
              var idx,
                  matched = fn(seed, argument),
                  i = matched.length;

              while (i--) {
                idx = indexOf(seed, matched[i]);
                seed[idx] = !(matches[idx] = matched[i]);
              }
            }) : function (elem) {
              return fn(elem, 0, args);
            };
          }

          return fn;
        }
      },
      pseudos: {
        // Potentially complex pseudos
        "not": markFunction(function (selector) {
          // Trim the selector passed to compile
          // to avoid treating leading and trailing
          // spaces as combinators
          var input = [],
              results = [],
              matcher = compile(selector.replace(rtrim, "$1"));
          return matcher[expando] ? markFunction(function (seed, matches, context, xml) {
            var elem,
                unmatched = matcher(seed, null, xml, []),
                i = seed.length; // Match elements unmatched by `matcher`

            while (i--) {
              if (elem = unmatched[i]) {
                seed[i] = !(matches[i] = elem);
              }
            }
          }) : function (elem, context, xml) {
            input[0] = elem;
            matcher(input, null, xml, results); // Don't keep the element (issue #299)

            input[0] = null;
            return !results.pop();
          };
        }),
        "has": markFunction(function (selector) {
          return function (elem) {
            return Sizzle(selector, elem).length > 0;
          };
        }),
        "contains": markFunction(function (text) {
          text = text.replace(runescape, funescape);
          return function (elem) {
            return (elem.textContent || getText(elem)).indexOf(text) > -1;
          };
        }),
        // "Whether an element is represented by a :lang() selector
        // is based solely on the element's language value
        // being equal to the identifier C,
        // or beginning with the identifier C immediately followed by "-".
        // The matching of C against the element's language value is performed case-insensitively.
        // The identifier C does not have to be a valid language name."
        // http://www.w3.org/TR/selectors/#lang-pseudo
        "lang": markFunction(function (lang) {
          // lang value must be a valid identifier
          if (!ridentifier.test(lang || "")) {
            Sizzle.error("unsupported lang: " + lang);
          }

          lang = lang.replace(runescape, funescape).toLowerCase();
          return function (elem) {
            var elemLang;

            do {
              if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {
                elemLang = elemLang.toLowerCase();
                return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
              }
            } while ((elem = elem.parentNode) && elem.nodeType === 1);

            return false;
          };
        }),
        // Miscellaneous
        "target": function target(elem) {
          var hash = window.location && window.location.hash;
          return hash && hash.slice(1) === elem.id;
        },
        "root": function root(elem) {
          return elem === docElem;
        },
        "focus": function focus(elem) {
          return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
        },
        // Boolean properties
        "enabled": createDisabledPseudo(false),
        "disabled": createDisabledPseudo(true),
        "checked": function checked(elem) {
          // In CSS3, :checked should return both checked and selected elements
          // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
          var nodeName = elem.nodeName.toLowerCase();
          return nodeName === "input" && !!elem.checked || nodeName === "option" && !!elem.selected;
        },
        "selected": function selected(elem) {
          // Accessing this property makes selected-by-default
          // options in Safari work properly
          if (elem.parentNode) {
            elem.parentNode.selectedIndex;
          }

          return elem.selected === true;
        },
        // Contents
        "empty": function empty(elem) {
          // http://www.w3.org/TR/selectors/#empty-pseudo
          // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
          //   but not by others (comment: 8; processing instruction: 7; etc.)
          // nodeType < 6 works because attributes (2) do not appear as children
          for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
            if (elem.nodeType < 6) {
              return false;
            }
          }

          return true;
        },
        "parent": function parent(elem) {
          return !Expr.pseudos["empty"](elem);
        },
        // Element/input types
        "header": function header(elem) {
          return rheader.test(elem.nodeName);
        },
        "input": function input(elem) {
          return rinputs.test(elem.nodeName);
        },
        "button": function button(elem) {
          var name = elem.nodeName.toLowerCase();
          return name === "input" && elem.type === "button" || name === "button";
        },
        "text": function text(elem) {
          var attr;
          return elem.nodeName.toLowerCase() === "input" && elem.type === "text" && ( // Support: IE<8
          // New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
          (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
        },
        // Position-in-collection
        "first": createPositionalPseudo(function () {
          return [0];
        }),
        "last": createPositionalPseudo(function (matchIndexes, length) {
          return [length - 1];
        }),
        "eq": createPositionalPseudo(function (matchIndexes, length, argument) {
          return [argument < 0 ? argument + length : argument];
        }),
        "even": createPositionalPseudo(function (matchIndexes, length) {
          var i = 0;

          for (; i < length; i += 2) {
            matchIndexes.push(i);
          }

          return matchIndexes;
        }),
        "odd": createPositionalPseudo(function (matchIndexes, length) {
          var i = 1;

          for (; i < length; i += 2) {
            matchIndexes.push(i);
          }

          return matchIndexes;
        }),
        "lt": createPositionalPseudo(function (matchIndexes, length, argument) {
          var i = argument < 0 ? argument + length : argument > length ? length : argument;

          for (; --i >= 0;) {
            matchIndexes.push(i);
          }

          return matchIndexes;
        }),
        "gt": createPositionalPseudo(function (matchIndexes, length, argument) {
          var i = argument < 0 ? argument + length : argument;

          for (; ++i < length;) {
            matchIndexes.push(i);
          }

          return matchIndexes;
        })
      }
    };
    Expr.pseudos["nth"] = Expr.pseudos["eq"]; // Add button/input type pseudos

    for (i in {
      radio: true,
      checkbox: true,
      file: true,
      password: true,
      image: true
    }) {
      Expr.pseudos[i] = createInputPseudo(i);
    }

    for (i in {
      submit: true,
      reset: true
    }) {
      Expr.pseudos[i] = createButtonPseudo(i);
    } // Easy API for creating new setFilters


    function setFilters() {}

    setFilters.prototype = Expr.filters = Expr.pseudos;
    Expr.setFilters = new setFilters();

    tokenize = Sizzle.tokenize = function (selector, parseOnly) {
      var matched,
          match,
          tokens,
          type,
          soFar,
          groups,
          preFilters,
          cached = tokenCache[selector + " "];

      if (cached) {
        return parseOnly ? 0 : cached.slice(0);
      }

      soFar = selector;
      groups = [];
      preFilters = Expr.preFilter;

      while (soFar) {
        // Comma and first run
        if (!matched || (match = rcomma.exec(soFar))) {
          if (match) {
            // Don't consume trailing commas as valid
            soFar = soFar.slice(match[0].length) || soFar;
          }

          groups.push(tokens = []);
        }

        matched = false; // Combinators

        if (match = rcombinators.exec(soFar)) {
          matched = match.shift();
          tokens.push({
            value: matched,
            // Cast descendant combinators to space
            type: match[0].replace(rtrim, " ")
          });
          soFar = soFar.slice(matched.length);
        } // Filters


        for (type in Expr.filter) {
          if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
            matched = match.shift();
            tokens.push({
              value: matched,
              type: type,
              matches: match
            });
            soFar = soFar.slice(matched.length);
          }
        }

        if (!matched) {
          break;
        }
      } // Return the length of the invalid excess
      // if we're just parsing
      // Otherwise, throw an error or return tokens


      return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : // Cache the tokens
      tokenCache(selector, groups).slice(0);
    };

    function toSelector(tokens) {
      var i = 0,
          len = tokens.length,
          selector = "";

      for (; i < len; i++) {
        selector += tokens[i].value;
      }

      return selector;
    }

    function addCombinator(matcher, combinator, base) {
      var dir = combinator.dir,
          skip = combinator.next,
          key = skip || dir,
          checkNonElements = base && key === "parentNode",
          doneName = done++;
      return combinator.first ? // Check against closest ancestor/preceding element
      function (elem, context, xml) {
        while (elem = elem[dir]) {
          if (elem.nodeType === 1 || checkNonElements) {
            return matcher(elem, context, xml);
          }
        }

        return false;
      } : // Check against all ancestor/preceding elements
      function (elem, context, xml) {
        var oldCache,
            uniqueCache,
            outerCache,
            newCache = [dirruns, doneName]; // We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching

        if (xml) {
          while (elem = elem[dir]) {
            if (elem.nodeType === 1 || checkNonElements) {
              if (matcher(elem, context, xml)) {
                return true;
              }
            }
          }
        } else {
          while (elem = elem[dir]) {
            if (elem.nodeType === 1 || checkNonElements) {
              outerCache = elem[expando] || (elem[expando] = {}); // Support: IE <9 only
              // Defend against cloned attroperties (jQuery gh-1709)

              uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {});

              if (skip && skip === elem.nodeName.toLowerCase()) {
                elem = elem[dir] || elem;
              } else if ((oldCache = uniqueCache[key]) && oldCache[0] === dirruns && oldCache[1] === doneName) {
                // Assign to newCache so results back-propagate to previous elements
                return newCache[2] = oldCache[2];
              } else {
                // Reuse newcache so results back-propagate to previous elements
                uniqueCache[key] = newCache; // A match means we're done; a fail means we have to keep checking

                if (newCache[2] = matcher(elem, context, xml)) {
                  return true;
                }
              }
            }
          }
        }

        return false;
      };
    }

    function elementMatcher(matchers) {
      return matchers.length > 1 ? function (elem, context, xml) {
        var i = matchers.length;

        while (i--) {
          if (!matchers[i](elem, context, xml)) {
            return false;
          }
        }

        return true;
      } : matchers[0];
    }

    function multipleContexts(selector, contexts, results) {
      var i = 0,
          len = contexts.length;

      for (; i < len; i++) {
        Sizzle(selector, contexts[i], results);
      }

      return results;
    }

    function condense(unmatched, map, filter, context, xml) {
      var elem,
          newUnmatched = [],
          i = 0,
          len = unmatched.length,
          mapped = map != null;

      for (; i < len; i++) {
        if (elem = unmatched[i]) {
          if (!filter || filter(elem, context, xml)) {
            newUnmatched.push(elem);

            if (mapped) {
              map.push(i);
            }
          }
        }
      }

      return newUnmatched;
    }

    function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
      if (postFilter && !postFilter[expando]) {
        postFilter = setMatcher(postFilter);
      }

      if (postFinder && !postFinder[expando]) {
        postFinder = setMatcher(postFinder, postSelector);
      }

      return markFunction(function (seed, results, context, xml) {
        var temp,
            i,
            elem,
            preMap = [],
            postMap = [],
            preexisting = results.length,
            // Get initial elements from seed or context
        elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []),
            // Prefilter to get matcher input, preserving a map for seed-results synchronization
        matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems,
            matcherOut = matcher ? // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
        postFinder || (seed ? preFilter : preexisting || postFilter) ? // ...intermediate processing is necessary
        [] : // ...otherwise use results directly
        results : matcherIn; // Find primary matches

        if (matcher) {
          matcher(matcherIn, matcherOut, context, xml);
        } // Apply postFilter


        if (postFilter) {
          temp = condense(matcherOut, postMap);
          postFilter(temp, [], context, xml); // Un-match failing elements by moving them back to matcherIn

          i = temp.length;

          while (i--) {
            if (elem = temp[i]) {
              matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
            }
          }
        }

        if (seed) {
          if (postFinder || preFilter) {
            if (postFinder) {
              // Get the final matcherOut by condensing this intermediate into postFinder contexts
              temp = [];
              i = matcherOut.length;

              while (i--) {
                if (elem = matcherOut[i]) {
                  // Restore matcherIn since elem is not yet a final match
                  temp.push(matcherIn[i] = elem);
                }
              }

              postFinder(null, matcherOut = [], temp, xml);
            } // Move matched elements from seed to results to keep them synchronized


            i = matcherOut.length;

            while (i--) {
              if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {
                seed[temp] = !(results[temp] = elem);
              }
            }
          } // Add elements to results, through postFinder if defined

        } else {
          matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);

          if (postFinder) {
            postFinder(null, results, matcherOut, xml);
          } else {
            push.apply(results, matcherOut);
          }
        }
      });
    }

    function matcherFromTokens(tokens) {
      var checkContext,
          matcher,
          j,
          len = tokens.length,
          leadingRelative = Expr.relative[tokens[0].type],
          implicitRelative = leadingRelative || Expr.relative[" "],
          i = leadingRelative ? 1 : 0,
          // The foundational matcher ensures that elements are reachable from top-level context(s)
      matchContext = addCombinator(function (elem) {
        return elem === checkContext;
      }, implicitRelative, true),
          matchAnyContext = addCombinator(function (elem) {
        return indexOf(checkContext, elem) > -1;
      }, implicitRelative, true),
          matchers = [function (elem, context, xml) {
        var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml)); // Avoid hanging onto element (issue #299)

        checkContext = null;
        return ret;
      }];

      for (; i < len; i++) {
        if (matcher = Expr.relative[tokens[i].type]) {
          matchers = [addCombinator(elementMatcher(matchers), matcher)];
        } else {
          matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches); // Return special upon seeing a positional matcher

          if (matcher[expando]) {
            // Find the next relative operator (if any) for proper handling
            j = ++i;

            for (; j < len; j++) {
              if (Expr.relative[tokens[j].type]) {
                break;
              }
            }

            return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector( // If the preceding token was a descendant combinator, insert an implicit any-element `*`
            tokens.slice(0, i - 1).concat({
              value: tokens[i - 2].type === " " ? "*" : ""
            })).replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
          }

          matchers.push(matcher);
        }
      }

      return elementMatcher(matchers);
    }

    function matcherFromGroupMatchers(elementMatchers, setMatchers) {
      var bySet = setMatchers.length > 0,
          byElement = elementMatchers.length > 0,
          superMatcher = function superMatcher(seed, context, xml, results, outermost) {
        var elem,
            j,
            matcher,
            matchedCount = 0,
            i = "0",
            unmatched = seed && [],
            setMatched = [],
            contextBackup = outermostContext,
            // We must always have either seed elements or outermost context
        elems = seed || byElement && Expr.find["TAG"]("*", outermost),
            // Use integer dirruns iff this is the outermost matcher
        dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1,
            len = elems.length;

        if (outermost) {
          outermostContext = context === document || context || outermost;
        } // Add elements passing elementMatchers directly to results
        // Support: IE<9, Safari
        // Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id


        for (; i !== len && (elem = elems[i]) != null; i++) {
          if (byElement && elem) {
            j = 0;

            if (!context && elem.ownerDocument !== document) {
              setDocument(elem);
              xml = !documentIsHTML;
            }

            while (matcher = elementMatchers[j++]) {
              if (matcher(elem, context || document, xml)) {
                results.push(elem);
                break;
              }
            }

            if (outermost) {
              dirruns = dirrunsUnique;
            }
          } // Track unmatched elements for set filters


          if (bySet) {
            // They will have gone through all possible matchers
            if (elem = !matcher && elem) {
              matchedCount--;
            } // Lengthen the array for every element, matched or not


            if (seed) {
              unmatched.push(elem);
            }
          }
        } // `i` is now the count of elements visited above, and adding it to `matchedCount`
        // makes the latter nonnegative.


        matchedCount += i; // Apply set filters to unmatched elements
        // NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
        // equals `i`), unless we didn't visit _any_ elements in the above loop because we have
        // no element matchers and no seed.
        // Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
        // case, which will result in a "00" `matchedCount` that differs from `i` but is also
        // numerically zero.

        if (bySet && i !== matchedCount) {
          j = 0;

          while (matcher = setMatchers[j++]) {
            matcher(unmatched, setMatched, context, xml);
          }

          if (seed) {
            // Reintegrate element matches to eliminate the need for sorting
            if (matchedCount > 0) {
              while (i--) {
                if (!(unmatched[i] || setMatched[i])) {
                  setMatched[i] = pop.call(results);
                }
              }
            } // Discard index placeholder values to get only actual matches


            setMatched = condense(setMatched);
          } // Add matches to results


          push.apply(results, setMatched); // Seedless set matches succeeding multiple successful matchers stipulate sorting

          if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {
            Sizzle.uniqueSort(results);
          }
        } // Override manipulation of globals by nested matchers


        if (outermost) {
          dirruns = dirrunsUnique;
          outermostContext = contextBackup;
        }

        return unmatched;
      };

      return bySet ? markFunction(superMatcher) : superMatcher;
    }

    compile = Sizzle.compile = function (selector, match
    /* Internal Use Only */
    ) {
      var i,
          setMatchers = [],
          elementMatchers = [],
          cached = compilerCache[selector + " "];

      if (!cached) {
        // Generate a function of recursive functions that can be used to check each element
        if (!match) {
          match = tokenize(selector);
        }

        i = match.length;

        while (i--) {
          cached = matcherFromTokens(match[i]);

          if (cached[expando]) {
            setMatchers.push(cached);
          } else {
            elementMatchers.push(cached);
          }
        } // Cache the compiled function


        cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers)); // Save selector and tokenization

        cached.selector = selector;
      }

      return cached;
    };
    /**
     * A low-level selection function that works with Sizzle's compiled
     *  selector functions
     * @param {String|Function} selector A selector or a pre-compiled
     *  selector function built with Sizzle.compile
     * @param {Element} context
     * @param {Array} [results]
     * @param {Array} [seed] A set of elements to match against
     */


    select = Sizzle.select = function (selector, context, results, seed) {
      var i,
          tokens,
          token,
          type,
          find,
          compiled = typeof selector === "function" && selector,
          match = !seed && tokenize(selector = compiled.selector || selector);
      results = results || []; // Try to minimize operations if there is only one selector in the list and no seed
      // (the latter of which guarantees us context)

      if (match.length === 1) {
        // Reduce context if the leading compound selector is an ID
        tokens = match[0] = match[0].slice(0);

        if (tokens.length > 2 && (token = tokens[0]).type === "ID" && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {
          context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];

          if (!context) {
            return results; // Precompiled matchers will still verify ancestry, so step up a level
          } else if (compiled) {
            context = context.parentNode;
          }

          selector = selector.slice(tokens.shift().value.length);
        } // Fetch a seed set for right-to-left matching


        i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;

        while (i--) {
          token = tokens[i]; // Abort if we hit a combinator

          if (Expr.relative[type = token.type]) {
            break;
          }

          if (find = Expr.find[type]) {
            // Search, expanding context for leading sibling combinators
            if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {
              // If seed is empty or no tokens remain, we can return early
              tokens.splice(i, 1);
              selector = seed.length && toSelector(tokens);

              if (!selector) {
                push.apply(results, seed);
                return results;
              }

              break;
            }
          }
        }
      } // Compile and execute a filtering function if one is not provided
      // Provide `match` to avoid retokenization if we modified the selector above


      (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, !context || rsibling.test(selector) && testContext(context.parentNode) || context);
      return results;
    }; // One-time assignments
    // Sort stability


    support.sortStable = expando.split("").sort(sortOrder).join("") === expando; // Support: Chrome 14-35+
    // Always assume duplicates if they aren't passed to the comparison function

    support.detectDuplicates = !!hasDuplicate; // Initialize against the default document

    setDocument(); // Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
    // Detached nodes confoundingly follow *each other*

    support.sortDetached = assert(function (el) {
      // Should return 1, but returns 4 (following)
      return el.compareDocumentPosition(document.createElement("fieldset")) & 1;
    }); // Support: IE<8
    // Prevent attribute/property "interpolation"
    // https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx

    if (!assert(function (el) {
      el.innerHTML = "<a href='#'></a>";
      return el.firstChild.getAttribute("href") === "#";
    })) {
      addHandle("type|href|height|width", function (elem, name, isXML) {
        if (!isXML) {
          return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2);
        }
      });
    } // Support: IE<9
    // Use defaultValue in place of getAttribute("value")


    if (!support.attributes || !assert(function (el) {
      el.innerHTML = "<input/>";
      el.firstChild.setAttribute("value", "");
      return el.firstChild.getAttribute("value") === "";
    })) {
      addHandle("value", function (elem, name, isXML) {
        if (!isXML && elem.nodeName.toLowerCase() === "input") {
          return elem.defaultValue;
        }
      });
    } // Support: IE<9
    // Use getAttributeNode to fetch booleans when getAttribute lies


    if (!assert(function (el) {
      return el.getAttribute("disabled") == null;
    })) {
      addHandle(booleans, function (elem, name, isXML) {
        var val;

        if (!isXML) {
          return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
        }
      });
    }

    return Sizzle;
  }(window);

  jQuery.find = Sizzle;
  jQuery.expr = Sizzle.selectors; // Deprecated

  jQuery.expr[":"] = jQuery.expr.pseudos;
  jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
  jQuery.text = Sizzle.getText;
  jQuery.isXMLDoc = Sizzle.isXML;
  jQuery.contains = Sizzle.contains;
  jQuery.escapeSelector = Sizzle.escape;

  var dir = function dir(elem, _dir, until) {
    var matched = [],
        truncate = until !== undefined;

    while ((elem = elem[_dir]) && elem.nodeType !== 9) {
      if (elem.nodeType === 1) {
        if (truncate && jQuery(elem).is(until)) {
          break;
        }

        matched.push(elem);
      }
    }

    return matched;
  };

  var _siblings = function siblings(n, elem) {
    var matched = [];

    for (; n; n = n.nextSibling) {
      if (n.nodeType === 1 && n !== elem) {
        matched.push(n);
      }
    }

    return matched;
  };

  var rneedsContext = jQuery.expr.match.needsContext;

  function nodeName(elem, name) {
    return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
  }

  ;
  var rsingleTag = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i; // Implement the identical functionality for filter and not

  function winnow(elements, qualifier, not) {
    if (isFunction(qualifier)) {
      return jQuery.grep(elements, function (elem, i) {
        return !!qualifier.call(elem, i, elem) !== not;
      });
    } // Single element


    if (qualifier.nodeType) {
      return jQuery.grep(elements, function (elem) {
        return elem === qualifier !== not;
      });
    } // Arraylike of elements (jQuery, arguments, Array)


    if (typeof qualifier !== "string") {
      return jQuery.grep(elements, function (elem) {
        return indexOf.call(qualifier, elem) > -1 !== not;
      });
    } // Filtered directly for both simple and complex selectors


    return jQuery.filter(qualifier, elements, not);
  }

  jQuery.filter = function (expr, elems, not) {
    var elem = elems[0];

    if (not) {
      expr = ":not(" + expr + ")";
    }

    if (elems.length === 1 && elem.nodeType === 1) {
      return jQuery.find.matchesSelector(elem, expr) ? [elem] : [];
    }

    return jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {
      return elem.nodeType === 1;
    }));
  };

  jQuery.fn.extend({
    find: function find(selector) {
      var i,
          ret,
          len = this.length,
          self = this;

      if (typeof selector !== "string") {
        return this.pushStack(jQuery(selector).filter(function () {
          for (i = 0; i < len; i++) {
            if (jQuery.contains(self[i], this)) {
              return true;
            }
          }
        }));
      }

      ret = this.pushStack([]);

      for (i = 0; i < len; i++) {
        jQuery.find(selector, self[i], ret);
      }

      return len > 1 ? jQuery.uniqueSort(ret) : ret;
    },
    filter: function filter(selector) {
      return this.pushStack(winnow(this, selector || [], false));
    },
    not: function not(selector) {
      return this.pushStack(winnow(this, selector || [], true));
    },
    is: function is(selector) {
      return !!winnow(this, // If this is a positional/relative selector, check membership in the returned set
      // so $("p:first").is("p:last") won't return true for a doc with two "p".
      typeof selector === "string" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;
    }
  }); // Initialize a jQuery object
  // A central reference to the root jQuery(document)

  var rootjQuery,
      // A simple way to check for HTML strings
  // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
  // Strict HTML recognition (#11290: must start with <)
  // Shortcut simple #id case for speed
  rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,
      init = jQuery.fn.init = function (selector, context, root) {
    var match, elem; // HANDLE: $(""), $(null), $(undefined), $(false)

    if (!selector) {
      return this;
    } // Method init() accepts an alternate rootjQuery
    // so migrate can support jQuery.sub (gh-2101)


    root = root || rootjQuery; // Handle HTML strings

    if (typeof selector === "string") {
      if (selector[0] === "<" && selector[selector.length - 1] === ">" && selector.length >= 3) {
        // Assume that strings that start and end with <> are HTML and skip the regex check
        match = [null, selector, null];
      } else {
        match = rquickExpr.exec(selector);
      } // Match html or make sure no context is specified for #id


      if (match && (match[1] || !context)) {
        // HANDLE: $(html) -> $(array)
        if (match[1]) {
          context = context instanceof jQuery ? context[0] : context; // Option to run scripts is true for back-compat
          // Intentionally let the error be thrown if parseHTML is not present

          jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true)); // HANDLE: $(html, props)

          if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
            for (match in context) {
              // Properties of context are called as methods if possible
              if (isFunction(this[match])) {
                this[match](context[match]); // ...and otherwise set as attributes
              } else {
                this.attr(match, context[match]);
              }
            }
          }

          return this; // HANDLE: $(#id)
        } else {
          elem = document.getElementById(match[2]);

          if (elem) {
            // Inject the element directly into the jQuery object
            this[0] = elem;
            this.length = 1;
          }

          return this;
        } // HANDLE: $(expr, $(...))

      } else if (!context || context.jquery) {
        return (context || root).find(selector); // HANDLE: $(expr, context)
        // (which is just equivalent to: $(context).find(expr)
      } else {
        return this.constructor(context).find(selector);
      } // HANDLE: $(DOMElement)

    } else if (selector.nodeType) {
      this[0] = selector;
      this.length = 1;
      return this; // HANDLE: $(function)
      // Shortcut for document ready
    } else if (isFunction(selector)) {
      return root.ready !== undefined ? root.ready(selector) : // Execute immediately if ready is not present
      selector(jQuery);
    }

    return jQuery.makeArray(selector, this);
  }; // Give the init function the jQuery prototype for later instantiation


  init.prototype = jQuery.fn; // Initialize central reference

  rootjQuery = jQuery(document);
  var rparentsprev = /^(?:parents|prev(?:Until|All))/,
      // Methods guaranteed to produce a unique set when starting from a unique set
  guaranteedUnique = {
    children: true,
    contents: true,
    next: true,
    prev: true
  };
  jQuery.fn.extend({
    has: function has(target) {
      var targets = jQuery(target, this),
          l = targets.length;
      return this.filter(function () {
        var i = 0;

        for (; i < l; i++) {
          if (jQuery.contains(this, targets[i])) {
            return true;
          }
        }
      });
    },
    closest: function closest(selectors, context) {
      var cur,
          i = 0,
          l = this.length,
          matched = [],
          targets = typeof selectors !== "string" && jQuery(selectors); // Positional selectors never match, since there's no _selection_ context

      if (!rneedsContext.test(selectors)) {
        for (; i < l; i++) {
          for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
            // Always skip document fragments
            if (cur.nodeType < 11 && (targets ? targets.index(cur) > -1 : // Don't pass non-elements to Sizzle
            cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {
              matched.push(cur);
              break;
            }
          }
        }
      }

      return this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched);
    },
    // Determine the position of an element within the set
    index: function index(elem) {
      // No argument, return index in parent
      if (!elem) {
        return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
      } // Index in selector


      if (typeof elem === "string") {
        return indexOf.call(jQuery(elem), this[0]);
      } // Locate the position of the desired element


      return indexOf.call(this, // If it receives a jQuery object, the first element is used
      elem.jquery ? elem[0] : elem);
    },
    add: function add(selector, context) {
      return this.pushStack(jQuery.uniqueSort(jQuery.merge(this.get(), jQuery(selector, context))));
    },
    addBack: function addBack(selector) {
      return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
    }
  });

  function sibling(cur, dir) {
    while ((cur = cur[dir]) && cur.nodeType !== 1) {}

    return cur;
  }

  jQuery.each({
    parent: function parent(elem) {
      var parent = elem.parentNode;
      return parent && parent.nodeType !== 11 ? parent : null;
    },
    parents: function parents(elem) {
      return dir(elem, "parentNode");
    },
    parentsUntil: function parentsUntil(elem, i, until) {
      return dir(elem, "parentNode", until);
    },
    next: function next(elem) {
      return sibling(elem, "nextSibling");
    },
    prev: function prev(elem) {
      return sibling(elem, "previousSibling");
    },
    nextAll: function nextAll(elem) {
      return dir(elem, "nextSibling");
    },
    prevAll: function prevAll(elem) {
      return dir(elem, "previousSibling");
    },
    nextUntil: function nextUntil(elem, i, until) {
      return dir(elem, "nextSibling", until);
    },
    prevUntil: function prevUntil(elem, i, until) {
      return dir(elem, "previousSibling", until);
    },
    siblings: function siblings(elem) {
      return _siblings((elem.parentNode || {}).firstChild, elem);
    },
    children: function children(elem) {
      return _siblings(elem.firstChild);
    },
    contents: function contents(elem) {
      if (typeof elem.contentDocument !== "undefined") {
        return elem.contentDocument;
      } // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
      // Treat the template element as a regular one in browsers that
      // don't support it.


      if (nodeName(elem, "template")) {
        elem = elem.content || elem;
      }

      return jQuery.merge([], elem.childNodes);
    }
  }, function (name, fn) {
    jQuery.fn[name] = function (until, selector) {
      var matched = jQuery.map(this, fn, until);

      if (name.slice(-5) !== "Until") {
        selector = until;
      }

      if (selector && typeof selector === "string") {
        matched = jQuery.filter(selector, matched);
      }

      if (this.length > 1) {
        // Remove duplicates
        if (!guaranteedUnique[name]) {
          jQuery.uniqueSort(matched);
        } // Reverse order for parents* and prev-derivatives


        if (rparentsprev.test(name)) {
          matched.reverse();
        }
      }

      return this.pushStack(matched);
    };
  });
  var rnothtmlwhite = /[^\x20\t\r\n\f]+/g; // Convert String-formatted options into Object-formatted ones

  function createOptions(options) {
    var object = {};
    jQuery.each(options.match(rnothtmlwhite) || [], function (_, flag) {
      object[flag] = true;
    });
    return object;
  }
  /*
   * Create a callback list using the following parameters:
   *
   *	options: an optional list of space-separated options that will change how
   *			the callback list behaves or a more traditional option object
   *
   * By default a callback list will act like an event callback list and can be
   * "fired" multiple times.
   *
   * Possible options:
   *
   *	once:			will ensure the callback list can only be fired once (like a Deferred)
   *
   *	memory:			will keep track of previous values and will call any callback added
   *					after the list has been fired right away with the latest "memorized"
   *					values (like a Deferred)
   *
   *	unique:			will ensure a callback can only be added once (no duplicate in the list)
   *
   *	stopOnFalse:	interrupt callings when a callback returns false
   *
   */


  jQuery.Callbacks = function (options) {
    // Convert options from String-formatted to Object-formatted if needed
    // (we check in cache first)
    options = typeof options === "string" ? createOptions(options) : jQuery.extend({}, options);

    var // Flag to know if list is currently firing
    firing,
        // Last fire value for non-forgettable lists
    memory,
        // Flag to know if list was already fired
    _fired,
        // Flag to prevent firing
    _locked,
        // Actual callback list
    list = [],
        // Queue of execution data for repeatable lists
    queue = [],
        // Index of currently firing callback (modified by add/remove as needed)
    firingIndex = -1,
        // Fire callbacks
    fire = function fire() {
      // Enforce single-firing
      _locked = _locked || options.once; // Execute callbacks for all pending executions,
      // respecting firingIndex overrides and runtime changes

      _fired = firing = true;

      for (; queue.length; firingIndex = -1) {
        memory = queue.shift();

        while (++firingIndex < list.length) {
          // Run callback and check for early termination
          if (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {
            // Jump to end and forget the data so .add doesn't re-fire
            firingIndex = list.length;
            memory = false;
          }
        }
      } // Forget the data if we're done with it


      if (!options.memory) {
        memory = false;
      }

      firing = false; // Clean up if we're done firing for good

      if (_locked) {
        // Keep an empty list if we have data for future add calls
        if (memory) {
          list = []; // Otherwise, this object is spent
        } else {
          list = "";
        }
      }
    },
        // Actual Callbacks object
    self = {
      // Add a callback or a collection of callbacks to the list
      add: function add() {
        if (list) {
          // If we have memory from a past run, we should fire after adding
          if (memory && !firing) {
            firingIndex = list.length - 1;
            queue.push(memory);
          }

          (function add(args) {
            jQuery.each(args, function (_, arg) {
              if (isFunction(arg)) {
                if (!options.unique || !self.has(arg)) {
                  list.push(arg);
                }
              } else if (arg && arg.length && toType(arg) !== "string") {
                // Inspect recursively
                add(arg);
              }
            });
          })(arguments);

          if (memory && !firing) {
            fire();
          }
        }

        return this;
      },
      // Remove a callback from the list
      remove: function remove() {
        jQuery.each(arguments, function (_, arg) {
          var index;

          while ((index = jQuery.inArray(arg, list, index)) > -1) {
            list.splice(index, 1); // Handle firing indexes

            if (index <= firingIndex) {
              firingIndex--;
            }
          }
        });
        return this;
      },
      // Check if a given callback is in the list.
      // If no argument is given, return whether or not list has callbacks attached.
      has: function has(fn) {
        return fn ? jQuery.inArray(fn, list) > -1 : list.length > 0;
      },
      // Remove all callbacks from the list
      empty: function empty() {
        if (list) {
          list = [];
        }

        return this;
      },
      // Disable .fire and .add
      // Abort any current/pending executions
      // Clear all callbacks and values
      disable: function disable() {
        _locked = queue = [];
        list = memory = "";
        return this;
      },
      disabled: function disabled() {
        return !list;
      },
      // Disable .fire
      // Also disable .add unless we have memory (since it would have no effect)
      // Abort any pending executions
      lock: function lock() {
        _locked = queue = [];

        if (!memory && !firing) {
          list = memory = "";
        }

        return this;
      },
      locked: function locked() {
        return !!_locked;
      },
      // Call all callbacks with the given context and arguments
      fireWith: function fireWith(context, args) {
        if (!_locked) {
          args = args || [];
          args = [context, args.slice ? args.slice() : args];
          queue.push(args);

          if (!firing) {
            fire();
          }
        }

        return this;
      },
      // Call all the callbacks with the given arguments
      fire: function fire() {
        self.fireWith(this, arguments);
        return this;
      },
      // To know if the callbacks have already been called at least once
      fired: function fired() {
        return !!_fired;
      }
    };

    return self;
  };

  function Identity(v) {
    return v;
  }

  function Thrower(ex) {
    throw ex;
  }

  function adoptValue(value, resolve, reject, noValue) {
    var method;

    try {
      // Check for promise aspect first to privilege synchronous behavior
      if (value && isFunction(method = value.promise)) {
        method.call(value).done(resolve).fail(reject); // Other thenables
      } else if (value && isFunction(method = value.then)) {
        method.call(value, resolve, reject); // Other non-thenables
      } else {
        // Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
        // * false: [ value ].slice( 0 ) => resolve( value )
        // * true: [ value ].slice( 1 ) => resolve()
        resolve.apply(undefined, [value].slice(noValue));
      } // For Promises/A+, convert exceptions into rejections
      // Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
      // Deferred#then to conditionally suppress rejection.

    } catch (value) {
      // Support: Android 4.0 only
      // Strict mode functions invoked without .call/.apply get global-object context
      reject.apply(undefined, [value]);
    }
  }

  jQuery.extend({
    Deferred: function Deferred(func) {
      var tuples = [// action, add listener, callbacks,
      // ... .then handlers, argument index, [final state]
      ["notify", "progress", jQuery.Callbacks("memory"), jQuery.Callbacks("memory"), 2], ["resolve", "done", jQuery.Callbacks("once memory"), jQuery.Callbacks("once memory"), 0, "resolved"], ["reject", "fail", jQuery.Callbacks("once memory"), jQuery.Callbacks("once memory"), 1, "rejected"]],
          _state = "pending",
          _promise = {
        state: function state() {
          return _state;
        },
        always: function always() {
          deferred.done(arguments).fail(arguments);
          return this;
        },
        "catch": function _catch(fn) {
          return _promise.then(null, fn);
        },
        // Keep pipe for back-compat
        pipe: function pipe()
        /* fnDone, fnFail, fnProgress */
        {
          var fns = arguments;
          return jQuery.Deferred(function (newDefer) {
            jQuery.each(tuples, function (i, tuple) {
              // Map tuples (progress, done, fail) to arguments (done, fail, progress)
              var fn = isFunction(fns[tuple[4]]) && fns[tuple[4]]; // deferred.progress(function() { bind to newDefer or newDefer.notify })
              // deferred.done(function() { bind to newDefer or newDefer.resolve })
              // deferred.fail(function() { bind to newDefer or newDefer.reject })

              deferred[tuple[1]](function () {
                var returned = fn && fn.apply(this, arguments);

                if (returned && isFunction(returned.promise)) {
                  returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);
                } else {
                  newDefer[tuple[0] + "With"](this, fn ? [returned] : arguments);
                }
              });
            });
            fns = null;
          }).promise();
        },
        then: function then(onFulfilled, onRejected, onProgress) {
          var maxDepth = 0;

          function resolve(depth, deferred, handler, special) {
            return function () {
              var that = this,
                  args = arguments,
                  mightThrow = function mightThrow() {
                var returned, then; // Support: Promises/A+ section 2.3.3.3.3
                // https://promisesaplus.com/#point-59
                // Ignore double-resolution attempts

                if (depth < maxDepth) {
                  return;
                }

                returned = handler.apply(that, args); // Support: Promises/A+ section 2.3.1
                // https://promisesaplus.com/#point-48

                if (returned === deferred.promise()) {
                  throw new TypeError("Thenable self-resolution");
                } // Support: Promises/A+ sections 2.3.3.1, 3.5
                // https://promisesaplus.com/#point-54
                // https://promisesaplus.com/#point-75
                // Retrieve `then` only once


                then = returned && ( // Support: Promises/A+ section 2.3.4
                // https://promisesaplus.com/#point-64
                // Only check objects and functions for thenability
                _typeof(returned) === "object" || typeof returned === "function") && returned.then; // Handle a returned thenable

                if (isFunction(then)) {
                  // Special processors (notify) just wait for resolution
                  if (special) {
                    then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special)); // Normal processors (resolve) also hook into progress
                  } else {
                    // ...and disregard older resolution values
                    maxDepth++;
                    then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special), resolve(maxDepth, deferred, Identity, deferred.notifyWith));
                  } // Handle all other returned values

                } else {
                  // Only substitute handlers pass on context
                  // and multiple values (non-spec behavior)
                  if (handler !== Identity) {
                    that = undefined;
                    args = [returned];
                  } // Process the value(s)
                  // Default process is resolve


                  (special || deferred.resolveWith)(that, args);
                }
              },
                  // Only normal processors (resolve) catch and reject exceptions
              process = special ? mightThrow : function () {
                try {
                  mightThrow();
                } catch (e) {
                  if (jQuery.Deferred.exceptionHook) {
                    jQuery.Deferred.exceptionHook(e, process.stackTrace);
                  } // Support: Promises/A+ section 2.3.3.3.4.1
                  // https://promisesaplus.com/#point-61
                  // Ignore post-resolution exceptions


                  if (depth + 1 >= maxDepth) {
                    // Only substitute handlers pass on context
                    // and multiple values (non-spec behavior)
                    if (handler !== Thrower) {
                      that = undefined;
                      args = [e];
                    }

                    deferred.rejectWith(that, args);
                  }
                }
              }; // Support: Promises/A+ section 2.3.3.3.1
              // https://promisesaplus.com/#point-57
              // Re-resolve promises immediately to dodge false rejection from
              // subsequent errors


              if (depth) {
                process();
              } else {
                // Call an optional hook to record the stack, in case of exception
                // since it's otherwise lost when execution goes async
                if (jQuery.Deferred.getStackHook) {
                  process.stackTrace = jQuery.Deferred.getStackHook();
                }

                window.setTimeout(process);
              }
            };
          }

          return jQuery.Deferred(function (newDefer) {
            // progress_handlers.add( ... )
            tuples[0][3].add(resolve(0, newDefer, isFunction(onProgress) ? onProgress : Identity, newDefer.notifyWith)); // fulfilled_handlers.add( ... )

            tuples[1][3].add(resolve(0, newDefer, isFunction(onFulfilled) ? onFulfilled : Identity)); // rejected_handlers.add( ... )

            tuples[2][3].add(resolve(0, newDefer, isFunction(onRejected) ? onRejected : Thrower));
          }).promise();
        },
        // Get a promise for this deferred
        // If obj is provided, the promise aspect is added to the object
        promise: function promise(obj) {
          return obj != null ? jQuery.extend(obj, _promise) : _promise;
        }
      },
          deferred = {}; // Add list-specific methods

      jQuery.each(tuples, function (i, tuple) {
        var list = tuple[2],
            stateString = tuple[5]; // promise.progress = list.add
        // promise.done = list.add
        // promise.fail = list.add

        _promise[tuple[1]] = list.add; // Handle state

        if (stateString) {
          list.add(function () {
            // state = "resolved" (i.e., fulfilled)
            // state = "rejected"
            _state = stateString;
          }, // rejected_callbacks.disable
          // fulfilled_callbacks.disable
          tuples[3 - i][2].disable, // rejected_handlers.disable
          // fulfilled_handlers.disable
          tuples[3 - i][3].disable, // progress_callbacks.lock
          tuples[0][2].lock, // progress_handlers.lock
          tuples[0][3].lock);
        } // progress_handlers.fire
        // fulfilled_handlers.fire
        // rejected_handlers.fire


        list.add(tuple[3].fire); // deferred.notify = function() { deferred.notifyWith(...) }
        // deferred.resolve = function() { deferred.resolveWith(...) }
        // deferred.reject = function() { deferred.rejectWith(...) }

        deferred[tuple[0]] = function () {
          deferred[tuple[0] + "With"](this === deferred ? undefined : this, arguments);
          return this;
        }; // deferred.notifyWith = list.fireWith
        // deferred.resolveWith = list.fireWith
        // deferred.rejectWith = list.fireWith


        deferred[tuple[0] + "With"] = list.fireWith;
      }); // Make the deferred a promise

      _promise.promise(deferred); // Call given func if any


      if (func) {
        func.call(deferred, deferred);
      } // All done!


      return deferred;
    },
    // Deferred helper
    when: function when(singleValue) {
      var // count of uncompleted subordinates
      remaining = arguments.length,
          // count of unprocessed arguments
      i = remaining,
          // subordinate fulfillment data
      resolveContexts = Array(i),
          resolveValues = _slice.call(arguments),
          // the master Deferred
      master = jQuery.Deferred(),
          // subordinate callback factory
      updateFunc = function updateFunc(i) {
        return function (value) {
          resolveContexts[i] = this;
          resolveValues[i] = arguments.length > 1 ? _slice.call(arguments) : value;

          if (! --remaining) {
            master.resolveWith(resolveContexts, resolveValues);
          }
        };
      }; // Single- and empty arguments are adopted like Promise.resolve


      if (remaining <= 1) {
        adoptValue(singleValue, master.done(updateFunc(i)).resolve, master.reject, !remaining); // Use .then() to unwrap secondary thenables (cf. gh-3000)

        if (master.state() === "pending" || isFunction(resolveValues[i] && resolveValues[i].then)) {
          return master.then();
        }
      } // Multiple arguments are aggregated like Promise.all array elements


      while (i--) {
        adoptValue(resolveValues[i], updateFunc(i), master.reject);
      }

      return master.promise();
    }
  }); // These usually indicate a programmer mistake during development,
  // warn about them ASAP rather than swallowing them by default.

  var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

  jQuery.Deferred.exceptionHook = function (error, stack) {
    // Support: IE 8 - 9 only
    // Console exists when dev tools are open, which can happen at any time
    if (window.console && window.console.warn && error && rerrorNames.test(error.name)) {
      window.console.warn("jQuery.Deferred exception: " + error.message, error.stack, stack);
    }
  };

  jQuery.readyException = function (error) {
    window.setTimeout(function () {
      throw error;
    });
  }; // The deferred used on DOM ready


  var readyList = jQuery.Deferred();

  jQuery.fn.ready = function (fn) {
    readyList.then(fn) // Wrap jQuery.readyException in a function so that the lookup
    // happens at the time of error handling instead of callback
    // registration.
    ["catch"](function (error) {
      jQuery.readyException(error);
    });
    return this;
  };

  jQuery.extend({
    // Is the DOM ready to be used? Set to true once it occurs.
    isReady: false,
    // A counter to track how many items to wait for before
    // the ready event fires. See #6781
    readyWait: 1,
    // Handle when the DOM is ready
    ready: function ready(wait) {
      // Abort if there are pending holds or we're already ready
      if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
        return;
      } // Remember that the DOM is ready


      jQuery.isReady = true; // If a normal DOM Ready event fired, decrement, and wait if need be

      if (wait !== true && --jQuery.readyWait > 0) {
        return;
      } // If there are functions bound, to execute


      readyList.resolveWith(document, [jQuery]);
    }
  });
  jQuery.ready.then = readyList.then; // The ready event handler and self cleanup method

  function completed() {
    document.removeEventListener("DOMContentLoaded", completed);
    window.removeEventListener("load", completed);
    jQuery.ready();
  } // Catch cases where $(document).ready() is called
  // after the browser event has already occurred.
  // Support: IE <=9 - 10 only
  // Older IE sometimes signals "interactive" too soon


  if (document.readyState === "complete" || document.readyState !== "loading" && !document.documentElement.doScroll) {
    // Handle it asynchronously to allow scripts the opportunity to delay ready
    window.setTimeout(jQuery.ready);
  } else {
    // Use the handy event callback
    document.addEventListener("DOMContentLoaded", completed); // A fallback to window.onload, that will always work

    window.addEventListener("load", completed);
  } // Multifunctional method to get and set values of a collection
  // The value/s can optionally be executed if it's a function


  var access = function access(elems, fn, key, value, chainable, emptyGet, raw) {
    var i = 0,
        len = elems.length,
        bulk = key == null; // Sets many values

    if (toType(key) === "object") {
      chainable = true;

      for (i in key) {
        access(elems, fn, i, key[i], true, emptyGet, raw);
      } // Sets one value

    } else if (value !== undefined) {
      chainable = true;

      if (!isFunction(value)) {
        raw = true;
      }

      if (bulk) {
        // Bulk operations run against the entire set
        if (raw) {
          fn.call(elems, value);
          fn = null; // ...except when executing function values
        } else {
          bulk = fn;

          fn = function fn(elem, key, value) {
            return bulk.call(jQuery(elem), value);
          };
        }
      }

      if (fn) {
        for (; i < len; i++) {
          fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
        }
      }
    }

    if (chainable) {
      return elems;
    } // Gets


    if (bulk) {
      return fn.call(elems);
    }

    return len ? fn(elems[0], key) : emptyGet;
  }; // Matches dashed string for camelizing


  var rmsPrefix = /^-ms-/,
      rdashAlpha = /-([a-z])/g; // Used by camelCase as callback to replace()

  function fcamelCase(all, letter) {
    return letter.toUpperCase();
  } // Convert dashed to camelCase; used by the css and data modules
  // Support: IE <=9 - 11, Edge 12 - 15
  // Microsoft forgot to hump their vendor prefix (#9572)


  function camelCase(string) {
    return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
  }

  var acceptData = function acceptData(owner) {
    // Accepts only:
    //  - Node
    //    - Node.ELEMENT_NODE
    //    - Node.DOCUMENT_NODE
    //  - Object
    //    - Any
    return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;
  };

  function Data() {
    this.expando = jQuery.expando + Data.uid++;
  }

  Data.uid = 1;
  Data.prototype = {
    cache: function cache(owner) {
      // Check if the owner object already has a cache
      var value = owner[this.expando]; // If not, create one

      if (!value) {
        value = {}; // We can accept data for non-element nodes in modern browsers,
        // but we should not, see #8335.
        // Always return an empty object.

        if (acceptData(owner)) {
          // If it is a node unlikely to be stringify-ed or looped over
          // use plain assignment
          if (owner.nodeType) {
            owner[this.expando] = value; // Otherwise secure it in a non-enumerable property
            // configurable must be true to allow the property to be
            // deleted when data is removed
          } else {
            Object.defineProperty(owner, this.expando, {
              value: value,
              configurable: true
            });
          }
        }
      }

      return value;
    },
    set: function set(owner, data, value) {
      var prop,
          cache = this.cache(owner); // Handle: [ owner, key, value ] args
      // Always use camelCase key (gh-2257)

      if (typeof data === "string") {
        cache[camelCase(data)] = value; // Handle: [ owner, { properties } ] args
      } else {
        // Copy the properties one-by-one to the cache object
        for (prop in data) {
          cache[camelCase(prop)] = data[prop];
        }
      }

      return cache;
    },
    get: function get(owner, key) {
      return key === undefined ? this.cache(owner) : // Always use camelCase key (gh-2257)
      owner[this.expando] && owner[this.expando][camelCase(key)];
    },
    access: function access(owner, key, value) {
      // In cases where either:
      //
      //   1. No key was specified
      //   2. A string key was specified, but no value provided
      //
      // Take the "read" path and allow the get method to determine
      // which value to return, respectively either:
      //
      //   1. The entire cache object
      //   2. The data stored at the key
      //
      if (key === undefined || key && typeof key === "string" && value === undefined) {
        return this.get(owner, key);
      } // When the key is not a string, or both a key and value
      // are specified, set or extend (existing objects) with either:
      //
      //   1. An object of properties
      //   2. A key and value
      //


      this.set(owner, key, value); // Since the "set" path can have two possible entry points
      // return the expected data based on which path was taken[*]

      return value !== undefined ? value : key;
    },
    remove: function remove(owner, key) {
      var i,
          cache = owner[this.expando];

      if (cache === undefined) {
        return;
      }

      if (key !== undefined) {
        // Support array or space separated string of keys
        if (Array.isArray(key)) {
          // If key is an array of keys...
          // We always set camelCase keys, so remove that.
          key = key.map(camelCase);
        } else {
          key = camelCase(key); // If a key with the spaces exists, use it.
          // Otherwise, create an array by matching non-whitespace

          key = key in cache ? [key] : key.match(rnothtmlwhite) || [];
        }

        i = key.length;

        while (i--) {
          delete cache[key[i]];
        }
      } // Remove the expando if there's no more data


      if (key === undefined || jQuery.isEmptyObject(cache)) {
        // Support: Chrome <=35 - 45
        // Webkit & Blink performance suffers when deleting properties
        // from DOM nodes, so set to undefined instead
        // https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
        if (owner.nodeType) {
          owner[this.expando] = undefined;
        } else {
          delete owner[this.expando];
        }
      }
    },
    hasData: function hasData(owner) {
      var cache = owner[this.expando];
      return cache !== undefined && !jQuery.isEmptyObject(cache);
    }
  };
  var dataPriv = new Data();
  var dataUser = new Data(); //	Implementation Summary
  //
  //	1. Enforce API surface and semantic compatibility with 1.9.x branch
  //	2. Improve the module's maintainability by reducing the storage
  //		paths to a single mechanism.
  //	3. Use the same single mechanism to support "private" and "user" data.
  //	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
  //	5. Avoid exposing implementation details on user objects (eg. expando properties)
  //	6. Provide a clear path for implementation upgrade to WeakMap in 2014

  var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
      rmultiDash = /[A-Z]/g;

  function getData(data) {
    if (data === "true") {
      return true;
    }

    if (data === "false") {
      return false;
    }

    if (data === "null") {
      return null;
    } // Only convert to a number if it doesn't change the string


    if (data === +data + "") {
      return +data;
    }

    if (rbrace.test(data)) {
      return JSON.parse(data);
    }

    return data;
  }

  function dataAttr(elem, key, data) {
    var name; // If nothing was found internally, try to fetch any
    // data from the HTML5 data-* attribute

    if (data === undefined && elem.nodeType === 1) {
      name = "data-" + key.replace(rmultiDash, "-$&").toLowerCase();
      data = elem.getAttribute(name);

      if (typeof data === "string") {
        try {
          data = getData(data);
        } catch (e) {} // Make sure we set the data so it isn't changed later


        dataUser.set(elem, key, data);
      } else {
        data = undefined;
      }
    }

    return data;
  }

  jQuery.extend({
    hasData: function hasData(elem) {
      return dataUser.hasData(elem) || dataPriv.hasData(elem);
    },
    data: function data(elem, name, _data) {
      return dataUser.access(elem, name, _data);
    },
    removeData: function removeData(elem, name) {
      dataUser.remove(elem, name);
    },
    // TODO: Now that all calls to _data and _removeData have been replaced
    // with direct calls to dataPriv methods, these can be deprecated.
    _data: function _data(elem, name, data) {
      return dataPriv.access(elem, name, data);
    },
    _removeData: function _removeData(elem, name) {
      dataPriv.remove(elem, name);
    }
  });
  jQuery.fn.extend({
    data: function data(key, value) {
      var i,
          name,
          data,
          elem = this[0],
          attrs = elem && elem.attributes; // Gets all values

      if (key === undefined) {
        if (this.length) {
          data = dataUser.get(elem);

          if (elem.nodeType === 1 && !dataPriv.get(elem, "hasDataAttrs")) {
            i = attrs.length;

            while (i--) {
              // Support: IE 11 only
              // The attrs elements can be null (#14894)
              if (attrs[i]) {
                name = attrs[i].name;

                if (name.indexOf("data-") === 0) {
                  name = camelCase(name.slice(5));
                  dataAttr(elem, name, data[name]);
                }
              }
            }

            dataPriv.set(elem, "hasDataAttrs", true);
          }
        }

        return data;
      } // Sets multiple values


      if (_typeof(key) === "object") {
        return this.each(function () {
          dataUser.set(this, key);
        });
      }

      return access(this, function (value) {
        var data; // The calling jQuery object (element matches) is not empty
        // (and therefore has an element appears at this[ 0 ]) and the
        // `value` parameter was not undefined. An empty jQuery object
        // will result in `undefined` for elem = this[ 0 ] which will
        // throw an exception if an attempt to read a data cache is made.

        if (elem && value === undefined) {
          // Attempt to get data from the cache
          // The key will always be camelCased in Data
          data = dataUser.get(elem, key);

          if (data !== undefined) {
            return data;
          } // Attempt to "discover" the data in
          // HTML5 custom data-* attrs


          data = dataAttr(elem, key);

          if (data !== undefined) {
            return data;
          } // We tried really hard, but the data doesn't exist.


          return;
        } // Set the data...


        this.each(function () {
          // We always store the camelCased key
          dataUser.set(this, key, value);
        });
      }, null, value, arguments.length > 1, null, true);
    },
    removeData: function removeData(key) {
      return this.each(function () {
        dataUser.remove(this, key);
      });
    }
  });
  jQuery.extend({
    queue: function queue(elem, type, data) {
      var queue;

      if (elem) {
        type = (type || "fx") + "queue";
        queue = dataPriv.get(elem, type); // Speed up dequeue by getting out quickly if this is just a lookup

        if (data) {
          if (!queue || Array.isArray(data)) {
            queue = dataPriv.access(elem, type, jQuery.makeArray(data));
          } else {
            queue.push(data);
          }
        }

        return queue || [];
      }
    },
    dequeue: function dequeue(elem, type) {
      type = type || "fx";

      var queue = jQuery.queue(elem, type),
          startLength = queue.length,
          fn = queue.shift(),
          hooks = jQuery._queueHooks(elem, type),
          next = function next() {
        jQuery.dequeue(elem, type);
      }; // If the fx queue is dequeued, always remove the progress sentinel


      if (fn === "inprogress") {
        fn = queue.shift();
        startLength--;
      }

      if (fn) {
        // Add a progress sentinel to prevent the fx queue from being
        // automatically dequeued
        if (type === "fx") {
          queue.unshift("inprogress");
        } // Clear up the last queue stop function


        delete hooks.stop;
        fn.call(elem, next, hooks);
      }

      if (!startLength && hooks) {
        hooks.empty.fire();
      }
    },
    // Not public - generate a queueHooks object, or return the current one
    _queueHooks: function _queueHooks(elem, type) {
      var key = type + "queueHooks";
      return dataPriv.get(elem, key) || dataPriv.access(elem, key, {
        empty: jQuery.Callbacks("once memory").add(function () {
          dataPriv.remove(elem, [type + "queue", key]);
        })
      });
    }
  });
  jQuery.fn.extend({
    queue: function queue(type, data) {
      var setter = 2;

      if (typeof type !== "string") {
        data = type;
        type = "fx";
        setter--;
      }

      if (arguments.length < setter) {
        return jQuery.queue(this[0], type);
      }

      return data === undefined ? this : this.each(function () {
        var queue = jQuery.queue(this, type, data); // Ensure a hooks for this queue

        jQuery._queueHooks(this, type);

        if (type === "fx" && queue[0] !== "inprogress") {
          jQuery.dequeue(this, type);
        }
      });
    },
    dequeue: function dequeue(type) {
      return this.each(function () {
        jQuery.dequeue(this, type);
      });
    },
    clearQueue: function clearQueue(type) {
      return this.queue(type || "fx", []);
    },
    // Get a promise resolved when queues of a certain type
    // are emptied (fx is the type by default)
    promise: function promise(type, obj) {
      var tmp,
          count = 1,
          defer = jQuery.Deferred(),
          elements = this,
          i = this.length,
          resolve = function resolve() {
        if (! --count) {
          defer.resolveWith(elements, [elements]);
        }
      };

      if (typeof type !== "string") {
        obj = type;
        type = undefined;
      }

      type = type || "fx";

      while (i--) {
        tmp = dataPriv.get(elements[i], type + "queueHooks");

        if (tmp && tmp.empty) {
          count++;
          tmp.empty.add(resolve);
        }
      }

      resolve();
      return defer.promise(obj);
    }
  });
  var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
  var rcssNum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i");
  var cssExpand = ["Top", "Right", "Bottom", "Left"];
  var documentElement = document.documentElement;

  var isAttached = function isAttached(elem) {
    return jQuery.contains(elem.ownerDocument, elem);
  },
      composed = {
    composed: true
  }; // Check attachment across shadow DOM boundaries when possible (gh-3504)


  if (documentElement.attachShadow) {
    isAttached = function isAttached(elem) {
      return jQuery.contains(elem.ownerDocument, elem) || elem.getRootNode(composed) === elem.ownerDocument;
    };
  }

  var isHiddenWithinTree = function isHiddenWithinTree(elem, el) {
    // isHiddenWithinTree might be called from jQuery#filter function;
    // in that case, element will be second argument
    elem = el || elem; // Inline style trumps all

    return elem.style.display === "none" || elem.style.display === "" && // Otherwise, check computed style
    // Support: Firefox <=43 - 45
    // Disconnected elements can have computed display: none, so first confirm that elem is
    // in the document.
    isAttached(elem) && jQuery.css(elem, "display") === "none";
  };

  var swap = function swap(elem, options, callback, args) {
    var ret,
        name,
        old = {}; // Remember the old values, and insert the new ones

    for (name in options) {
      old[name] = elem.style[name];
      elem.style[name] = options[name];
    }

    ret = callback.apply(elem, args || []); // Revert the old values

    for (name in options) {
      elem.style[name] = old[name];
    }

    return ret;
  };

  function adjustCSS(elem, prop, valueParts, tween) {
    var adjusted,
        scale,
        maxIterations = 20,
        currentValue = tween ? function () {
      return tween.cur();
    } : function () {
      return jQuery.css(elem, prop, "");
    },
        initial = currentValue(),
        unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? "" : "px"),
        // Starting value computation is required for potential unit mismatches
    initialInUnit = elem.nodeType && (jQuery.cssNumber[prop] || unit !== "px" && +initial) && rcssNum.exec(jQuery.css(elem, prop));

    if (initialInUnit && initialInUnit[3] !== unit) {
      // Support: Firefox <=54
      // Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
      initial = initial / 2; // Trust units reported by jQuery.css

      unit = unit || initialInUnit[3]; // Iteratively approximate from a nonzero starting point

      initialInUnit = +initial || 1;

      while (maxIterations--) {
        // Evaluate and update our best guess (doubling guesses that zero out).
        // Finish if the scale equals or crosses 1 (making the old*new product non-positive).
        jQuery.style(elem, prop, initialInUnit + unit);

        if ((1 - scale) * (1 - (scale = currentValue() / initial || 0.5)) <= 0) {
          maxIterations = 0;
        }

        initialInUnit = initialInUnit / scale;
      }

      initialInUnit = initialInUnit * 2;
      jQuery.style(elem, prop, initialInUnit + unit); // Make sure we update the tween properties later on

      valueParts = valueParts || [];
    }

    if (valueParts) {
      initialInUnit = +initialInUnit || +initial || 0; // Apply relative offset (+=/-=) if specified

      adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];

      if (tween) {
        tween.unit = unit;
        tween.start = initialInUnit;
        tween.end = adjusted;
      }
    }

    return adjusted;
  }

  var defaultDisplayMap = {};

  function getDefaultDisplay(elem) {
    var temp,
        doc = elem.ownerDocument,
        nodeName = elem.nodeName,
        display = defaultDisplayMap[nodeName];

    if (display) {
      return display;
    }

    temp = doc.body.appendChild(doc.createElement(nodeName));
    display = jQuery.css(temp, "display");
    temp.parentNode.removeChild(temp);

    if (display === "none") {
      display = "block";
    }

    defaultDisplayMap[nodeName] = display;
    return display;
  }

  function showHide(elements, show) {
    var display,
        elem,
        values = [],
        index = 0,
        length = elements.length; // Determine new display value for elements that need to change

    for (; index < length; index++) {
      elem = elements[index];

      if (!elem.style) {
        continue;
      }

      display = elem.style.display;

      if (show) {
        // Since we force visibility upon cascade-hidden elements, an immediate (and slow)
        // check is required in this first loop unless we have a nonempty display value (either
        // inline or about-to-be-restored)
        if (display === "none") {
          values[index] = dataPriv.get(elem, "display") || null;

          if (!values[index]) {
            elem.style.display = "";
          }
        }

        if (elem.style.display === "" && isHiddenWithinTree(elem)) {
          values[index] = getDefaultDisplay(elem);
        }
      } else {
        if (display !== "none") {
          values[index] = "none"; // Remember what we're overwriting

          dataPriv.set(elem, "display", display);
        }
      }
    } // Set the display of the elements in a second loop to avoid constant reflow


    for (index = 0; index < length; index++) {
      if (values[index] != null) {
        elements[index].style.display = values[index];
      }
    }

    return elements;
  }

  jQuery.fn.extend({
    show: function show() {
      return showHide(this, true);
    },
    hide: function hide() {
      return showHide(this);
    },
    toggle: function toggle(state) {
      if (typeof state === "boolean") {
        return state ? this.show() : this.hide();
      }

      return this.each(function () {
        if (isHiddenWithinTree(this)) {
          jQuery(this).show();
        } else {
          jQuery(this).hide();
        }
      });
    }
  });
  var rcheckableType = /^(?:checkbox|radio)$/i;
  var rtagName = /<([a-z][^\/\0>\x20\t\r\n\f]*)/i;
  var rscriptType = /^$|^module$|\/(?:java|ecma)script/i; // We have to close these tags to support XHTML (#13200)

  var wrapMap = {
    // Support: IE <=9 only
    option: [1, "<select multiple='multiple'>", "</select>"],
    // XHTML parsers do not magically insert elements in the
    // same way that tag soup parsers do. So we cannot shorten
    // this by omitting <tbody> or other required elements.
    thead: [1, "<table>", "</table>"],
    col: [2, "<table><colgroup>", "</colgroup></table>"],
    tr: [2, "<table><tbody>", "</tbody></table>"],
    td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
    _default: [0, "", ""]
  }; // Support: IE <=9 only

  wrapMap.optgroup = wrapMap.option;
  wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
  wrapMap.th = wrapMap.td;

  function getAll(context, tag) {
    // Support: IE <=9 - 11 only
    // Use typeof to avoid zero-argument method invocation on host objects (#15151)
    var ret;

    if (typeof context.getElementsByTagName !== "undefined") {
      ret = context.getElementsByTagName(tag || "*");
    } else if (typeof context.querySelectorAll !== "undefined") {
      ret = context.querySelectorAll(tag || "*");
    } else {
      ret = [];
    }

    if (tag === undefined || tag && nodeName(context, tag)) {
      return jQuery.merge([context], ret);
    }

    return ret;
  } // Mark scripts as having already been evaluated


  function setGlobalEval(elems, refElements) {
    var i = 0,
        l = elems.length;

    for (; i < l; i++) {
      dataPriv.set(elems[i], "globalEval", !refElements || dataPriv.get(refElements[i], "globalEval"));
    }
  }

  var rhtml = /<|&#?\w+;/;

  function buildFragment(elems, context, scripts, selection, ignored) {
    var elem,
        tmp,
        tag,
        wrap,
        attached,
        j,
        fragment = context.createDocumentFragment(),
        nodes = [],
        i = 0,
        l = elems.length;

    for (; i < l; i++) {
      elem = elems[i];

      if (elem || elem === 0) {
        // Add nodes directly
        if (toType(elem) === "object") {
          // Support: Android <=4.0 only, PhantomJS 1 only
          // push.apply(_, arraylike) throws on ancient WebKit
          jQuery.merge(nodes, elem.nodeType ? [elem] : elem); // Convert non-html into a text node
        } else if (!rhtml.test(elem)) {
          nodes.push(context.createTextNode(elem)); // Convert html into DOM nodes
        } else {
          tmp = tmp || fragment.appendChild(context.createElement("div")); // Deserialize a standard representation

          tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
          wrap = wrapMap[tag] || wrapMap._default;
          tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2]; // Descend through wrappers to the right content

          j = wrap[0];

          while (j--) {
            tmp = tmp.lastChild;
          } // Support: Android <=4.0 only, PhantomJS 1 only
          // push.apply(_, arraylike) throws on ancient WebKit


          jQuery.merge(nodes, tmp.childNodes); // Remember the top-level container

          tmp = fragment.firstChild; // Ensure the created nodes are orphaned (#12392)

          tmp.textContent = "";
        }
      }
    } // Remove wrapper from fragment


    fragment.textContent = "";
    i = 0;

    while (elem = nodes[i++]) {
      // Skip elements already in the context collection (trac-4087)
      if (selection && jQuery.inArray(elem, selection) > -1) {
        if (ignored) {
          ignored.push(elem);
        }

        continue;
      }

      attached = isAttached(elem); // Append to fragment

      tmp = getAll(fragment.appendChild(elem), "script"); // Preserve script evaluation history

      if (attached) {
        setGlobalEval(tmp);
      } // Capture executables


      if (scripts) {
        j = 0;

        while (elem = tmp[j++]) {
          if (rscriptType.test(elem.type || "")) {
            scripts.push(elem);
          }
        }
      }
    }

    return fragment;
  }

  (function () {
    var fragment = document.createDocumentFragment(),
        div = fragment.appendChild(document.createElement("div")),
        input = document.createElement("input"); // Support: Android 4.0 - 4.3 only
    // Check state lost if the name is set (#11217)
    // Support: Windows Web Apps (WWA)
    // `name` and `type` must use .setAttribute for WWA (#14901)

    input.setAttribute("type", "radio");
    input.setAttribute("checked", "checked");
    input.setAttribute("name", "t");
    div.appendChild(input); // Support: Android <=4.1 only
    // Older WebKit doesn't clone checked state correctly in fragments

    support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked; // Support: IE <=11 only
    // Make sure textarea (and checkbox) defaultValue is properly cloned

    div.innerHTML = "<textarea>x</textarea>";
    support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;
  })();

  var rkeyEvent = /^key/,
      rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
      rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

  function returnTrue() {
    return true;
  }

  function returnFalse() {
    return false;
  } // Support: IE <=9 - 11+
  // focus() and blur() are asynchronous, except when they are no-op.
  // So expect focus to be synchronous when the element is already active,
  // and blur to be synchronous when the element is not already active.
  // (focus and blur are always synchronous in other supported browsers,
  // this just defines when we can count on it).


  function expectSync(elem, type) {
    return elem === safeActiveElement() === (type === "focus");
  } // Support: IE <=9 only
  // Accessing document.activeElement can throw unexpectedly
  // https://bugs.jquery.com/ticket/13393


  function safeActiveElement() {
    try {
      return document.activeElement;
    } catch (err) {}
  }

  function _on(elem, types, selector, data, fn, one) {
    var origFn, type; // Types can be a map of types/handlers

    if (_typeof(types) === "object") {
      // ( types-Object, selector, data )
      if (typeof selector !== "string") {
        // ( types-Object, data )
        data = data || selector;
        selector = undefined;
      }

      for (type in types) {
        _on(elem, type, selector, data, types[type], one);
      }

      return elem;
    }

    if (data == null && fn == null) {
      // ( types, fn )
      fn = selector;
      data = selector = undefined;
    } else if (fn == null) {
      if (typeof selector === "string") {
        // ( types, selector, fn )
        fn = data;
        data = undefined;
      } else {
        // ( types, data, fn )
        fn = data;
        data = selector;
        selector = undefined;
      }
    }

    if (fn === false) {
      fn = returnFalse;
    } else if (!fn) {
      return elem;
    }

    if (one === 1) {
      origFn = fn;

      fn = function fn(event) {
        // Can use an empty set, since event contains the info
        jQuery().off(event);
        return origFn.apply(this, arguments);
      }; // Use same guid so caller can remove using origFn


      fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
    }

    return elem.each(function () {
      jQuery.event.add(this, types, fn, data, selector);
    });
  }
  /*
   * Helper functions for managing events -- not part of the public interface.
   * Props to Dean Edwards' addEvent library for many of the ideas.
   */


  jQuery.event = {
    global: {},
    add: function add(elem, types, handler, data, selector) {
      var handleObjIn,
          eventHandle,
          tmp,
          events,
          t,
          handleObj,
          special,
          handlers,
          type,
          namespaces,
          origType,
          elemData = dataPriv.get(elem); // Don't attach events to noData or text/comment nodes (but allow plain objects)

      if (!elemData) {
        return;
      } // Caller can pass in an object of custom data in lieu of the handler


      if (handler.handler) {
        handleObjIn = handler;
        handler = handleObjIn.handler;
        selector = handleObjIn.selector;
      } // Ensure that invalid selectors throw exceptions at attach time
      // Evaluate against documentElement in case elem is a non-element node (e.g., document)


      if (selector) {
        jQuery.find.matchesSelector(documentElement, selector);
      } // Make sure that the handler has a unique ID, used to find/remove it later


      if (!handler.guid) {
        handler.guid = jQuery.guid++;
      } // Init the element's event structure and main handler, if this is the first


      if (!(events = elemData.events)) {
        events = elemData.events = {};
      }

      if (!(eventHandle = elemData.handle)) {
        eventHandle = elemData.handle = function (e) {
          // Discard the second event of a jQuery.event.trigger() and
          // when an event is called after a page has unloaded
          return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined;
        };
      } // Handle multiple events separated by a space


      types = (types || "").match(rnothtmlwhite) || [""];
      t = types.length;

      while (t--) {
        tmp = rtypenamespace.exec(types[t]) || [];
        type = origType = tmp[1];
        namespaces = (tmp[2] || "").split(".").sort(); // There *must* be a type, no attaching namespace-only handlers

        if (!type) {
          continue;
        } // If event changes its type, use the special event handlers for the changed type


        special = jQuery.event.special[type] || {}; // If selector defined, determine special event api type, otherwise given type

        type = (selector ? special.delegateType : special.bindType) || type; // Update special based on newly reset type

        special = jQuery.event.special[type] || {}; // handleObj is passed to all event handlers

        handleObj = jQuery.extend({
          type: type,
          origType: origType,
          data: data,
          handler: handler,
          guid: handler.guid,
          selector: selector,
          needsContext: selector && jQuery.expr.match.needsContext.test(selector),
          namespace: namespaces.join(".")
        }, handleObjIn); // Init the event handler queue if we're the first

        if (!(handlers = events[type])) {
          handlers = events[type] = [];
          handlers.delegateCount = 0; // Only use addEventListener if the special events handler returns false

          if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
            if (elem.addEventListener) {
              elem.addEventListener(type, eventHandle);
            }
          }
        }

        if (special.add) {
          special.add.call(elem, handleObj);

          if (!handleObj.handler.guid) {
            handleObj.handler.guid = handler.guid;
          }
        } // Add to the element's handler list, delegates in front


        if (selector) {
          handlers.splice(handlers.delegateCount++, 0, handleObj);
        } else {
          handlers.push(handleObj);
        } // Keep track of which events have ever been used, for event optimization


        jQuery.event.global[type] = true;
      }
    },
    // Detach an event or set of events from an element
    remove: function remove(elem, types, handler, selector, mappedTypes) {
      var j,
          origCount,
          tmp,
          events,
          t,
          handleObj,
          special,
          handlers,
          type,
          namespaces,
          origType,
          elemData = dataPriv.hasData(elem) && dataPriv.get(elem);

      if (!elemData || !(events = elemData.events)) {
        return;
      } // Once for each type.namespace in types; type may be omitted


      types = (types || "").match(rnothtmlwhite) || [""];
      t = types.length;

      while (t--) {
        tmp = rtypenamespace.exec(types[t]) || [];
        type = origType = tmp[1];
        namespaces = (tmp[2] || "").split(".").sort(); // Unbind all events (on this namespace, if provided) for the element

        if (!type) {
          for (type in events) {
            jQuery.event.remove(elem, type + types[t], handler, selector, true);
          }

          continue;
        }

        special = jQuery.event.special[type] || {};
        type = (selector ? special.delegateType : special.bindType) || type;
        handlers = events[type] || [];
        tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)"); // Remove matching events

        origCount = j = handlers.length;

        while (j--) {
          handleObj = handlers[j];

          if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
            handlers.splice(j, 1);

            if (handleObj.selector) {
              handlers.delegateCount--;
            }

            if (special.remove) {
              special.remove.call(elem, handleObj);
            }
          }
        } // Remove generic event handler if we removed something and no more handlers exist
        // (avoids potential for endless recursion during removal of special event handlers)


        if (origCount && !handlers.length) {
          if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
            jQuery.removeEvent(elem, type, elemData.handle);
          }

          delete events[type];
        }
      } // Remove data and the expando if it's no longer used


      if (jQuery.isEmptyObject(events)) {
        dataPriv.remove(elem, "handle events");
      }
    },
    dispatch: function dispatch(nativeEvent) {
      // Make a writable jQuery.Event from the native event object
      var event = jQuery.event.fix(nativeEvent);
      var i,
          j,
          ret,
          matched,
          handleObj,
          handlerQueue,
          args = new Array(arguments.length),
          handlers = (dataPriv.get(this, "events") || {})[event.type] || [],
          special = jQuery.event.special[event.type] || {}; // Use the fix-ed jQuery.Event rather than the (read-only) native event

      args[0] = event;

      for (i = 1; i < arguments.length; i++) {
        args[i] = arguments[i];
      }

      event.delegateTarget = this; // Call the preDispatch hook for the mapped type, and let it bail if desired

      if (special.preDispatch && special.preDispatch.call(this, event) === false) {
        return;
      } // Determine handlers


      handlerQueue = jQuery.event.handlers.call(this, event, handlers); // Run delegates first; they may want to stop propagation beneath us

      i = 0;

      while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
        event.currentTarget = matched.elem;
        j = 0;

        while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {
          // If the event is namespaced, then each handler is only invoked if it is
          // specially universal or its namespaces are a superset of the event's.
          if (!event.rnamespace || handleObj.namespace === false || event.rnamespace.test(handleObj.namespace)) {
            event.handleObj = handleObj;
            event.data = handleObj.data;
            ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);

            if (ret !== undefined) {
              if ((event.result = ret) === false) {
                event.preventDefault();
                event.stopPropagation();
              }
            }
          }
        }
      } // Call the postDispatch hook for the mapped type


      if (special.postDispatch) {
        special.postDispatch.call(this, event);
      }

      return event.result;
    },
    handlers: function handlers(event, _handlers) {
      var i,
          handleObj,
          sel,
          matchedHandlers,
          matchedSelectors,
          handlerQueue = [],
          delegateCount = _handlers.delegateCount,
          cur = event.target; // Find delegate handlers

      if (delegateCount && // Support: IE <=9
      // Black-hole SVG <use> instance trees (trac-13180)
      cur.nodeType && // Support: Firefox <=42
      // Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
      // https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
      // Support: IE 11 only
      // ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
      !(event.type === "click" && event.button >= 1)) {
        for (; cur !== this; cur = cur.parentNode || this) {
          // Don't check non-elements (#13208)
          // Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
          if (cur.nodeType === 1 && !(event.type === "click" && cur.disabled === true)) {
            matchedHandlers = [];
            matchedSelectors = {};

            for (i = 0; i < delegateCount; i++) {
              handleObj = _handlers[i]; // Don't conflict with Object.prototype properties (#13203)

              sel = handleObj.selector + " ";

              if (matchedSelectors[sel] === undefined) {
                matchedSelectors[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) > -1 : jQuery.find(sel, this, null, [cur]).length;
              }

              if (matchedSelectors[sel]) {
                matchedHandlers.push(handleObj);
              }
            }

            if (matchedHandlers.length) {
              handlerQueue.push({
                elem: cur,
                handlers: matchedHandlers
              });
            }
          }
        }
      } // Add the remaining (directly-bound) handlers


      cur = this;

      if (delegateCount < _handlers.length) {
        handlerQueue.push({
          elem: cur,
          handlers: _handlers.slice(delegateCount)
        });
      }

      return handlerQueue;
    },
    addProp: function addProp(name, hook) {
      Object.defineProperty(jQuery.Event.prototype, name, {
        enumerable: true,
        configurable: true,
        get: isFunction(hook) ? function () {
          if (this.originalEvent) {
            return hook(this.originalEvent);
          }
        } : function () {
          if (this.originalEvent) {
            return this.originalEvent[name];
          }
        },
        set: function set(value) {
          Object.defineProperty(this, name, {
            enumerable: true,
            configurable: true,
            writable: true,
            value: value
          });
        }
      });
    },
    fix: function fix(originalEvent) {
      return originalEvent[jQuery.expando] ? originalEvent : new jQuery.Event(originalEvent);
    },
    special: {
      load: {
        // Prevent triggered image.load events from bubbling to window.load
        noBubble: true
      },
      click: {
        // Utilize native event to ensure correct state for checkable inputs
        setup: function setup(data) {
          // For mutual compressibility with _default, replace `this` access with a local var.
          // `|| data` is dead code meant only to preserve the variable through minification.
          var el = this || data; // Claim the first handler

          if (rcheckableType.test(el.type) && el.click && nodeName(el, "input") && dataPriv.get(el, "click") === undefined) {
            // dataPriv.set( el, "click", ... )
            leverageNative(el, "click", returnTrue);
          } // Return false to allow normal processing in the caller


          return false;
        },
        trigger: function trigger(data) {
          // For mutual compressibility with _default, replace `this` access with a local var.
          // `|| data` is dead code meant only to preserve the variable through minification.
          var el = this || data; // Force setup before triggering a click

          if (rcheckableType.test(el.type) && el.click && nodeName(el, "input") && dataPriv.get(el, "click") === undefined) {
            leverageNative(el, "click");
          } // Return non-false to allow normal event-path propagation


          return true;
        },
        // For cross-browser consistency, suppress native .click() on links
        // Also prevent it if we're currently inside a leveraged native-event stack
        _default: function _default(event) {
          var target = event.target;
          return rcheckableType.test(target.type) && target.click && nodeName(target, "input") && dataPriv.get(target, "click") || nodeName(target, "a");
        }
      },
      beforeunload: {
        postDispatch: function postDispatch(event) {
          // Support: Firefox 20+
          // Firefox doesn't alert if the returnValue field is not set.
          if (event.result !== undefined && event.originalEvent) {
            event.originalEvent.returnValue = event.result;
          }
        }
      }
    }
  }; // Ensure the presence of an event listener that handles manually-triggered
  // synthetic events by interrupting progress until reinvoked in response to
  // *native* events that it fires directly, ensuring that state changes have
  // already occurred before other listeners are invoked.

  function leverageNative(el, type, expectSync) {
    // Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add
    if (!expectSync) {
      jQuery.event.add(el, type, returnTrue);
      return;
    } // Register the controller as a special universal handler for all event namespaces


    dataPriv.set(el, type, false);
    jQuery.event.add(el, type, {
      namespace: false,
      handler: function handler(event) {
        var notAsync,
            result,
            saved = dataPriv.get(this, type);

        if (event.isTrigger & 1 && this[type]) {
          // Interrupt processing of the outer synthetic .trigger()ed event
          if (!saved) {
            // Store arguments for use when handling the inner native event
            saved = _slice.call(arguments);
            dataPriv.set(this, type, saved); // Trigger the native event and capture its result
            // Support: IE <=9 - 11+
            // focus() and blur() are asynchronous

            notAsync = expectSync(this, type);
            this[type]();
            result = dataPriv.get(this, type);

            if (saved !== result || notAsync) {
              dataPriv.set(this, type, false);
            } else {
              result = undefined;
            }

            if (saved !== result) {
              // Cancel the outer synthetic event
              event.stopImmediatePropagation();
              event.preventDefault();
              return result;
            } // If this is an inner synthetic event for an event with a bubbling surrogate
            // (focus or blur), assume that the surrogate already propagated from triggering the
            // native event and prevent that from happening again here.
            // This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
            // bubbling surrogate propagates *after* the non-bubbling base), but that seems
            // less bad than duplication.

          } else if ((jQuery.event.special[type] || {}).delegateType) {
            event.stopPropagation();
          } // If this is a native event triggered above, everything is now in order
          // Fire an inner synthetic event with the original arguments

        } else if (saved) {
          // ...and capture the result
          dataPriv.set(this, type, jQuery.event.trigger( // Support: IE <=9 - 11+
          // Extend with the prototype to reset the above stopImmediatePropagation()
          jQuery.extend(saved.shift(), jQuery.Event.prototype), saved, this)); // Abort handling of the native event

          event.stopImmediatePropagation();
        }
      }
    });
  }

  jQuery.removeEvent = function (elem, type, handle) {
    // This "if" is needed for plain objects
    if (elem.removeEventListener) {
      elem.removeEventListener(type, handle);
    }
  };

  jQuery.Event = function (src, props) {
    // Allow instantiation without the 'new' keyword
    if (!(this instanceof jQuery.Event)) {
      return new jQuery.Event(src, props);
    } // Event object


    if (src && src.type) {
      this.originalEvent = src;
      this.type = src.type; // Events bubbling up the document may have been marked as prevented
      // by a handler lower down the tree; reflect the correct value.

      this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined && // Support: Android <=2.3 only
      src.returnValue === false ? returnTrue : returnFalse; // Create target properties
      // Support: Safari <=6 - 7 only
      // Target should not be a text node (#504, #13143)

      this.target = src.target && src.target.nodeType === 3 ? src.target.parentNode : src.target;
      this.currentTarget = src.currentTarget;
      this.relatedTarget = src.relatedTarget; // Event type
    } else {
      this.type = src;
    } // Put explicitly provided properties onto the event object


    if (props) {
      jQuery.extend(this, props);
    } // Create a timestamp if incoming event doesn't have one


    this.timeStamp = src && src.timeStamp || Date.now(); // Mark it as fixed

    this[jQuery.expando] = true;
  }; // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
  // https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html


  jQuery.Event.prototype = {
    constructor: jQuery.Event,
    isDefaultPrevented: returnFalse,
    isPropagationStopped: returnFalse,
    isImmediatePropagationStopped: returnFalse,
    isSimulated: false,
    preventDefault: function preventDefault() {
      var e = this.originalEvent;
      this.isDefaultPrevented = returnTrue;

      if (e && !this.isSimulated) {
        e.preventDefault();
      }
    },
    stopPropagation: function stopPropagation() {
      var e = this.originalEvent;
      this.isPropagationStopped = returnTrue;

      if (e && !this.isSimulated) {
        e.stopPropagation();
      }
    },
    stopImmediatePropagation: function stopImmediatePropagation() {
      var e = this.originalEvent;
      this.isImmediatePropagationStopped = returnTrue;

      if (e && !this.isSimulated) {
        e.stopImmediatePropagation();
      }

      this.stopPropagation();
    }
  }; // Includes all common event props including KeyEvent and MouseEvent specific props

  jQuery.each({
    altKey: true,
    bubbles: true,
    cancelable: true,
    changedTouches: true,
    ctrlKey: true,
    detail: true,
    eventPhase: true,
    metaKey: true,
    pageX: true,
    pageY: true,
    shiftKey: true,
    view: true,
    "char": true,
    code: true,
    charCode: true,
    key: true,
    keyCode: true,
    button: true,
    buttons: true,
    clientX: true,
    clientY: true,
    offsetX: true,
    offsetY: true,
    pointerId: true,
    pointerType: true,
    screenX: true,
    screenY: true,
    targetTouches: true,
    toElement: true,
    touches: true,
    which: function which(event) {
      var button = event.button; // Add which for key events

      if (event.which == null && rkeyEvent.test(event.type)) {
        return event.charCode != null ? event.charCode : event.keyCode;
      } // Add which for click: 1 === left; 2 === middle; 3 === right


      if (!event.which && button !== undefined && rmouseEvent.test(event.type)) {
        if (button & 1) {
          return 1;
        }

        if (button & 2) {
          return 3;
        }

        if (button & 4) {
          return 2;
        }

        return 0;
      }

      return event.which;
    }
  }, jQuery.event.addProp);
  jQuery.each({
    focus: "focusin",
    blur: "focusout"
  }, function (type, delegateType) {
    jQuery.event.special[type] = {
      // Utilize native event if possible so blur/focus sequence is correct
      setup: function setup() {
        // Claim the first handler
        // dataPriv.set( this, "focus", ... )
        // dataPriv.set( this, "blur", ... )
        leverageNative(this, type, expectSync); // Return false to allow normal processing in the caller

        return false;
      },
      trigger: function trigger() {
        // Force setup before trigger
        leverageNative(this, type); // Return non-false to allow normal event-path propagation

        return true;
      },
      delegateType: delegateType
    };
  }); // Create mouseenter/leave events using mouseover/out and event-time checks
  // so that event delegation works in jQuery.
  // Do the same for pointerenter/pointerleave and pointerover/pointerout
  //
  // Support: Safari 7 only
  // Safari sends mouseenter too often; see:
  // https://bugs.chromium.org/p/chromium/issues/detail?id=470258
  // for the description of the bug (it existed in older Chrome versions as well).

  jQuery.each({
    mouseenter: "mouseover",
    mouseleave: "mouseout",
    pointerenter: "pointerover",
    pointerleave: "pointerout"
  }, function (orig, fix) {
    jQuery.event.special[orig] = {
      delegateType: fix,
      bindType: fix,
      handle: function handle(event) {
        var ret,
            target = this,
            related = event.relatedTarget,
            handleObj = event.handleObj; // For mouseenter/leave call the handler if related is outside the target.
        // NB: No relatedTarget if the mouse left/entered the browser window

        if (!related || related !== target && !jQuery.contains(target, related)) {
          event.type = handleObj.origType;
          ret = handleObj.handler.apply(this, arguments);
          event.type = fix;
        }

        return ret;
      }
    };
  });
  jQuery.fn.extend({
    on: function on(types, selector, data, fn) {
      return _on(this, types, selector, data, fn);
    },
    one: function one(types, selector, data, fn) {
      return _on(this, types, selector, data, fn, 1);
    },
    off: function off(types, selector, fn) {
      var handleObj, type;

      if (types && types.preventDefault && types.handleObj) {
        // ( event )  dispatched jQuery.Event
        handleObj = types.handleObj;
        jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
        return this;
      }

      if (_typeof(types) === "object") {
        // ( types-object [, selector] )
        for (type in types) {
          this.off(type, selector, types[type]);
        }

        return this;
      }

      if (selector === false || typeof selector === "function") {
        // ( types [, fn] )
        fn = selector;
        selector = undefined;
      }

      if (fn === false) {
        fn = returnFalse;
      }

      return this.each(function () {
        jQuery.event.remove(this, types, fn, selector);
      });
    }
  });
  var
  /* eslint-disable max-len */
  // See https://github.com/eslint/eslint/issues/3229
  rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,

  /* eslint-enable */
  // Support: IE <=10 - 11, Edge 12 - 13 only
  // In IE/Edge using regex groups here causes severe slowdowns.
  // See https://connect.microsoft.com/IE/feedback/details/1736512/
  rnoInnerhtml = /<script|<style|<link/i,
      // checked="checked" or checked
  rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
      rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g; // Prefer a tbody over its parent table for containing new rows

  function manipulationTarget(elem, content) {
    if (nodeName(elem, "table") && nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr")) {
      return jQuery(elem).children("tbody")[0] || elem;
    }

    return elem;
  } // Replace/restore the type attribute of script elements for safe DOM manipulation


  function disableScript(elem) {
    elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
    return elem;
  }

  function restoreScript(elem) {
    if ((elem.type || "").slice(0, 5) === "true/") {
      elem.type = elem.type.slice(5);
    } else {
      elem.removeAttribute("type");
    }

    return elem;
  }

  function cloneCopyEvent(src, dest) {
    var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

    if (dest.nodeType !== 1) {
      return;
    } // 1. Copy private data: events, handlers, etc.


    if (dataPriv.hasData(src)) {
      pdataOld = dataPriv.access(src);
      pdataCur = dataPriv.set(dest, pdataOld);
      events = pdataOld.events;

      if (events) {
        delete pdataCur.handle;
        pdataCur.events = {};

        for (type in events) {
          for (i = 0, l = events[type].length; i < l; i++) {
            jQuery.event.add(dest, type, events[type][i]);
          }
        }
      }
    } // 2. Copy user data


    if (dataUser.hasData(src)) {
      udataOld = dataUser.access(src);
      udataCur = jQuery.extend({}, udataOld);
      dataUser.set(dest, udataCur);
    }
  } // Fix IE bugs, see support tests


  function fixInput(src, dest) {
    var nodeName = dest.nodeName.toLowerCase(); // Fails to persist the checked state of a cloned checkbox or radio button.

    if (nodeName === "input" && rcheckableType.test(src.type)) {
      dest.checked = src.checked; // Fails to return the selected option to the default selected state when cloning options
    } else if (nodeName === "input" || nodeName === "textarea") {
      dest.defaultValue = src.defaultValue;
    }
  }

  function domManip(collection, args, callback, ignored) {
    // Flatten any nested arrays
    args = concat.apply([], args);
    var fragment,
        first,
        scripts,
        hasScripts,
        node,
        doc,
        i = 0,
        l = collection.length,
        iNoClone = l - 1,
        value = args[0],
        valueIsFunction = isFunction(value); // We can't cloneNode fragments that contain checked, in WebKit

    if (valueIsFunction || l > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value)) {
      return collection.each(function (index) {
        var self = collection.eq(index);

        if (valueIsFunction) {
          args[0] = value.call(this, index, self.html());
        }

        domManip(self, args, callback, ignored);
      });
    }

    if (l) {
      fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);
      first = fragment.firstChild;

      if (fragment.childNodes.length === 1) {
        fragment = first;
      } // Require either new content or an interest in ignored elements to invoke the callback


      if (first || ignored) {
        scripts = jQuery.map(getAll(fragment, "script"), disableScript);
        hasScripts = scripts.length; // Use the original fragment for the last item
        // instead of the first because it can end up
        // being emptied incorrectly in certain situations (#8070).

        for (; i < l; i++) {
          node = fragment;

          if (i !== iNoClone) {
            node = jQuery.clone(node, true, true); // Keep references to cloned scripts for later restoration

            if (hasScripts) {
              // Support: Android <=4.0 only, PhantomJS 1 only
              // push.apply(_, arraylike) throws on ancient WebKit
              jQuery.merge(scripts, getAll(node, "script"));
            }
          }

          callback.call(collection[i], node, i);
        }

        if (hasScripts) {
          doc = scripts[scripts.length - 1].ownerDocument; // Reenable scripts

          jQuery.map(scripts, restoreScript); // Evaluate executable scripts on first document insertion

          for (i = 0; i < hasScripts; i++) {
            node = scripts[i];

            if (rscriptType.test(node.type || "") && !dataPriv.access(node, "globalEval") && jQuery.contains(doc, node)) {
              if (node.src && (node.type || "").toLowerCase() !== "module") {
                // Optional AJAX dependency, but won't run scripts if not present
                if (jQuery._evalUrl && !node.noModule) {
                  jQuery._evalUrl(node.src, {
                    nonce: node.nonce || node.getAttribute("nonce")
                  });
                }
              } else {
                DOMEval(node.textContent.replace(rcleanScript, ""), node, doc);
              }
            }
          }
        }
      }
    }

    return collection;
  }

  function _remove(elem, selector, keepData) {
    var node,
        nodes = selector ? jQuery.filter(selector, elem) : elem,
        i = 0;

    for (; (node = nodes[i]) != null; i++) {
      if (!keepData && node.nodeType === 1) {
        jQuery.cleanData(getAll(node));
      }

      if (node.parentNode) {
        if (keepData && isAttached(node)) {
          setGlobalEval(getAll(node, "script"));
        }

        node.parentNode.removeChild(node);
      }
    }

    return elem;
  }

  jQuery.extend({
    htmlPrefilter: function htmlPrefilter(html) {
      return html.replace(rxhtmlTag, "<$1></$2>");
    },
    clone: function clone(elem, dataAndEvents, deepDataAndEvents) {
      var i,
          l,
          srcElements,
          destElements,
          clone = elem.cloneNode(true),
          inPage = isAttached(elem); // Fix IE cloning issues

      if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {
        // We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
        destElements = getAll(clone);
        srcElements = getAll(elem);

        for (i = 0, l = srcElements.length; i < l; i++) {
          fixInput(srcElements[i], destElements[i]);
        }
      } // Copy the events from the original to the clone


      if (dataAndEvents) {
        if (deepDataAndEvents) {
          srcElements = srcElements || getAll(elem);
          destElements = destElements || getAll(clone);

          for (i = 0, l = srcElements.length; i < l; i++) {
            cloneCopyEvent(srcElements[i], destElements[i]);
          }
        } else {
          cloneCopyEvent(elem, clone);
        }
      } // Preserve script evaluation history


      destElements = getAll(clone, "script");

      if (destElements.length > 0) {
        setGlobalEval(destElements, !inPage && getAll(elem, "script"));
      } // Return the cloned set


      return clone;
    },
    cleanData: function cleanData(elems) {
      var data,
          elem,
          type,
          special = jQuery.event.special,
          i = 0;

      for (; (elem = elems[i]) !== undefined; i++) {
        if (acceptData(elem)) {
          if (data = elem[dataPriv.expando]) {
            if (data.events) {
              for (type in data.events) {
                if (special[type]) {
                  jQuery.event.remove(elem, type); // This is a shortcut to avoid jQuery.event.remove's overhead
                } else {
                  jQuery.removeEvent(elem, type, data.handle);
                }
              }
            } // Support: Chrome <=35 - 45+
            // Assign undefined instead of using delete, see Data#remove


            elem[dataPriv.expando] = undefined;
          }

          if (elem[dataUser.expando]) {
            // Support: Chrome <=35 - 45+
            // Assign undefined instead of using delete, see Data#remove
            elem[dataUser.expando] = undefined;
          }
        }
      }
    }
  });
  jQuery.fn.extend({
    detach: function detach(selector) {
      return _remove(this, selector, true);
    },
    remove: function remove(selector) {
      return _remove(this, selector);
    },
    text: function text(value) {
      return access(this, function (value) {
        return value === undefined ? jQuery.text(this) : this.empty().each(function () {
          if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
            this.textContent = value;
          }
        });
      }, null, value, arguments.length);
    },
    append: function append() {
      return domManip(this, arguments, function (elem) {
        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
          var target = manipulationTarget(this, elem);
          target.appendChild(elem);
        }
      });
    },
    prepend: function prepend() {
      return domManip(this, arguments, function (elem) {
        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
          var target = manipulationTarget(this, elem);
          target.insertBefore(elem, target.firstChild);
        }
      });
    },
    before: function before() {
      return domManip(this, arguments, function (elem) {
        if (this.parentNode) {
          this.parentNode.insertBefore(elem, this);
        }
      });
    },
    after: function after() {
      return domManip(this, arguments, function (elem) {
        if (this.parentNode) {
          this.parentNode.insertBefore(elem, this.nextSibling);
        }
      });
    },
    empty: function empty() {
      var elem,
          i = 0;

      for (; (elem = this[i]) != null; i++) {
        if (elem.nodeType === 1) {
          // Prevent memory leaks
          jQuery.cleanData(getAll(elem, false)); // Remove any remaining nodes

          elem.textContent = "";
        }
      }

      return this;
    },
    clone: function clone(dataAndEvents, deepDataAndEvents) {
      dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
      deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
      return this.map(function () {
        return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
      });
    },
    html: function html(value) {
      return access(this, function (value) {
        var elem = this[0] || {},
            i = 0,
            l = this.length;

        if (value === undefined && elem.nodeType === 1) {
          return elem.innerHTML;
        } // See if we can take a shortcut and just use innerHTML


        if (typeof value === "string" && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {
          value = jQuery.htmlPrefilter(value);

          try {
            for (; i < l; i++) {
              elem = this[i] || {}; // Remove element nodes and prevent memory leaks

              if (elem.nodeType === 1) {
                jQuery.cleanData(getAll(elem, false));
                elem.innerHTML = value;
              }
            }

            elem = 0; // If using innerHTML throws an exception, use the fallback method
          } catch (e) {}
        }

        if (elem) {
          this.empty().append(value);
        }
      }, null, value, arguments.length);
    },
    replaceWith: function replaceWith() {
      var ignored = []; // Make the changes, replacing each non-ignored context element with the new content

      return domManip(this, arguments, function (elem) {
        var parent = this.parentNode;

        if (jQuery.inArray(this, ignored) < 0) {
          jQuery.cleanData(getAll(this));

          if (parent) {
            parent.replaceChild(elem, this);
          }
        } // Force callback invocation

      }, ignored);
    }
  });
  jQuery.each({
    appendTo: "append",
    prependTo: "prepend",
    insertBefore: "before",
    insertAfter: "after",
    replaceAll: "replaceWith"
  }, function (name, original) {
    jQuery.fn[name] = function (selector) {
      var elems,
          ret = [],
          insert = jQuery(selector),
          last = insert.length - 1,
          i = 0;

      for (; i <= last; i++) {
        elems = i === last ? this : this.clone(true);
        jQuery(insert[i])[original](elems); // Support: Android <=4.0 only, PhantomJS 1 only
        // .get() because push.apply(_, arraylike) throws on ancient WebKit

        push.apply(ret, elems.get());
      }

      return this.pushStack(ret);
    };
  });
  var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");

  var getStyles = function getStyles(elem) {
    // Support: IE <=11 only, Firefox <=30 (#15098, #14150)
    // IE throws on elements created in popups
    // FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
    var view = elem.ownerDocument.defaultView;

    if (!view || !view.opener) {
      view = window;
    }

    return view.getComputedStyle(elem);
  };

  var rboxStyle = new RegExp(cssExpand.join("|"), "i");

  (function () {
    // Executing both pixelPosition & boxSizingReliable tests require only one layout
    // so they're executed at the same time to save the second computation.
    function computeStyleTests() {
      // This is a singleton, we need to execute it only once
      if (!div) {
        return;
      }

      container.style.cssText = "position:absolute;left:-11111px;width:60px;" + "margin-top:1px;padding:0;border:0";
      div.style.cssText = "position:relative;display:block;box-sizing:border-box;overflow:scroll;" + "margin:auto;border:1px;padding:1px;" + "width:60%;top:1%";
      documentElement.appendChild(container).appendChild(div);
      var divStyle = window.getComputedStyle(div);
      pixelPositionVal = divStyle.top !== "1%"; // Support: Android 4.0 - 4.3 only, Firefox <=3 - 44

      reliableMarginLeftVal = roundPixelMeasures(divStyle.marginLeft) === 12; // Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
      // Some styles come back with percentage values, even though they shouldn't

      div.style.right = "60%";
      pixelBoxStylesVal = roundPixelMeasures(divStyle.right) === 36; // Support: IE 9 - 11 only
      // Detect misreporting of content dimensions for box-sizing:border-box elements

      boxSizingReliableVal = roundPixelMeasures(divStyle.width) === 36; // Support: IE 9 only
      // Detect overflow:scroll screwiness (gh-3699)
      // Support: Chrome <=64
      // Don't get tricked when zoom affects offsetWidth (gh-4029)

      div.style.position = "absolute";
      scrollboxSizeVal = roundPixelMeasures(div.offsetWidth / 3) === 12;
      documentElement.removeChild(container); // Nullify the div so it wouldn't be stored in the memory and
      // it will also be a sign that checks already performed

      div = null;
    }

    function roundPixelMeasures(measure) {
      return Math.round(parseFloat(measure));
    }

    var pixelPositionVal,
        boxSizingReliableVal,
        scrollboxSizeVal,
        pixelBoxStylesVal,
        reliableMarginLeftVal,
        container = document.createElement("div"),
        div = document.createElement("div"); // Finish early in limited (non-browser) environments

    if (!div.style) {
      return;
    } // Support: IE <=9 - 11 only
    // Style of cloned element affects source element cloned (#8908)


    div.style.backgroundClip = "content-box";
    div.cloneNode(true).style.backgroundClip = "";
    support.clearCloneStyle = div.style.backgroundClip === "content-box";
    jQuery.extend(support, {
      boxSizingReliable: function boxSizingReliable() {
        computeStyleTests();
        return boxSizingReliableVal;
      },
      pixelBoxStyles: function pixelBoxStyles() {
        computeStyleTests();
        return pixelBoxStylesVal;
      },
      pixelPosition: function pixelPosition() {
        computeStyleTests();
        return pixelPositionVal;
      },
      reliableMarginLeft: function reliableMarginLeft() {
        computeStyleTests();
        return reliableMarginLeftVal;
      },
      scrollboxSize: function scrollboxSize() {
        computeStyleTests();
        return scrollboxSizeVal;
      }
    });
  })();

  function curCSS(elem, name, computed) {
    var width,
        minWidth,
        maxWidth,
        ret,
        // Support: Firefox 51+
    // Retrieving style before computed somehow
    // fixes an issue with getting wrong values
    // on detached elements
    style = elem.style;
    computed = computed || getStyles(elem); // getPropertyValue is needed for:
    //   .css('filter') (IE 9 only, #12537)
    //   .css('--customProperty) (#3144)

    if (computed) {
      ret = computed.getPropertyValue(name) || computed[name];

      if (ret === "" && !isAttached(elem)) {
        ret = jQuery.style(elem, name);
      } // A tribute to the "awesome hack by Dean Edwards"
      // Android Browser returns percentage for some values,
      // but width seems to be reliably pixels.
      // This is against the CSSOM draft spec:
      // https://drafts.csswg.org/cssom/#resolved-values


      if (!support.pixelBoxStyles() && rnumnonpx.test(ret) && rboxStyle.test(name)) {
        // Remember the original values
        width = style.width;
        minWidth = style.minWidth;
        maxWidth = style.maxWidth; // Put in the new values to get a computed value out

        style.minWidth = style.maxWidth = style.width = ret;
        ret = computed.width; // Revert the changed values

        style.width = width;
        style.minWidth = minWidth;
        style.maxWidth = maxWidth;
      }
    }

    return ret !== undefined ? // Support: IE <=9 - 11 only
    // IE returns zIndex value as an integer.
    ret + "" : ret;
  }

  function addGetHookIf(conditionFn, hookFn) {
    // Define the hook, we'll check on the first run if it's really needed.
    return {
      get: function get() {
        if (conditionFn()) {
          // Hook not needed (or it's not possible to use it due
          // to missing dependency), remove it.
          delete this.get;
          return;
        } // Hook needed; redefine it so that the support test is not executed again.


        return (this.get = hookFn).apply(this, arguments);
      }
    };
  }

  var cssPrefixes = ["Webkit", "Moz", "ms"],
      emptyStyle = document.createElement("div").style,
      vendorProps = {}; // Return a vendor-prefixed property or undefined

  function vendorPropName(name) {
    // Check for vendor prefixed names
    var capName = name[0].toUpperCase() + name.slice(1),
        i = cssPrefixes.length;

    while (i--) {
      name = cssPrefixes[i] + capName;

      if (name in emptyStyle) {
        return name;
      }
    }
  } // Return a potentially-mapped jQuery.cssProps or vendor prefixed property


  function finalPropName(name) {
    var _final = jQuery.cssProps[name] || vendorProps[name];

    if (_final) {
      return _final;
    }

    if (name in emptyStyle) {
      return name;
    }

    return vendorProps[name] = vendorPropName(name) || name;
  }

  var // Swappable if display is none or starts with table
  // except "table", "table-cell", or "table-caption"
  // See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
  rdisplayswap = /^(none|table(?!-c[ea]).+)/,
      rcustomProp = /^--/,
      cssShow = {
    position: "absolute",
    visibility: "hidden",
    display: "block"
  },
      cssNormalTransform = {
    letterSpacing: "0",
    fontWeight: "400"
  };

  function setPositiveNumber(elem, value, subtract) {
    // Any relative (+/-) values have already been
    // normalized at this point
    var matches = rcssNum.exec(value);
    return matches ? // Guard against undefined "subtract", e.g., when used as in cssHooks
    Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || "px") : value;
  }

  function boxModelAdjustment(elem, dimension, box, isBorderBox, styles, computedVal) {
    var i = dimension === "width" ? 1 : 0,
        extra = 0,
        delta = 0; // Adjustment may not be necessary

    if (box === (isBorderBox ? "border" : "content")) {
      return 0;
    }

    for (; i < 4; i += 2) {
      // Both box models exclude margin
      if (box === "margin") {
        delta += jQuery.css(elem, box + cssExpand[i], true, styles);
      } // If we get here with a content-box, we're seeking "padding" or "border" or "margin"


      if (!isBorderBox) {
        // Add padding
        delta += jQuery.css(elem, "padding" + cssExpand[i], true, styles); // For "border" or "margin", add border

        if (box !== "padding") {
          delta += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles); // But still keep track of it otherwise
        } else {
          extra += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
        } // If we get here with a border-box (content + padding + border), we're seeking "content" or
        // "padding" or "margin"

      } else {
        // For "content", subtract padding
        if (box === "content") {
          delta -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
        } // For "content" or "padding", subtract border


        if (box !== "margin") {
          delta -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
        }
      }
    } // Account for positive content-box scroll gutter when requested by providing computedVal


    if (!isBorderBox && computedVal >= 0) {
      // offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
      // Assuming integer scroll gutter, subtract the rest and round down
      delta += Math.max(0, Math.ceil(elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - computedVal - delta - extra - 0.5 // If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
      // Use an explicit zero to avoid NaN (gh-3964)
      )) || 0;
    }

    return delta;
  }

  function getWidthOrHeight(elem, dimension, extra) {
    // Start with computed style
    var styles = getStyles(elem),
        // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
    // Fake content-box until we know it's needed to know the true value.
    boxSizingNeeded = !support.boxSizingReliable() || extra,
        isBorderBox = boxSizingNeeded && jQuery.css(elem, "boxSizing", false, styles) === "border-box",
        valueIsBorderBox = isBorderBox,
        val = curCSS(elem, dimension, styles),
        offsetProp = "offset" + dimension[0].toUpperCase() + dimension.slice(1); // Support: Firefox <=54
    // Return a confounding non-pixel value or feign ignorance, as appropriate.

    if (rnumnonpx.test(val)) {
      if (!extra) {
        return val;
      }

      val = "auto";
    } // Fall back to offsetWidth/offsetHeight when value is "auto"
    // This happens for inline elements with no explicit setting (gh-3571)
    // Support: Android <=4.1 - 4.3 only
    // Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
    // Support: IE 9-11 only
    // Also use offsetWidth/offsetHeight for when box sizing is unreliable
    // We use getClientRects() to check for hidden/disconnected.
    // In those cases, the computed value can be trusted to be border-box


    if ((!support.boxSizingReliable() && isBorderBox || val === "auto" || !parseFloat(val) && jQuery.css(elem, "display", false, styles) === "inline") && elem.getClientRects().length) {
      isBorderBox = jQuery.css(elem, "boxSizing", false, styles) === "border-box"; // Where available, offsetWidth/offsetHeight approximate border box dimensions.
      // Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
      // retrieved value as a content box dimension.

      valueIsBorderBox = offsetProp in elem;

      if (valueIsBorderBox) {
        val = elem[offsetProp];
      }
    } // Normalize "" and auto


    val = parseFloat(val) || 0; // Adjust for the element's box model

    return val + boxModelAdjustment(elem, dimension, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles, // Provide the current computed size to request scroll gutter calculation (gh-3589)
    val) + "px";
  }

  jQuery.extend({
    // Add in style property hooks for overriding the default
    // behavior of getting and setting a style property
    cssHooks: {
      opacity: {
        get: function get(elem, computed) {
          if (computed) {
            // We should always get a number back from opacity
            var ret = curCSS(elem, "opacity");
            return ret === "" ? "1" : ret;
          }
        }
      }
    },
    // Don't automatically add "px" to these possibly-unitless properties
    cssNumber: {
      "animationIterationCount": true,
      "columnCount": true,
      "fillOpacity": true,
      "flexGrow": true,
      "flexShrink": true,
      "fontWeight": true,
      "gridArea": true,
      "gridColumn": true,
      "gridColumnEnd": true,
      "gridColumnStart": true,
      "gridRow": true,
      "gridRowEnd": true,
      "gridRowStart": true,
      "lineHeight": true,
      "opacity": true,
      "order": true,
      "orphans": true,
      "widows": true,
      "zIndex": true,
      "zoom": true
    },
    // Add in properties whose names you wish to fix before
    // setting or getting the value
    cssProps: {},
    // Get and set the style property on a DOM Node
    style: function style(elem, name, value, extra) {
      // Don't set styles on text and comment nodes
      if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
        return;
      } // Make sure that we're working with the right name


      var ret,
          type,
          hooks,
          origName = camelCase(name),
          isCustomProp = rcustomProp.test(name),
          style = elem.style; // Make sure that we're working with the right name. We don't
      // want to query the value if it is a CSS custom property
      // since they are user-defined.

      if (!isCustomProp) {
        name = finalPropName(origName);
      } // Gets hook for the prefixed version, then unprefixed version


      hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName]; // Check if we're setting a value

      if (value !== undefined) {
        type = _typeof(value); // Convert "+=" or "-=" to relative numbers (#7345)

        if (type === "string" && (ret = rcssNum.exec(value)) && ret[1]) {
          value = adjustCSS(elem, name, ret); // Fixes bug #9237

          type = "number";
        } // Make sure that null and NaN values aren't set (#7116)


        if (value == null || value !== value) {
          return;
        } // If a number was passed in, add the unit (except for certain CSS properties)
        // The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
        // "px" to a few hardcoded values.


        if (type === "number" && !isCustomProp) {
          value += ret && ret[3] || (jQuery.cssNumber[origName] ? "" : "px");
        } // background-* props affect original clone's values


        if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
          style[name] = "inherit";
        } // If a hook was provided, use that value, otherwise just set the specified value


        if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {
          if (isCustomProp) {
            style.setProperty(name, value);
          } else {
            style[name] = value;
          }
        }
      } else {
        // If a hook was provided get the non-computed value from there
        if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
          return ret;
        } // Otherwise just get the value from the style object


        return style[name];
      }
    },
    css: function css(elem, name, extra, styles) {
      var val,
          num,
          hooks,
          origName = camelCase(name),
          isCustomProp = rcustomProp.test(name); // Make sure that we're working with the right name. We don't
      // want to modify the value if it is a CSS custom property
      // since they are user-defined.

      if (!isCustomProp) {
        name = finalPropName(origName);
      } // Try prefixed name followed by the unprefixed name


      hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName]; // If a hook was provided get the computed value from there

      if (hooks && "get" in hooks) {
        val = hooks.get(elem, true, extra);
      } // Otherwise, if a way to get the computed value exists, use that


      if (val === undefined) {
        val = curCSS(elem, name, styles);
      } // Convert "normal" to computed value


      if (val === "normal" && name in cssNormalTransform) {
        val = cssNormalTransform[name];
      } // Make numeric if forced or a qualifier was provided and val looks numeric


      if (extra === "" || extra) {
        num = parseFloat(val);
        return extra === true || isFinite(num) ? num || 0 : val;
      }

      return val;
    }
  });
  jQuery.each(["height", "width"], function (i, dimension) {
    jQuery.cssHooks[dimension] = {
      get: function get(elem, computed, extra) {
        if (computed) {
          // Certain elements can have dimension info if we invisibly show them
          // but it must have a current display style that would benefit
          return rdisplayswap.test(jQuery.css(elem, "display")) && ( // Support: Safari 8+
          // Table columns in Safari have non-zero offsetWidth & zero
          // getBoundingClientRect().width unless display is changed.
          // Support: IE <=11 only
          // Running getBoundingClientRect on a disconnected node
          // in IE throws an error.
          !elem.getClientRects().length || !elem.getBoundingClientRect().width) ? swap(elem, cssShow, function () {
            return getWidthOrHeight(elem, dimension, extra);
          }) : getWidthOrHeight(elem, dimension, extra);
        }
      },
      set: function set(elem, value, extra) {
        var matches,
            styles = getStyles(elem),
            // Only read styles.position if the test has a chance to fail
        // to avoid forcing a reflow.
        scrollboxSizeBuggy = !support.scrollboxSize() && styles.position === "absolute",
            // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
        boxSizingNeeded = scrollboxSizeBuggy || extra,
            isBorderBox = boxSizingNeeded && jQuery.css(elem, "boxSizing", false, styles) === "border-box",
            subtract = extra ? boxModelAdjustment(elem, dimension, extra, isBorderBox, styles) : 0; // Account for unreliable border-box dimensions by comparing offset* to computed and
        // faking a content-box to get border and padding (gh-3699)

        if (isBorderBox && scrollboxSizeBuggy) {
          subtract -= Math.ceil(elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - parseFloat(styles[dimension]) - boxModelAdjustment(elem, dimension, "border", false, styles) - 0.5);
        } // Convert to pixels if value adjustment is needed


        if (subtract && (matches = rcssNum.exec(value)) && (matches[3] || "px") !== "px") {
          elem.style[dimension] = value;
          value = jQuery.css(elem, dimension);
        }

        return setPositiveNumber(elem, value, subtract);
      }
    };
  });
  jQuery.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft, function (elem, computed) {
    if (computed) {
      return (parseFloat(curCSS(elem, "marginLeft")) || elem.getBoundingClientRect().left - swap(elem, {
        marginLeft: 0
      }, function () {
        return elem.getBoundingClientRect().left;
      })) + "px";
    }
  }); // These hooks are used by animate to expand properties

  jQuery.each({
    margin: "",
    padding: "",
    border: "Width"
  }, function (prefix, suffix) {
    jQuery.cssHooks[prefix + suffix] = {
      expand: function expand(value) {
        var i = 0,
            expanded = {},
            // Assumes a single number if not a string
        parts = typeof value === "string" ? value.split(" ") : [value];

        for (; i < 4; i++) {
          expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
        }

        return expanded;
      }
    };

    if (prefix !== "margin") {
      jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
    }
  });
  jQuery.fn.extend({
    css: function css(name, value) {
      return access(this, function (elem, name, value) {
        var styles,
            len,
            map = {},
            i = 0;

        if (Array.isArray(name)) {
          styles = getStyles(elem);
          len = name.length;

          for (; i < len; i++) {
            map[name[i]] = jQuery.css(elem, name[i], false, styles);
          }

          return map;
        }

        return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
      }, name, value, arguments.length > 1);
    }
  }); // Based off of the plugin by Clint Helfers, with permission.
  // https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/

  jQuery.fn.delay = function (time, type) {
    time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
    type = type || "fx";
    return this.queue(type, function (next, hooks) {
      var timeout = window.setTimeout(next, time);

      hooks.stop = function () {
        window.clearTimeout(timeout);
      };
    });
  };

  (function () {
    var input = document.createElement("input"),
        select = document.createElement("select"),
        opt = select.appendChild(document.createElement("option"));
    input.type = "checkbox"; // Support: Android <=4.3 only
    // Default value for a checkbox should be "on"

    support.checkOn = input.value !== ""; // Support: IE <=11 only
    // Must access selectedIndex to make default options select

    support.optSelected = opt.selected; // Support: IE <=11 only
    // An input loses its value after becoming a radio

    input = document.createElement("input");
    input.value = "t";
    input.type = "radio";
    support.radioValue = input.value === "t";
  })();

  var boolHook,
      attrHandle = jQuery.expr.attrHandle;
  jQuery.fn.extend({
    attr: function attr(name, value) {
      return access(this, jQuery.attr, name, value, arguments.length > 1);
    },
    removeAttr: function removeAttr(name) {
      return this.each(function () {
        jQuery.removeAttr(this, name);
      });
    }
  });
  jQuery.extend({
    attr: function attr(elem, name, value) {
      var ret,
          hooks,
          nType = elem.nodeType; // Don't get/set attributes on text, comment and attribute nodes

      if (nType === 3 || nType === 8 || nType === 2) {
        return;
      } // Fallback to prop when attributes are not supported


      if (typeof elem.getAttribute === "undefined") {
        return jQuery.prop(elem, name, value);
      } // Attribute hooks are determined by the lowercase version
      // Grab necessary hook if one is defined


      if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
        hooks = jQuery.attrHooks[name.toLowerCase()] || (jQuery.expr.match.bool.test(name) ? boolHook : undefined);
      }

      if (value !== undefined) {
        if (value === null) {
          jQuery.removeAttr(elem, name);
          return;
        }

        if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
          return ret;
        }

        elem.setAttribute(name, value + "");
        return value;
      }

      if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
        return ret;
      }

      ret = jQuery.find.attr(elem, name); // Non-existent attributes return null, we normalize to undefined

      return ret == null ? undefined : ret;
    },
    attrHooks: {
      type: {
        set: function set(elem, value) {
          if (!support.radioValue && value === "radio" && nodeName(elem, "input")) {
            var val = elem.value;
            elem.setAttribute("type", value);

            if (val) {
              elem.value = val;
            }

            return value;
          }
        }
      }
    },
    removeAttr: function removeAttr(elem, value) {
      var name,
          i = 0,
          // Attribute names can contain non-HTML whitespace characters
      // https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
      attrNames = value && value.match(rnothtmlwhite);

      if (attrNames && elem.nodeType === 1) {
        while (name = attrNames[i++]) {
          elem.removeAttribute(name);
        }
      }
    }
  }); // Hooks for boolean attributes

  boolHook = {
    set: function set(elem, value, name) {
      if (value === false) {
        // Remove boolean attributes when set to false
        jQuery.removeAttr(elem, name);
      } else {
        elem.setAttribute(name, name);
      }

      return name;
    }
  };
  jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function (i, name) {
    var getter = attrHandle[name] || jQuery.find.attr;

    attrHandle[name] = function (elem, name, isXML) {
      var ret,
          handle,
          lowercaseName = name.toLowerCase();

      if (!isXML) {
        // Avoid an infinite loop by temporarily removing this function from the getter
        handle = attrHandle[lowercaseName];
        attrHandle[lowercaseName] = ret;
        ret = getter(elem, name, isXML) != null ? lowercaseName : null;
        attrHandle[lowercaseName] = handle;
      }

      return ret;
    };
  });
  var rfocusable = /^(?:input|select|textarea|button)$/i,
      rclickable = /^(?:a|area)$/i;
  jQuery.fn.extend({
    prop: function prop(name, value) {
      return access(this, jQuery.prop, name, value, arguments.length > 1);
    },
    removeProp: function removeProp(name) {
      return this.each(function () {
        delete this[jQuery.propFix[name] || name];
      });
    }
  });
  jQuery.extend({
    prop: function prop(elem, name, value) {
      var ret,
          hooks,
          nType = elem.nodeType; // Don't get/set properties on text, comment and attribute nodes

      if (nType === 3 || nType === 8 || nType === 2) {
        return;
      }

      if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
        // Fix name and attach hooks
        name = jQuery.propFix[name] || name;
        hooks = jQuery.propHooks[name];
      }

      if (value !== undefined) {
        if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
          return ret;
        }

        return elem[name] = value;
      }

      if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
        return ret;
      }

      return elem[name];
    },
    propHooks: {
      tabIndex: {
        get: function get(elem) {
          // Support: IE <=9 - 11 only
          // elem.tabIndex doesn't always return the
          // correct value when it hasn't been explicitly set
          // https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
          // Use proper attribute retrieval(#12072)
          var tabindex = jQuery.find.attr(elem, "tabindex");

          if (tabindex) {
            return parseInt(tabindex, 10);
          }

          if (rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href) {
            return 0;
          }

          return -1;
        }
      }
    },
    propFix: {
      "for": "htmlFor",
      "class": "className"
    }
  }); // Support: IE <=11 only
  // Accessing the selectedIndex property
  // forces the browser to respect setting selected
  // on the option
  // The getter ensures a default option is selected
  // when in an optgroup
  // eslint rule "no-unused-expressions" is disabled for this code
  // since it considers such accessions noop

  if (!support.optSelected) {
    jQuery.propHooks.selected = {
      get: function get(elem) {
        /* eslint no-unused-expressions: "off" */
        var parent = elem.parentNode;

        if (parent && parent.parentNode) {
          parent.parentNode.selectedIndex;
        }

        return null;
      },
      set: function set(elem) {
        /* eslint no-unused-expressions: "off" */
        var parent = elem.parentNode;

        if (parent) {
          parent.selectedIndex;

          if (parent.parentNode) {
            parent.parentNode.selectedIndex;
          }
        }
      }
    };
  }

  jQuery.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () {
    jQuery.propFix[this.toLowerCase()] = this;
  }); // Strip and collapse whitespace according to HTML spec
  // https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace

  function stripAndCollapse(value) {
    var tokens = value.match(rnothtmlwhite) || [];
    return tokens.join(" ");
  }

  function getClass(elem) {
    return elem.getAttribute && elem.getAttribute("class") || "";
  }

  function classesToArray(value) {
    if (Array.isArray(value)) {
      return value;
    }

    if (typeof value === "string") {
      return value.match(rnothtmlwhite) || [];
    }

    return [];
  }

  jQuery.fn.extend({
    addClass: function addClass(value) {
      var classes,
          elem,
          cur,
          curValue,
          clazz,
          j,
          finalValue,
          i = 0;

      if (isFunction(value)) {
        return this.each(function (j) {
          jQuery(this).addClass(value.call(this, j, getClass(this)));
        });
      }

      classes = classesToArray(value);

      if (classes.length) {
        while (elem = this[i++]) {
          curValue = getClass(elem);
          cur = elem.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";

          if (cur) {
            j = 0;

            while (clazz = classes[j++]) {
              if (cur.indexOf(" " + clazz + " ") < 0) {
                cur += clazz + " ";
              }
            } // Only assign if different to avoid unneeded rendering.


            finalValue = stripAndCollapse(cur);

            if (curValue !== finalValue) {
              elem.setAttribute("class", finalValue);
            }
          }
        }
      }

      return this;
    },
    removeClass: function removeClass(value) {
      var classes,
          elem,
          cur,
          curValue,
          clazz,
          j,
          finalValue,
          i = 0;

      if (isFunction(value)) {
        return this.each(function (j) {
          jQuery(this).removeClass(value.call(this, j, getClass(this)));
        });
      }

      if (!arguments.length) {
        return this.attr("class", "");
      }

      classes = classesToArray(value);

      if (classes.length) {
        while (elem = this[i++]) {
          curValue = getClass(elem); // This expression is here for better compressibility (see addClass)

          cur = elem.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";

          if (cur) {
            j = 0;

            while (clazz = classes[j++]) {
              // Remove *all* instances
              while (cur.indexOf(" " + clazz + " ") > -1) {
                cur = cur.replace(" " + clazz + " ", " ");
              }
            } // Only assign if different to avoid unneeded rendering.


            finalValue = stripAndCollapse(cur);

            if (curValue !== finalValue) {
              elem.setAttribute("class", finalValue);
            }
          }
        }
      }

      return this;
    },
    toggleClass: function toggleClass(value, stateVal) {
      var type = _typeof(value),
          isValidValue = type === "string" || Array.isArray(value);

      if (typeof stateVal === "boolean" && isValidValue) {
        return stateVal ? this.addClass(value) : this.removeClass(value);
      }

      if (isFunction(value)) {
        return this.each(function (i) {
          jQuery(this).toggleClass(value.call(this, i, getClass(this), stateVal), stateVal);
        });
      }

      return this.each(function () {
        var className, i, self, classNames;

        if (isValidValue) {
          // Toggle individual class names
          i = 0;
          self = jQuery(this);
          classNames = classesToArray(value);

          while (className = classNames[i++]) {
            // Check each className given, space separated list
            if (self.hasClass(className)) {
              self.removeClass(className);
            } else {
              self.addClass(className);
            }
          } // Toggle whole class name

        } else if (value === undefined || type === "boolean") {
          className = getClass(this);

          if (className) {
            // Store className if set
            dataPriv.set(this, "__className__", className);
          } // If the element has a class name or if we're passed `false`,
          // then remove the whole classname (if there was one, the above saved it).
          // Otherwise bring back whatever was previously saved (if anything),
          // falling back to the empty string if nothing was stored.


          if (this.setAttribute) {
            this.setAttribute("class", className || value === false ? "" : dataPriv.get(this, "__className__") || "");
          }
        }
      });
    },
    hasClass: function hasClass(selector) {
      var className,
          elem,
          i = 0;
      className = " " + selector + " ";

      while (elem = this[i++]) {
        if (elem.nodeType === 1 && (" " + stripAndCollapse(getClass(elem)) + " ").indexOf(className) > -1) {
          return true;
        }
      }

      return false;
    }
  });
  var rreturn = /\r/g;
  jQuery.fn.extend({
    val: function val(value) {
      var hooks,
          ret,
          valueIsFunction,
          elem = this[0];

      if (!arguments.length) {
        if (elem) {
          hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];

          if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {
            return ret;
          }

          ret = elem.value; // Handle most common string cases

          if (typeof ret === "string") {
            return ret.replace(rreturn, "");
          } // Handle cases where value is null/undef or number


          return ret == null ? "" : ret;
        }

        return;
      }

      valueIsFunction = isFunction(value);
      return this.each(function (i) {
        var val;

        if (this.nodeType !== 1) {
          return;
        }

        if (valueIsFunction) {
          val = value.call(this, i, jQuery(this).val());
        } else {
          val = value;
        } // Treat null/undefined as ""; convert numbers to string


        if (val == null) {
          val = "";
        } else if (typeof val === "number") {
          val += "";
        } else if (Array.isArray(val)) {
          val = jQuery.map(val, function (value) {
            return value == null ? "" : value + "";
          });
        }

        hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()]; // If set returns undefined, fall back to normal setting

        if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
          this.value = val;
        }
      });
    }
  });
  jQuery.extend({
    valHooks: {
      option: {
        get: function get(elem) {
          var val = jQuery.find.attr(elem, "value");
          return val != null ? val : // Support: IE <=10 - 11 only
          // option.text throws exceptions (#14686, #14858)
          // Strip and collapse whitespace
          // https://html.spec.whatwg.org/#strip-and-collapse-whitespace
          stripAndCollapse(jQuery.text(elem));
        }
      },
      select: {
        get: function get(elem) {
          var value,
              option,
              i,
              options = elem.options,
              index = elem.selectedIndex,
              one = elem.type === "select-one",
              values = one ? null : [],
              max = one ? index + 1 : options.length;

          if (index < 0) {
            i = max;
          } else {
            i = one ? index : 0;
          } // Loop through all the selected options


          for (; i < max; i++) {
            option = options[i]; // Support: IE <=9 only
            // IE8-9 doesn't update selected after form reset (#2551)

            if ((option.selected || i === index) && // Don't return options that are disabled or in a disabled optgroup
            !option.disabled && (!option.parentNode.disabled || !nodeName(option.parentNode, "optgroup"))) {
              // Get the specific value for the option
              value = jQuery(option).val(); // We don't need an array for one selects

              if (one) {
                return value;
              } // Multi-Selects return an array


              values.push(value);
            }
          }

          return values;
        },
        set: function set(elem, value) {
          var optionSet,
              option,
              options = elem.options,
              values = jQuery.makeArray(value),
              i = options.length;

          while (i--) {
            option = options[i];
            /* eslint-disable no-cond-assign */

            if (option.selected = jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1) {
              optionSet = true;
            }
            /* eslint-enable no-cond-assign */

          } // Force browsers to behave consistently when non-matching value is set


          if (!optionSet) {
            elem.selectedIndex = -1;
          }

          return values;
        }
      }
    }
  }); // Radios and checkboxes getter/setter

  jQuery.each(["radio", "checkbox"], function () {
    jQuery.valHooks[this] = {
      set: function set(elem, value) {
        if (Array.isArray(value)) {
          return elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1;
        }
      }
    };

    if (!support.checkOn) {
      jQuery.valHooks[this].get = function (elem) {
        return elem.getAttribute("value") === null ? "on" : elem.value;
      };
    }
  }); // Return jQuery for attributes-only inclusion

  support.focusin = "onfocusin" in window;

  var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
      stopPropagationCallback = function stopPropagationCallback(e) {
    e.stopPropagation();
  };

  jQuery.extend(jQuery.event, {
    trigger: function trigger(event, data, elem, onlyHandlers) {
      var i,
          cur,
          tmp,
          bubbleType,
          ontype,
          handle,
          special,
          lastElement,
          eventPath = [elem || document],
          type = hasOwn.call(event, "type") ? event.type : event,
          namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];
      cur = lastElement = tmp = elem = elem || document; // Don't do events on text and comment nodes

      if (elem.nodeType === 3 || elem.nodeType === 8) {
        return;
      } // focus/blur morphs to focusin/out; ensure we're not firing them right now


      if (rfocusMorph.test(type + jQuery.event.triggered)) {
        return;
      }

      if (type.indexOf(".") > -1) {
        // Namespaced trigger; create a regexp to match event type in handle()
        namespaces = type.split(".");
        type = namespaces.shift();
        namespaces.sort();
      }

      ontype = type.indexOf(":") < 0 && "on" + type; // Caller can pass in a jQuery.Event object, Object, or just an event type string

      event = event[jQuery.expando] ? event : new jQuery.Event(type, _typeof(event) === "object" && event); // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)

      event.isTrigger = onlyHandlers ? 2 : 3;
      event.namespace = namespaces.join(".");
      event.rnamespace = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null; // Clean up the event in case it is being reused

      event.result = undefined;

      if (!event.target) {
        event.target = elem;
      } // Clone any incoming data and prepend the event, creating the handler arg list


      data = data == null ? [event] : jQuery.makeArray(data, [event]); // Allow special events to draw outside the lines

      special = jQuery.event.special[type] || {};

      if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
        return;
      } // Determine event propagation path in advance, per W3C events spec (#9951)
      // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)


      if (!onlyHandlers && !special.noBubble && !isWindow(elem)) {
        bubbleType = special.delegateType || type;

        if (!rfocusMorph.test(bubbleType + type)) {
          cur = cur.parentNode;
        }

        for (; cur; cur = cur.parentNode) {
          eventPath.push(cur);
          tmp = cur;
        } // Only add window if we got to document (e.g., not plain obj or detached DOM)


        if (tmp === (elem.ownerDocument || document)) {
          eventPath.push(tmp.defaultView || tmp.parentWindow || window);
        }
      } // Fire handlers on the event path


      i = 0;

      while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
        lastElement = cur;
        event.type = i > 1 ? bubbleType : special.bindType || type; // jQuery handler

        handle = (dataPriv.get(cur, "events") || {})[event.type] && dataPriv.get(cur, "handle");

        if (handle) {
          handle.apply(cur, data);
        } // Native handler


        handle = ontype && cur[ontype];

        if (handle && handle.apply && acceptData(cur)) {
          event.result = handle.apply(cur, data);

          if (event.result === false) {
            event.preventDefault();
          }
        }
      }

      event.type = type; // If nobody prevented the default action, do it now

      if (!onlyHandlers && !event.isDefaultPrevented()) {
        if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) {
          // Call a native DOM method on the target with the same name as the event.
          // Don't do default actions on window, that's where global variables be (#6170)
          if (ontype && isFunction(elem[type]) && !isWindow(elem)) {
            // Don't re-trigger an onFOO event when we call its FOO() method
            tmp = elem[ontype];

            if (tmp) {
              elem[ontype] = null;
            } // Prevent re-triggering of the same event, since we already bubbled it above


            jQuery.event.triggered = type;

            if (event.isPropagationStopped()) {
              lastElement.addEventListener(type, stopPropagationCallback);
            }

            elem[type]();

            if (event.isPropagationStopped()) {
              lastElement.removeEventListener(type, stopPropagationCallback);
            }

            jQuery.event.triggered = undefined;

            if (tmp) {
              elem[ontype] = tmp;
            }
          }
        }
      }

      return event.result;
    },
    // Piggyback on a donor event to simulate a different one
    // Used only for `focus(in | out)` events
    simulate: function simulate(type, elem, event) {
      var e = jQuery.extend(new jQuery.Event(), event, {
        type: type,
        isSimulated: true
      });
      jQuery.event.trigger(e, null, elem);
    }
  });
  jQuery.fn.extend({
    trigger: function trigger(type, data) {
      return this.each(function () {
        jQuery.event.trigger(type, data, this);
      });
    },
    triggerHandler: function triggerHandler(type, data) {
      var elem = this[0];

      if (elem) {
        return jQuery.event.trigger(type, data, elem, true);
      }
    }
  }); // Support: Firefox <=44
  // Firefox doesn't have focus(in | out) events
  // Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
  //
  // Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
  // focus(in | out) events fire after focus & blur events,
  // which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
  // Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857

  if (!support.focusin) {
    jQuery.each({
      focus: "focusin",
      blur: "focusout"
    }, function (orig, fix) {
      // Attach a single capturing handler on the document while someone wants focusin/focusout
      var handler = function handler(event) {
        jQuery.event.simulate(fix, event.target, jQuery.event.fix(event));
      };

      jQuery.event.special[fix] = {
        setup: function setup() {
          var doc = this.ownerDocument || this,
              attaches = dataPriv.access(doc, fix);

          if (!attaches) {
            doc.addEventListener(orig, handler, true);
          }

          dataPriv.access(doc, fix, (attaches || 0) + 1);
        },
        teardown: function teardown() {
          var doc = this.ownerDocument || this,
              attaches = dataPriv.access(doc, fix) - 1;

          if (!attaches) {
            doc.removeEventListener(orig, handler, true);
            dataPriv.remove(doc, fix);
          } else {
            dataPriv.access(doc, fix, attaches);
          }
        }
      };
    });
  }

  var rbracket = /\[\]$/,
      rCRLF = /\r?\n/g,
      rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
      rsubmittable = /^(?:input|select|textarea|keygen)/i;

  function buildParams(prefix, obj, traditional, add) {
    var name;

    if (Array.isArray(obj)) {
      // Serialize array item.
      jQuery.each(obj, function (i, v) {
        if (traditional || rbracket.test(prefix)) {
          // Treat each array item as a scalar.
          add(prefix, v);
        } else {
          // Item is non-scalar (array or object), encode its numeric index.
          buildParams(prefix + "[" + (_typeof(v) === "object" && v != null ? i : "") + "]", v, traditional, add);
        }
      });
    } else if (!traditional && toType(obj) === "object") {
      // Serialize object item.
      for (name in obj) {
        buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
      }
    } else {
      // Serialize scalar item.
      add(prefix, obj);
    }
  } // Serialize an array of form elements or a set of
  // key/values into a query string


  jQuery.param = function (a, traditional) {
    var prefix,
        s = [],
        add = function add(key, valueOrFunction) {
      // If value is a function, invoke it and use its return value
      var value = isFunction(valueOrFunction) ? valueOrFunction() : valueOrFunction;
      s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value == null ? "" : value);
    };

    if (a == null) {
      return "";
    } // If an array was passed in, assume that it is an array of form elements.


    if (Array.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {
      // Serialize the form elements
      jQuery.each(a, function () {
        add(this.name, this.value);
      });
    } else {
      // If traditional, encode the "old" way (the way 1.3.2 or older
      // did it), otherwise encode params recursively.
      for (prefix in a) {
        buildParams(prefix, a[prefix], traditional, add);
      }
    } // Return the resulting serialization


    return s.join("&");
  };

  jQuery.fn.extend({
    serialize: function serialize() {
      return jQuery.param(this.serializeArray());
    },
    serializeArray: function serializeArray() {
      return this.map(function () {
        // Can add propHook for "elements" to filter or add form elements
        var elements = jQuery.prop(this, "elements");
        return elements ? jQuery.makeArray(elements) : this;
      }).filter(function () {
        var type = this.type; // Use .is( ":disabled" ) so that fieldset[disabled] works

        return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
      }).map(function (i, elem) {
        var val = jQuery(this).val();

        if (val == null) {
          return null;
        }

        if (Array.isArray(val)) {
          return jQuery.map(val, function (val) {
            return {
              name: elem.name,
              value: val.replace(rCRLF, "\r\n")
            };
          });
        }

        return {
          name: elem.name,
          value: val.replace(rCRLF, "\r\n")
        };
      }).get();
    }
  });
  jQuery.fn.extend({
    wrapAll: function wrapAll(html) {
      var wrap;

      if (this[0]) {
        if (isFunction(html)) {
          html = html.call(this[0]);
        } // The elements to wrap the target around


        wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);

        if (this[0].parentNode) {
          wrap.insertBefore(this[0]);
        }

        wrap.map(function () {
          var elem = this;

          while (elem.firstElementChild) {
            elem = elem.firstElementChild;
          }

          return elem;
        }).append(this);
      }

      return this;
    },
    wrapInner: function wrapInner(html) {
      if (isFunction(html)) {
        return this.each(function (i) {
          jQuery(this).wrapInner(html.call(this, i));
        });
      }

      return this.each(function () {
        var self = jQuery(this),
            contents = self.contents();

        if (contents.length) {
          contents.wrapAll(html);
        } else {
          self.append(html);
        }
      });
    },
    wrap: function wrap(html) {
      var htmlIsFunction = isFunction(html);
      return this.each(function (i) {
        jQuery(this).wrapAll(htmlIsFunction ? html.call(this, i) : html);
      });
    },
    unwrap: function unwrap(selector) {
      this.parent(selector).not("body").each(function () {
        jQuery(this).replaceWith(this.childNodes);
      });
      return this;
    }
  });

  jQuery.expr.pseudos.hidden = function (elem) {
    return !jQuery.expr.pseudos.visible(elem);
  };

  jQuery.expr.pseudos.visible = function (elem) {
    return !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);
  }; // Support: Safari 8 only
  // In Safari 8 documents created via document.implementation.createHTMLDocument
  // collapse sibling forms: the second one becomes a child of the first one.
  // Because of that, this security measure has to be disabled in Safari 8.
  // https://bugs.webkit.org/show_bug.cgi?id=137337


  support.createHTMLDocument = function () {
    var body = document.implementation.createHTMLDocument("").body;
    body.innerHTML = "<form></form><form></form>";
    return body.childNodes.length === 2;
  }(); // Argument "data" should be string of html
  // context (optional): If specified, the fragment will be created in this context,
  // defaults to document
  // keepScripts (optional): If true, will include scripts passed in the html string


  jQuery.parseHTML = function (data, context, keepScripts) {
    if (typeof data !== "string") {
      return [];
    }

    if (typeof context === "boolean") {
      keepScripts = context;
      context = false;
    }

    var base, parsed, scripts;

    if (!context) {
      // Stop scripts or inline event handlers from being executed immediately
      // by using document.implementation
      if (support.createHTMLDocument) {
        context = document.implementation.createHTMLDocument(""); // Set the base href for the created document
        // so any parsed elements with URLs
        // are based on the document's URL (gh-2965)

        base = context.createElement("base");
        base.href = document.location.href;
        context.head.appendChild(base);
      } else {
        context = document;
      }
    }

    parsed = rsingleTag.exec(data);
    scripts = !keepScripts && []; // Single tag

    if (parsed) {
      return [context.createElement(parsed[1])];
    }

    parsed = buildFragment([data], context, scripts);

    if (scripts && scripts.length) {
      jQuery(scripts).remove();
    }

    return jQuery.merge([], parsed.childNodes);
  };

  jQuery.offset = {
    setOffset: function setOffset(elem, options, i) {
      var curPosition,
          curLeft,
          curCSSTop,
          curTop,
          curOffset,
          curCSSLeft,
          calculatePosition,
          position = jQuery.css(elem, "position"),
          curElem = jQuery(elem),
          props = {}; // Set position first, in-case top/left are set even on static elem

      if (position === "static") {
        elem.style.position = "relative";
      }

      curOffset = curElem.offset();
      curCSSTop = jQuery.css(elem, "top");
      curCSSLeft = jQuery.css(elem, "left");
      calculatePosition = (position === "absolute" || position === "fixed") && (curCSSTop + curCSSLeft).indexOf("auto") > -1; // Need to be able to calculate position if either
      // top or left is auto and position is either absolute or fixed

      if (calculatePosition) {
        curPosition = curElem.position();
        curTop = curPosition.top;
        curLeft = curPosition.left;
      } else {
        curTop = parseFloat(curCSSTop) || 0;
        curLeft = parseFloat(curCSSLeft) || 0;
      }

      if (isFunction(options)) {
        // Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
        options = options.call(elem, i, jQuery.extend({}, curOffset));
      }

      if (options.top != null) {
        props.top = options.top - curOffset.top + curTop;
      }

      if (options.left != null) {
        props.left = options.left - curOffset.left + curLeft;
      }

      if ("using" in options) {
        options.using.call(elem, props);
      } else {
        curElem.css(props);
      }
    }
  };
  jQuery.fn.extend({
    // offset() relates an element's border box to the document origin
    offset: function offset(options) {
      // Preserve chaining for setter
      if (arguments.length) {
        return options === undefined ? this : this.each(function (i) {
          jQuery.offset.setOffset(this, options, i);
        });
      }

      var rect,
          win,
          elem = this[0];

      if (!elem) {
        return;
      } // Return zeros for disconnected and hidden (display: none) elements (gh-2310)
      // Support: IE <=11 only
      // Running getBoundingClientRect on a
      // disconnected node in IE throws an error


      if (!elem.getClientRects().length) {
        return {
          top: 0,
          left: 0
        };
      } // Get document-relative position by adding viewport scroll to viewport-relative gBCR


      rect = elem.getBoundingClientRect();
      win = elem.ownerDocument.defaultView;
      return {
        top: rect.top + win.pageYOffset,
        left: rect.left + win.pageXOffset
      };
    },
    // position() relates an element's margin box to its offset parent's padding box
    // This corresponds to the behavior of CSS absolute positioning
    position: function position() {
      if (!this[0]) {
        return;
      }

      var offsetParent,
          offset,
          doc,
          elem = this[0],
          parentOffset = {
        top: 0,
        left: 0
      }; // position:fixed elements are offset from the viewport, which itself always has zero offset

      if (jQuery.css(elem, "position") === "fixed") {
        // Assume position:fixed implies availability of getBoundingClientRect
        offset = elem.getBoundingClientRect();
      } else {
        offset = this.offset(); // Account for the *real* offset parent, which can be the document or its root element
        // when a statically positioned element is identified

        doc = elem.ownerDocument;
        offsetParent = elem.offsetParent || doc.documentElement;

        while (offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && jQuery.css(offsetParent, "position") === "static") {
          offsetParent = offsetParent.parentNode;
        }

        if (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {
          // Incorporate borders into its offset, since they are outside its content origin
          parentOffset = jQuery(offsetParent).offset();
          parentOffset.top += jQuery.css(offsetParent, "borderTopWidth", true);
          parentOffset.left += jQuery.css(offsetParent, "borderLeftWidth", true);
        }
      } // Subtract parent offsets and element margins


      return {
        top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
        left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
      };
    },
    // This method will return documentElement in the following cases:
    // 1) For the element inside the iframe without offsetParent, this method will return
    //    documentElement of the parent window
    // 2) For the hidden or detached element
    // 3) For body or html element, i.e. in case of the html node - it will return itself
    //
    // but those exceptions were never presented as a real life use-cases
    // and might be considered as more preferable results.
    //
    // This logic, however, is not guaranteed and can change at any point in the future
    offsetParent: function offsetParent() {
      return this.map(function () {
        var offsetParent = this.offsetParent;

        while (offsetParent && jQuery.css(offsetParent, "position") === "static") {
          offsetParent = offsetParent.offsetParent;
        }

        return offsetParent || documentElement;
      });
    }
  }); // Create scrollLeft and scrollTop methods

  jQuery.each({
    scrollLeft: "pageXOffset",
    scrollTop: "pageYOffset"
  }, function (method, prop) {
    var top = "pageYOffset" === prop;

    jQuery.fn[method] = function (val) {
      return access(this, function (elem, method, val) {
        // Coalesce documents and windows
        var win;

        if (isWindow(elem)) {
          win = elem;
        } else if (elem.nodeType === 9) {
          win = elem.defaultView;
        }

        if (val === undefined) {
          return win ? win[prop] : elem[method];
        }

        if (win) {
          win.scrollTo(!top ? val : win.pageXOffset, top ? val : win.pageYOffset);
        } else {
          elem[method] = val;
        }
      }, method, val, arguments.length);
    };
  }); // Support: Safari <=7 - 9.1, Chrome <=37 - 49
  // Add the top/left cssHooks using jQuery.fn.position
  // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
  // Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
  // getComputedStyle returns percent when specified for top/left/bottom/right;
  // rather than make the css module depend on the offset module, just check for it here

  jQuery.each(["top", "left"], function (i, prop) {
    jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {
      if (computed) {
        computed = curCSS(elem, prop); // If curCSS returns percentage, fallback to offset

        return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed;
      }
    });
  }); // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods

  jQuery.each({
    Height: "height",
    Width: "width"
  }, function (name, type) {
    jQuery.each({
      padding: "inner" + name,
      content: type,
      "": "outer" + name
    }, function (defaultExtra, funcName) {
      // Margin is only for outerHeight, outerWidth
      jQuery.fn[funcName] = function (margin, value) {
        var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"),
            extra = defaultExtra || (margin === true || value === true ? "margin" : "border");
        return access(this, function (elem, type, value) {
          var doc;

          if (isWindow(elem)) {
            // $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
            return funcName.indexOf("outer") === 0 ? elem["inner" + name] : elem.document.documentElement["client" + name];
          } // Get document width or height


          if (elem.nodeType === 9) {
            doc = elem.documentElement; // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
            // whichever is greatest

            return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);
          }

          return value === undefined ? // Get width or height on the element, requesting but not forcing parseFloat
          jQuery.css(elem, type, extra) : // Set width or height on the element
          jQuery.style(elem, type, value, extra);
        }, type, chainable ? margin : undefined, chainable);
      };
    });
  });
  jQuery.each(("blur focus focusin focusout resize scroll click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup contextmenu").split(" "), function (i, name) {
    // Handle event binding
    jQuery.fn[name] = function (data, fn) {
      return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
    };
  });
  jQuery.fn.extend({
    hover: function hover(fnOver, fnOut) {
      return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
    }
  });
  jQuery.fn.extend({
    bind: function bind(types, data, fn) {
      return this.on(types, null, data, fn);
    },
    unbind: function unbind(types, fn) {
      return this.off(types, null, fn);
    },
    delegate: function delegate(selector, types, data, fn) {
      return this.on(types, selector, data, fn);
    },
    undelegate: function undelegate(selector, types, fn) {
      // ( namespace ) or ( selector, types [, fn] )
      return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);
    }
  }); // Bind a function to a context, optionally partially applying any
  // arguments.
  // jQuery.proxy is deprecated to promote standards (specifically Function#bind)
  // However, it is not slated for removal any time soon

  jQuery.proxy = function (fn, context) {
    var tmp, args, proxy;

    if (typeof context === "string") {
      tmp = fn[context];
      context = fn;
      fn = tmp;
    } // Quick check to determine if target is callable, in the spec
    // this throws a TypeError, but we will just return undefined.


    if (!isFunction(fn)) {
      return undefined;
    } // Simulated bind


    args = _slice.call(arguments, 2);

    proxy = function proxy() {
      return fn.apply(context || this, args.concat(_slice.call(arguments)));
    }; // Set the guid of unique handler to the same of original handler, so it can be removed


    proxy.guid = fn.guid = fn.guid || jQuery.guid++;
    return proxy;
  };

  jQuery.holdReady = function (hold) {
    if (hold) {
      jQuery.readyWait++;
    } else {
      jQuery.ready(true);
    }
  };

  jQuery.isArray = Array.isArray;
  jQuery.parseJSON = JSON.parse;
  jQuery.nodeName = nodeName;
  jQuery.isFunction = isFunction;
  jQuery.isWindow = isWindow;
  jQuery.camelCase = camelCase;
  jQuery.type = toType;
  jQuery.now = Date.now;

  jQuery.isNumeric = function (obj) {
    // As of jQuery 3.0, isNumeric is limited to
    // strings and numbers (primitives or objects)
    // that can be coerced to finite numbers (gh-2662)
    var type = jQuery.type(obj);
    return (type === "number" || type === "string") && // parseFloat NaNs numeric-cast false positives ("")
    // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
    // subtraction forces infinities to NaN
    !isNaN(obj - parseFloat(obj));
  }; // Register as a named AMD module, since jQuery can be concatenated with other
  // files that may use define, but not via a proper concatenation script that
  // understands anonymous AMD modules. A named AMD is safest and most robust
  // way to register. Lowercase jquery is used because AMD module names are
  // derived from file names, and jQuery is normally delivered in a lowercase
  // file name. Do this after creating the global so that if an AMD module wants
  // to call noConflict to hide this version of jQuery, it will work.
  // Note that for maximum portability, libraries that are not jQuery should
  // declare themselves as anonymous modules, and avoid setting a global if an
  // AMD loader is present. jQuery is a special case. For more information, see
  // https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon


  if (typeof define === "function" && define.amd) {
    define("jquery", [], function () {
      return jQuery;
    });
  }

  var // Map over jQuery in case of overwrite
  _jQuery = window.jQuery,
      // Map over the $ in case of overwrite
  _$ = window.$;

  jQuery.noConflict = function (deep) {
    if (window.$ === jQuery) {
      window.$ = _$;
    }

    if (deep && window.jQuery === jQuery) {
      window.jQuery = _jQuery;
    }

    return jQuery;
  }; // Expose jQuery and $ identifiers, even in AMD
  // (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
  // and CommonJS for browser emulators (#13566)


  if (!noGlobal) {
    window.jQuery = window.$ = jQuery;
  }

  return jQuery;
});
/*
 AngularJS v1.7.8
 (c) 2010-2018 Google, Inc. http://angularjs.org
 License: MIT
*/


(function (C) {
  'use strict';

  function re(a) {
    if (D(a)) w(a.objectMaxDepth) && (Wb.objectMaxDepth = Xb(a.objectMaxDepth) ? a.objectMaxDepth : NaN), w(a.urlErrorParamsEnabled) && Ga(a.urlErrorParamsEnabled) && (Wb.urlErrorParamsEnabled = a.urlErrorParamsEnabled);else return Wb;
  }

  function Xb(a) {
    return W(a) && 0 < a;
  }

  function F(a, b) {
    b = b || Error;
    return function () {
      var d = arguments[0],
          c;
      c = "[" + (a ? a + ":" : "") + d + "] http://errors.angularjs.org/1.7.8/" + (a ? a + "/" : "") + d;

      for (d = 1; d < arguments.length; d++) {
        c = c + (1 == d ? "?" : "&") + "p" + (d - 1) + "=";
        var e = encodeURIComponent,
            f;
        f = arguments[d];
        f = "function" == typeof f ? f.toString().replace(/ \{[\s\S]*$/, "") : "undefined" == typeof f ? "undefined" : "string" != typeof f ? JSON.stringify(f) : f;
        c += e(f);
      }

      return new b(c);
    };
  }

  function ya(a) {
    if (null == a || $a(a)) return !1;
    if (H(a) || A(a) || x && a instanceof x) return !0;
    var b = "length" in Object(a) && a.length;
    return W(b) && (0 <= b && b - 1 in a || "function" === typeof a.item);
  }

  function r(a, b, d) {
    var c, e;
    if (a) if (B(a)) for (c in a) {
      "prototype" !== c && "length" !== c && "name" !== c && a.hasOwnProperty(c) && b.call(d, a[c], c, a);
    } else if (H(a) || ya(a)) {
      var f = "object" !== _typeof(a);

      c = 0;

      for (e = a.length; c < e; c++) {
        (f || c in a) && b.call(d, a[c], c, a);
      }
    } else if (a.forEach && a.forEach !== r) a.forEach(b, d, a);else if (Nc(a)) for (c in a) {
      b.call(d, a[c], c, a);
    } else if ("function" === typeof a.hasOwnProperty) for (c in a) {
      a.hasOwnProperty(c) && b.call(d, a[c], c, a);
    } else for (c in a) {
      ta.call(a, c) && b.call(d, a[c], c, a);
    }
    return a;
  }

  function Oc(a, b, d) {
    for (var c = Object.keys(a).sort(), e = 0; e < c.length; e++) {
      b.call(d, a[c[e]], c[e]);
    }

    return c;
  }

  function Yb(a) {
    return function (b, d) {
      a(d, b);
    };
  }

  function se() {
    return ++pb;
  }

  function Zb(a, b, d) {
    for (var c = a.$$hashKey, e = 0, f = b.length; e < f; ++e) {
      var g = b[e];
      if (D(g) || B(g)) for (var k = Object.keys(g), h = 0, l = k.length; h < l; h++) {
        var m = k[h],
            p = g[m];
        d && D(p) ? ha(p) ? a[m] = new Date(p.valueOf()) : ab(p) ? a[m] = new RegExp(p) : p.nodeName ? a[m] = p.cloneNode(!0) : $b(p) ? a[m] = p.clone() : (D(a[m]) || (a[m] = H(p) ? [] : {}), Zb(a[m], [p], !0)) : a[m] = p;
      }
    }

    c ? a.$$hashKey = c : delete a.$$hashKey;
    return a;
  }

  function S(a) {
    return Zb(a, Ha.call(arguments, 1), !1);
  }

  function te(a) {
    return Zb(a, Ha.call(arguments, 1), !0);
  }

  function fa(a) {
    return parseInt(a, 10);
  }

  function ac(a, b) {
    return S(Object.create(a), b);
  }

  function E() {}

  function Ta(a) {
    return a;
  }

  function ia(a) {
    return function () {
      return a;
    };
  }

  function bc(a) {
    return B(a.toString) && a.toString !== la;
  }

  function z(a) {
    return "undefined" === typeof a;
  }

  function w(a) {
    return "undefined" !== typeof a;
  }

  function D(a) {
    return null !== a && "object" === _typeof(a);
  }

  function Nc(a) {
    return null !== a && "object" === _typeof(a) && !Pc(a);
  }

  function A(a) {
    return "string" === typeof a;
  }

  function W(a) {
    return "number" === typeof a;
  }

  function ha(a) {
    return "[object Date]" === la.call(a);
  }

  function H(a) {
    return Array.isArray(a) || a instanceof Array;
  }

  function cc(a) {
    switch (la.call(a)) {
      case "[object Error]":
        return !0;

      case "[object Exception]":
        return !0;

      case "[object DOMException]":
        return !0;

      default:
        return a instanceof Error;
    }
  }

  function B(a) {
    return "function" === typeof a;
  }

  function ab(a) {
    return "[object RegExp]" === la.call(a);
  }

  function $a(a) {
    return a && a.window === a;
  }

  function bb(a) {
    return a && a.$evalAsync && a.$watch;
  }

  function Ga(a) {
    return "boolean" === typeof a;
  }

  function ue(a) {
    return a && W(a.length) && ve.test(la.call(a));
  }

  function $b(a) {
    return !(!a || !(a.nodeName || a.prop && a.attr && a.find));
  }

  function we(a) {
    var b = {};
    a = a.split(",");
    var d;

    for (d = 0; d < a.length; d++) {
      b[a[d]] = !0;
    }

    return b;
  }

  function ua(a) {
    return K(a.nodeName || a[0] && a[0].nodeName);
  }

  function cb(a, b) {
    var d = a.indexOf(b);
    0 <= d && a.splice(d, 1);
    return d;
  }

  function Ia(a, b, d) {
    function c(a, b, c) {
      c--;
      if (0 > c) return "...";
      var d = b.$$hashKey,
          f;

      if (H(a)) {
        f = 0;

        for (var g = a.length; f < g; f++) {
          b.push(e(a[f], c));
        }
      } else if (Nc(a)) for (f in a) {
        b[f] = e(a[f], c);
      } else if (a && "function" === typeof a.hasOwnProperty) for (f in a) {
        a.hasOwnProperty(f) && (b[f] = e(a[f], c));
      } else for (f in a) {
        ta.call(a, f) && (b[f] = e(a[f], c));
      }

      d ? b.$$hashKey = d : delete b.$$hashKey;
      return b;
    }

    function e(a, b) {
      if (!D(a)) return a;
      var d = g.indexOf(a);
      if (-1 !== d) return k[d];
      if ($a(a) || bb(a)) throw pa("cpws");
      var d = !1,
          e = f(a);
      void 0 === e && (e = H(a) ? [] : Object.create(Pc(a)), d = !0);
      g.push(a);
      k.push(e);
      return d ? c(a, e, b) : e;
    }

    function f(a) {
      switch (la.call(a)) {
        case "[object Int8Array]":
        case "[object Int16Array]":
        case "[object Int32Array]":
        case "[object Float32Array]":
        case "[object Float64Array]":
        case "[object Uint8Array]":
        case "[object Uint8ClampedArray]":
        case "[object Uint16Array]":
        case "[object Uint32Array]":
          return new a.constructor(e(a.buffer), a.byteOffset, a.length);

        case "[object ArrayBuffer]":
          if (!a.slice) {
            var b = new ArrayBuffer(a.byteLength);
            new Uint8Array(b).set(new Uint8Array(a));
            return b;
          }

          return a.slice(0);

        case "[object Boolean]":
        case "[object Number]":
        case "[object String]":
        case "[object Date]":
          return new a.constructor(a.valueOf());

        case "[object RegExp]":
          return b = new RegExp(a.source, a.toString().match(/[^/]*$/)[0]), b.lastIndex = a.lastIndex, b;

        case "[object Blob]":
          return new a.constructor([a], {
            type: a.type
          });
      }

      if (B(a.cloneNode)) return a.cloneNode(!0);
    }

    var g = [],
        k = [];
    d = Xb(d) ? d : NaN;

    if (b) {
      if (ue(b) || "[object ArrayBuffer]" === la.call(b)) throw pa("cpta");
      if (a === b) throw pa("cpi");
      H(b) ? b.length = 0 : r(b, function (a, c) {
        "$$hashKey" !== c && delete b[c];
      });
      g.push(a);
      k.push(b);
      return c(a, b, d);
    }

    return e(a, d);
  }

  function dc(a, b) {
    return a === b || a !== a && b !== b;
  }

  function va(a, b) {
    if (a === b) return !0;
    if (null === a || null === b) return !1;
    if (a !== a && b !== b) return !0;

    var d = _typeof(a),
        c;

    if (d === _typeof(b) && "object" === d) if (H(a)) {
      if (!H(b)) return !1;

      if ((d = a.length) === b.length) {
        for (c = 0; c < d; c++) {
          if (!va(a[c], b[c])) return !1;
        }

        return !0;
      }
    } else {
      if (ha(a)) return ha(b) ? dc(a.getTime(), b.getTime()) : !1;
      if (ab(a)) return ab(b) ? a.toString() === b.toString() : !1;
      if (bb(a) || bb(b) || $a(a) || $a(b) || H(b) || ha(b) || ab(b)) return !1;
      d = T();

      for (c in a) {
        if ("$" !== c.charAt(0) && !B(a[c])) {
          if (!va(a[c], b[c])) return !1;
          d[c] = !0;
        }
      }

      for (c in b) {
        if (!(c in d) && "$" !== c.charAt(0) && w(b[c]) && !B(b[c])) return !1;
      }

      return !0;
    }
    return !1;
  }

  function db(a, b, d) {
    return a.concat(Ha.call(b, d));
  }

  function Va(a, b) {
    var d = 2 < arguments.length ? Ha.call(arguments, 2) : [];
    return !B(b) || b instanceof RegExp ? b : d.length ? function () {
      return arguments.length ? b.apply(a, db(d, arguments, 0)) : b.apply(a, d);
    } : function () {
      return arguments.length ? b.apply(a, arguments) : b.call(a);
    };
  }

  function Qc(a, b) {
    var d = b;
    "string" === typeof a && "$" === a.charAt(0) && "$" === a.charAt(1) ? d = void 0 : $a(b) ? d = "$WINDOW" : b && C.document === b ? d = "$DOCUMENT" : bb(b) && (d = "$SCOPE");
    return d;
  }

  function eb(a, b) {
    if (!z(a)) return W(b) || (b = b ? 2 : null), JSON.stringify(a, Qc, b);
  }

  function Rc(a) {
    return A(a) ? JSON.parse(a) : a;
  }

  function ec(a, b) {
    a = a.replace(xe, "");
    var d = Date.parse("Jan 01, 1970 00:00:00 " + a) / 6E4;
    return X(d) ? b : d;
  }

  function Sc(a, b) {
    a = new Date(a.getTime());
    a.setMinutes(a.getMinutes() + b);
    return a;
  }

  function fc(a, b, d) {
    d = d ? -1 : 1;
    var c = a.getTimezoneOffset();
    b = ec(b, c);
    return Sc(a, d * (b - c));
  }

  function za(a) {
    a = x(a).clone().empty();
    var b = x("<div></div>").append(a).html();

    try {
      return a[0].nodeType === Pa ? K(b) : b.match(/^(<[^>]+>)/)[1].replace(/^<([\w-]+)/, function (a, b) {
        return "<" + K(b);
      });
    } catch (d) {
      return K(b);
    }
  }

  function Tc(a) {
    try {
      return decodeURIComponent(a);
    } catch (b) {}
  }

  function gc(a) {
    var b = {};
    r((a || "").split("&"), function (a) {
      var c, e, f;
      a && (e = a = a.replace(/\+/g, "%20"), c = a.indexOf("="), -1 !== c && (e = a.substring(0, c), f = a.substring(c + 1)), e = Tc(e), w(e) && (f = w(f) ? Tc(f) : !0, ta.call(b, e) ? H(b[e]) ? b[e].push(f) : b[e] = [b[e], f] : b[e] = f));
    });
    return b;
  }

  function ye(a) {
    var b = [];
    r(a, function (a, c) {
      H(a) ? r(a, function (a) {
        b.push(ba(c, !0) + (!0 === a ? "" : "=" + ba(a, !0)));
      }) : b.push(ba(c, !0) + (!0 === a ? "" : "=" + ba(a, !0)));
    });
    return b.length ? b.join("&") : "";
  }

  function hc(a) {
    return ba(a, !0).replace(/%26/gi, "&").replace(/%3D/gi, "=").replace(/%2B/gi, "+");
  }

  function ba(a, b) {
    return encodeURIComponent(a).replace(/%40/gi, "@").replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%3B/gi, ";").replace(/%20/g, b ? "%20" : "+");
  }

  function ze(a, b) {
    var d,
        c,
        e = Qa.length;

    for (c = 0; c < e; ++c) {
      if (d = Qa[c] + b, A(d = a.getAttribute(d))) return d;
    }

    return null;
  }

  function Ae(a, b) {
    var d,
        c,
        e = {};
    r(Qa, function (b) {
      b += "app";
      !d && a.hasAttribute && a.hasAttribute(b) && (d = a, c = a.getAttribute(b));
    });
    r(Qa, function (b) {
      b += "app";
      var e;
      !d && (e = a.querySelector("[" + b.replace(":", "\\:") + "]")) && (d = e, c = e.getAttribute(b));
    });
    d && (Be ? (e.strictDi = null !== ze(d, "strict-di"), b(d, c ? [c] : [], e)) : C.console.error("AngularJS: disabling automatic bootstrap. <script> protocol indicates an extension, document.location.href does not match."));
  }

  function Uc(a, b, d) {
    D(d) || (d = {});
    d = S({
      strictDi: !1
    }, d);

    var c = function c() {
      a = x(a);

      if (a.injector()) {
        var c = a[0] === C.document ? "document" : za(a);
        throw pa("btstrpd", c.replace(/</, "&lt;").replace(/>/, "&gt;"));
      }

      b = b || [];
      b.unshift(["$provide", function (b) {
        b.value("$rootElement", a);
      }]);
      d.debugInfoEnabled && b.push(["$compileProvider", function (a) {
        a.debugInfoEnabled(!0);
      }]);
      b.unshift("ng");
      c = fb(b, d.strictDi);
      c.invoke(["$rootScope", "$rootElement", "$compile", "$injector", function (a, b, c, d) {
        a.$apply(function () {
          b.data("$injector", d);
          c(b)(a);
        });
      }]);
      return c;
    },
        e = /^NG_ENABLE_DEBUG_INFO!/,
        f = /^NG_DEFER_BOOTSTRAP!/;

    C && e.test(C.name) && (d.debugInfoEnabled = !0, C.name = C.name.replace(e, ""));
    if (C && !f.test(C.name)) return c();
    C.name = C.name.replace(f, "");

    ca.resumeBootstrap = function (a) {
      r(a, function (a) {
        b.push(a);
      });
      return c();
    };

    B(ca.resumeDeferredBootstrap) && ca.resumeDeferredBootstrap();
  }

  function Ce() {
    C.name = "NG_ENABLE_DEBUG_INFO!" + C.name;
    C.location.reload();
  }

  function De(a) {
    a = ca.element(a).injector();
    if (!a) throw pa("test");
    return a.get("$$testability");
  }

  function Vc(a, b) {
    b = b || "_";
    return a.replace(Ee, function (a, c) {
      return (c ? b : "") + a.toLowerCase();
    });
  }

  function Fe() {
    var a;

    if (!Wc) {
      var b = qb();
      (rb = z(b) ? C.jQuery : b ? C[b] : void 0) && rb.fn.on ? (x = rb, S(rb.fn, {
        scope: Wa.scope,
        isolateScope: Wa.isolateScope,
        controller: Wa.controller,
        injector: Wa.injector,
        inheritedData: Wa.inheritedData
      })) : x = Y;
      a = x.cleanData;

      x.cleanData = function (b) {
        for (var c, e = 0, f; null != (f = b[e]); e++) {
          (c = (x._data(f) || {}).events) && c.$destroy && x(f).triggerHandler("$destroy");
        }

        a(b);
      };

      ca.element = x;
      Wc = !0;
    }
  }

  function gb(a, b, d) {
    if (!a) throw pa("areq", b || "?", d || "required");
    return a;
  }

  function sb(a, b, d) {
    d && H(a) && (a = a[a.length - 1]);
    gb(B(a), b, "not a function, got " + (a && "object" === _typeof(a) ? a.constructor.name || "Object" : _typeof(a)));
    return a;
  }

  function Ja(a, b) {
    if ("hasOwnProperty" === a) throw pa("badname", b);
  }

  function Ge(a, b, d) {
    if (!b) return a;
    b = b.split(".");

    for (var c, e = a, f = b.length, g = 0; g < f; g++) {
      c = b[g], a && (a = (e = a)[c]);
    }

    return !d && B(a) ? Va(e, a) : a;
  }

  function tb(a) {
    for (var b = a[0], d = a[a.length - 1], c, e = 1; b !== d && (b = b.nextSibling); e++) {
      if (c || a[e] !== b) c || (c = x(Ha.call(a, 0, e))), c.push(b);
    }

    return c || a;
  }

  function T() {
    return Object.create(null);
  }

  function ic(a) {
    if (null == a) return "";

    switch (_typeof(a)) {
      case "string":
        break;

      case "number":
        a = "" + a;
        break;

      default:
        a = !bc(a) || H(a) || ha(a) ? eb(a) : a.toString();
    }

    return a;
  }

  function He(a) {
    function b(a, b, c) {
      return a[b] || (a[b] = c());
    }

    var d = F("$injector"),
        c = F("ng");
    a = b(a, "angular", Object);
    a.$$minErr = a.$$minErr || F;
    return b(a, "module", function () {
      var a = {};
      return function (f, g, k) {
        var h = {};
        if ("hasOwnProperty" === f) throw c("badname", "module");
        g && a.hasOwnProperty(f) && (a[f] = null);
        return b(a, f, function () {
          function a(b, c, d, f) {
            f || (f = e);
            return function () {
              f[d || "push"]([b, c, arguments]);
              return t;
            };
          }

          function b(a, c, d) {
            d || (d = e);
            return function (b, e) {
              e && B(e) && (e.$$moduleName = f);
              d.push([a, c, arguments]);
              return t;
            };
          }

          if (!g) throw d("nomod", f);
          var e = [],
              n = [],
              s = [],
              G = a("$injector", "invoke", "push", n),
              t = {
            _invokeQueue: e,
            _configBlocks: n,
            _runBlocks: s,
            info: function info(a) {
              if (w(a)) {
                if (!D(a)) throw c("aobj", "value");
                h = a;
                return this;
              }

              return h;
            },
            requires: g,
            name: f,
            provider: b("$provide", "provider"),
            factory: b("$provide", "factory"),
            service: b("$provide", "service"),
            value: a("$provide", "value"),
            constant: a("$provide", "constant", "unshift"),
            decorator: b("$provide", "decorator", n),
            animation: b("$animateProvider", "register"),
            filter: b("$filterProvider", "register"),
            controller: b("$controllerProvider", "register"),
            directive: b("$compileProvider", "directive"),
            component: b("$compileProvider", "component"),
            config: G,
            run: function run(a) {
              s.push(a);
              return this;
            }
          };
          k && G(k);
          return t;
        });
      };
    });
  }

  function ja(a, b) {
    if (H(a)) {
      b = b || [];

      for (var d = 0, c = a.length; d < c; d++) {
        b[d] = a[d];
      }
    } else if (D(a)) for (d in b = b || {}, a) {
      if ("$" !== d.charAt(0) || "$" !== d.charAt(1)) b[d] = a[d];
    }

    return b || a;
  }

  function Ie(a, b) {
    var d = [];
    Xb(b) && (a = ca.copy(a, null, b));
    return JSON.stringify(a, function (a, b) {
      b = Qc(a, b);

      if (D(b)) {
        if (0 <= d.indexOf(b)) return "...";
        d.push(b);
      }

      return b;
    });
  }

  function Je(a) {
    S(a, {
      errorHandlingConfig: re,
      bootstrap: Uc,
      copy: Ia,
      extend: S,
      merge: te,
      equals: va,
      element: x,
      forEach: r,
      injector: fb,
      noop: E,
      bind: Va,
      toJson: eb,
      fromJson: Rc,
      identity: Ta,
      isUndefined: z,
      isDefined: w,
      isString: A,
      isFunction: B,
      isObject: D,
      isNumber: W,
      isElement: $b,
      isArray: H,
      version: Ke,
      isDate: ha,
      callbacks: {
        $$counter: 0
      },
      getTestability: De,
      reloadWithDebugInfo: Ce,
      $$minErr: F,
      $$csp: Aa,
      $$encodeUriSegment: hc,
      $$encodeUriQuery: ba,
      $$lowercase: K,
      $$stringify: ic,
      $$uppercase: ub
    });
    kc = He(C);
    kc("ng", ["ngLocale"], ["$provide", function (a) {
      a.provider({
        $$sanitizeUri: Le
      });
      a.provider("$compile", Xc).directive({
        a: Me,
        input: Yc,
        textarea: Yc,
        form: Ne,
        script: Oe,
        select: Pe,
        option: Qe,
        ngBind: Re,
        ngBindHtml: Se,
        ngBindTemplate: Te,
        ngClass: Ue,
        ngClassEven: Ve,
        ngClassOdd: We,
        ngCloak: Xe,
        ngController: Ye,
        ngForm: Ze,
        ngHide: $e,
        ngIf: af,
        ngInclude: bf,
        ngInit: cf,
        ngNonBindable: df,
        ngPluralize: ef,
        ngRef: ff,
        ngRepeat: gf,
        ngShow: hf,
        ngStyle: jf,
        ngSwitch: kf,
        ngSwitchWhen: lf,
        ngSwitchDefault: mf,
        ngOptions: nf,
        ngTransclude: of,
        ngModel: pf,
        ngList: qf,
        ngChange: rf,
        pattern: Zc,
        ngPattern: Zc,
        required: $c,
        ngRequired: $c,
        minlength: ad,
        ngMinlength: ad,
        maxlength: bd,
        ngMaxlength: bd,
        ngValue: sf,
        ngModelOptions: tf
      }).directive({
        ngInclude: uf,
        input: vf
      }).directive(vb).directive(cd);
      a.provider({
        $anchorScroll: wf,
        $animate: xf,
        $animateCss: yf,
        $$animateJs: zf,
        $$animateQueue: Af,
        $$AnimateRunner: Bf,
        $$animateAsyncRun: Cf,
        $browser: Df,
        $cacheFactory: Ef,
        $controller: Ff,
        $document: Gf,
        $$isDocumentHidden: Hf,
        $exceptionHandler: If,
        $filter: dd,
        $$forceReflow: Jf,
        $interpolate: Kf,
        $interval: Lf,
        $$intervalFactory: Mf,
        $http: Nf,
        $httpParamSerializer: Of,
        $httpParamSerializerJQLike: Pf,
        $httpBackend: Qf,
        $xhrFactory: Rf,
        $jsonpCallbacks: Sf,
        $location: Tf,
        $log: Uf,
        $parse: Vf,
        $rootScope: Wf,
        $q: Xf,
        $$q: Yf,
        $sce: Zf,
        $sceDelegate: $f,
        $sniffer: ag,
        $$taskTrackerFactory: bg,
        $templateCache: cg,
        $templateRequest: dg,
        $$testability: eg,
        $timeout: fg,
        $window: gg,
        $$rAF: hg,
        $$jqLite: ig,
        $$Map: jg,
        $$cookieReader: kg
      });
    }]).info({
      angularVersion: "1.7.8"
    });
  }

  function wb(a, b) {
    return b.toUpperCase();
  }

  function xb(a) {
    return a.replace(lg, wb);
  }

  function lc(a) {
    a = a.nodeType;
    return 1 === a || !a || 9 === a;
  }

  function ed(a, b) {
    var d,
        c,
        e = b.createDocumentFragment(),
        f = [];

    if (mc.test(a)) {
      d = e.appendChild(b.createElement("div"));
      c = (mg.exec(a) || ["", ""])[1].toLowerCase();
      c = oa[c] || oa._default;
      d.innerHTML = c[1] + a.replace(ng, "<$1></$2>") + c[2];

      for (c = c[0]; c--;) {
        d = d.lastChild;
      }

      f = db(f, d.childNodes);
      d = e.firstChild;
      d.textContent = "";
    } else f.push(b.createTextNode(a));

    e.textContent = "";
    e.innerHTML = "";
    r(f, function (a) {
      e.appendChild(a);
    });
    return e;
  }

  function Y(a) {
    if (a instanceof Y) return a;
    var b;
    A(a) && (a = U(a), b = !0);

    if (!(this instanceof Y)) {
      if (b && "<" !== a.charAt(0)) throw nc("nosel");
      return new Y(a);
    }

    if (b) {
      b = C.document;
      var d;
      a = (d = og.exec(a)) ? [b.createElement(d[1])] : (d = ed(a, b)) ? d.childNodes : [];
      oc(this, a);
    } else B(a) ? fd(a) : oc(this, a);
  }

  function pc(a) {
    return a.cloneNode(!0);
  }

  function yb(a, b) {
    !b && lc(a) && x.cleanData([a]);
    a.querySelectorAll && x.cleanData(a.querySelectorAll("*"));
  }

  function gd(a) {
    for (var b in a) {
      return !1;
    }

    return !0;
  }

  function hd(a) {
    var b = a.ng339,
        d = b && Ka[b],
        c = d && d.events,
        d = d && d.data;
    d && !gd(d) || c && !gd(c) || (delete Ka[b], a.ng339 = void 0);
  }

  function id(a, b, d, c) {
    if (w(c)) throw nc("offargs");
    var e = (c = zb(a)) && c.events,
        f = c && c.handle;

    if (f) {
      if (b) {
        var g = function g(b) {
          var c = e[b];
          w(d) && cb(c || [], d);
          w(d) && c && 0 < c.length || (a.removeEventListener(b, f), delete e[b]);
        };

        r(b.split(" "), function (a) {
          g(a);
          Ab[a] && g(Ab[a]);
        });
      } else for (b in e) {
        "$destroy" !== b && a.removeEventListener(b, f), delete e[b];
      }

      hd(a);
    }
  }

  function qc(a, b) {
    var d = a.ng339;
    if (d = d && Ka[d]) b ? delete d.data[b] : d.data = {}, hd(a);
  }

  function zb(a, b) {
    var d = a.ng339,
        d = d && Ka[d];
    b && !d && (a.ng339 = d = ++pg, d = Ka[d] = {
      events: {},
      data: {},
      handle: void 0
    });
    return d;
  }

  function rc(a, b, d) {
    if (lc(a)) {
      var c,
          e = w(d),
          f = !e && b && !D(b),
          g = !b;
      a = (a = zb(a, !f)) && a.data;
      if (e) a[xb(b)] = d;else {
        if (g) return a;
        if (f) return a && a[xb(b)];

        for (c in b) {
          a[xb(c)] = b[c];
        }
      }
    }
  }

  function Bb(a, b) {
    return a.getAttribute ? -1 < (" " + (a.getAttribute("class") || "") + " ").replace(/[\n\t]/g, " ").indexOf(" " + b + " ") : !1;
  }

  function Cb(a, b) {
    if (b && a.setAttribute) {
      var d = (" " + (a.getAttribute("class") || "") + " ").replace(/[\n\t]/g, " "),
          c = d;
      r(b.split(" "), function (a) {
        a = U(a);
        c = c.replace(" " + a + " ", " ");
      });
      c !== d && a.setAttribute("class", U(c));
    }
  }

  function Db(a, b) {
    if (b && a.setAttribute) {
      var d = (" " + (a.getAttribute("class") || "") + " ").replace(/[\n\t]/g, " "),
          c = d;
      r(b.split(" "), function (a) {
        a = U(a);
        -1 === c.indexOf(" " + a + " ") && (c += a + " ");
      });
      c !== d && a.setAttribute("class", U(c));
    }
  }

  function oc(a, b) {
    if (b) if (b.nodeType) a[a.length++] = b;else {
      var d = b.length;

      if ("number" === typeof d && b.window !== b) {
        if (d) for (var c = 0; c < d; c++) {
          a[a.length++] = b[c];
        }
      } else a[a.length++] = b;
    }
  }

  function jd(a, b) {
    return Eb(a, "$" + (b || "ngController") + "Controller");
  }

  function Eb(a, b, d) {
    9 === a.nodeType && (a = a.documentElement);

    for (b = H(b) ? b : [b]; a;) {
      for (var c = 0, e = b.length; c < e; c++) {
        if (w(d = x.data(a, b[c]))) return d;
      }

      a = a.parentNode || 11 === a.nodeType && a.host;
    }
  }

  function kd(a) {
    for (yb(a, !0); a.firstChild;) {
      a.removeChild(a.firstChild);
    }
  }

  function Fb(a, b) {
    b || yb(a);
    var d = a.parentNode;
    d && d.removeChild(a);
  }

  function qg(a, b) {
    b = b || C;
    if ("complete" === b.document.readyState) b.setTimeout(a);else x(b).on("load", a);
  }

  function fd(a) {
    function b() {
      C.document.removeEventListener("DOMContentLoaded", b);
      C.removeEventListener("load", b);
      a();
    }

    "complete" === C.document.readyState ? C.setTimeout(a) : (C.document.addEventListener("DOMContentLoaded", b), C.addEventListener("load", b));
  }

  function ld(a, b) {
    var d = Gb[b.toLowerCase()];
    return d && md[ua(a)] && d;
  }

  function rg(a, b) {
    var d = function d(c, _d) {
      c.isDefaultPrevented = function () {
        return c.defaultPrevented;
      };

      var f = b[_d || c.type],
          g = f ? f.length : 0;

      if (g) {
        if (z(c.immediatePropagationStopped)) {
          var k = c.stopImmediatePropagation;

          c.stopImmediatePropagation = function () {
            c.immediatePropagationStopped = !0;
            c.stopPropagation && c.stopPropagation();
            k && k.call(c);
          };
        }

        c.isImmediatePropagationStopped = function () {
          return !0 === c.immediatePropagationStopped;
        };

        var h = f.specialHandlerWrapper || sg;
        1 < g && (f = ja(f));

        for (var l = 0; l < g; l++) {
          c.isImmediatePropagationStopped() || h(a, c, f[l]);
        }
      }
    };

    d.elem = a;
    return d;
  }

  function sg(a, b, d) {
    d.call(a, b);
  }

  function tg(a, b, d) {
    var c = b.relatedTarget;
    c && (c === a || ug.call(a, c)) || d.call(a, b);
  }

  function ig() {
    this.$get = function () {
      return S(Y, {
        hasClass: function hasClass(a, b) {
          a.attr && (a = a[0]);
          return Bb(a, b);
        },
        addClass: function addClass(a, b) {
          a.attr && (a = a[0]);
          return Db(a, b);
        },
        removeClass: function removeClass(a, b) {
          a.attr && (a = a[0]);
          return Cb(a, b);
        }
      });
    };
  }

  function La(a, b) {
    var d = a && a.$$hashKey;
    if (d) return "function" === typeof d && (d = a.$$hashKey()), d;
    d = _typeof(a);
    return d = "function" === d || "object" === d && null !== a ? a.$$hashKey = d + ":" + (b || se)() : d + ":" + a;
  }

  function nd() {
    this._keys = [];
    this._values = [];
    this._lastKey = NaN;
    this._lastIndex = -1;
  }

  function od(a) {
    a = Function.prototype.toString.call(a).replace(vg, "");
    return a.match(wg) || a.match(xg);
  }

  function yg(a) {
    return (a = od(a)) ? "function(" + (a[1] || "").replace(/[\s\r\n]+/, " ") + ")" : "fn";
  }

  function fb(a, b) {
    function d(a) {
      return function (b, c) {
        if (D(b)) r(b, Yb(a));else return a(b, c);
      };
    }

    function c(a, b) {
      Ja(a, "service");
      if (B(b) || H(b)) b = n.instantiate(b);
      if (!b.$get) throw Ba("pget", a);
      return p[a + "Provider"] = b;
    }

    function e(a, b) {
      return function () {
        var c = t.invoke(b, this);
        if (z(c)) throw Ba("undef", a);
        return c;
      };
    }

    function f(a, b, d) {
      return c(a, {
        $get: !1 !== d ? e(a, b) : b
      });
    }

    function g(a) {
      gb(z(a) || H(a), "modulesToLoad", "not an array");
      var b = [],
          c;
      r(a, function (a) {
        function d(a) {
          var b, c;
          b = 0;

          for (c = a.length; b < c; b++) {
            var e = a[b],
                f = n.get(e[0]);
            f[e[1]].apply(f, e[2]);
          }
        }

        if (!m.get(a)) {
          m.set(a, !0);

          try {
            A(a) ? (c = kc(a), t.modules[a] = c, b = b.concat(g(c.requires)).concat(c._runBlocks), d(c._invokeQueue), d(c._configBlocks)) : B(a) ? b.push(n.invoke(a)) : H(a) ? b.push(n.invoke(a)) : sb(a, "module");
          } catch (e) {
            throw H(a) && (a = a[a.length - 1]), e.message && e.stack && -1 === e.stack.indexOf(e.message) && (e = e.message + "\n" + e.stack), Ba("modulerr", a, e.stack || e.message || e);
          }
        }
      });
      return b;
    }

    function k(a, c) {
      function d(b, e) {
        if (a.hasOwnProperty(b)) {
          if (a[b] === h) throw Ba("cdep", b + " <- " + l.join(" <- "));
          return a[b];
        }

        try {
          return l.unshift(b), a[b] = h, a[b] = c(b, e), a[b];
        } catch (f) {
          throw a[b] === h && delete a[b], f;
        } finally {
          l.shift();
        }
      }

      function e(a, c, f) {
        var g = [];
        a = fb.$$annotate(a, b, f);

        for (var h = 0, k = a.length; h < k; h++) {
          var l = a[h];
          if ("string" !== typeof l) throw Ba("itkn", l);
          g.push(c && c.hasOwnProperty(l) ? c[l] : d(l, f));
        }

        return g;
      }

      return {
        invoke: function invoke(a, b, c, d) {
          "string" === typeof c && (d = c, c = null);
          c = e(a, c, d);
          H(a) && (a = a[a.length - 1]);
          d = a;
          if (Ca || "function" !== typeof d) d = !1;else {
            var f = d.$$ngIsClass;
            Ga(f) || (f = d.$$ngIsClass = /^class\b/.test(Function.prototype.toString.call(d)));
            d = f;
          }
          return d ? (c.unshift(null), new (Function.prototype.bind.apply(a, c))()) : a.apply(b, c);
        },
        instantiate: function instantiate(a, b, c) {
          var d = H(a) ? a[a.length - 1] : a;
          a = e(a, b, c);
          a.unshift(null);
          return new (Function.prototype.bind.apply(d, a))();
        },
        get: d,
        annotate: fb.$$annotate,
        has: function has(b) {
          return p.hasOwnProperty(b + "Provider") || a.hasOwnProperty(b);
        }
      };
    }

    b = !0 === b;
    var h = {},
        l = [],
        m = new Hb(),
        p = {
      $provide: {
        provider: d(c),
        factory: d(f),
        service: d(function (a, b) {
          return f(a, ["$injector", function (a) {
            return a.instantiate(b);
          }]);
        }),
        value: d(function (a, b) {
          return f(a, ia(b), !1);
        }),
        constant: d(function (a, b) {
          Ja(a, "constant");
          p[a] = b;
          s[a] = b;
        }),
        decorator: function decorator(a, b) {
          var c = n.get(a + "Provider"),
              d = c.$get;

          c.$get = function () {
            var a = t.invoke(d, c);
            return t.invoke(b, null, {
              $delegate: a
            });
          };
        }
      }
    },
        n = p.$injector = k(p, function (a, b) {
      ca.isString(b) && l.push(b);
      throw Ba("unpr", l.join(" <- "));
    }),
        s = {},
        G = k(s, function (a, b) {
      var c = n.get(a + "Provider", b);
      return t.invoke(c.$get, c, void 0, a);
    }),
        t = G;
    p.$injectorProvider = {
      $get: ia(G)
    };
    t.modules = n.modules = T();
    var N = g(a),
        t = G.get("$injector");
    t.strictDi = b;
    r(N, function (a) {
      a && t.invoke(a);
    });

    t.loadNewModules = function (a) {
      r(g(a), function (a) {
        a && t.invoke(a);
      });
    };

    return t;
  }

  function wf() {
    var a = !0;

    this.disableAutoScrolling = function () {
      a = !1;
    };

    this.$get = ["$window", "$location", "$rootScope", function (b, d, c) {
      function e(a) {
        var b = null;
        Array.prototype.some.call(a, function (a) {
          if ("a" === ua(a)) return b = a, !0;
        });
        return b;
      }

      function f(a) {
        if (a) {
          a.scrollIntoView();
          var c;
          c = g.yOffset;
          B(c) ? c = c() : $b(c) ? (c = c[0], c = "fixed" !== b.getComputedStyle(c).position ? 0 : c.getBoundingClientRect().bottom) : W(c) || (c = 0);
          c && (a = a.getBoundingClientRect().top, b.scrollBy(0, a - c));
        } else b.scrollTo(0, 0);
      }

      function g(a) {
        a = A(a) ? a : W(a) ? a.toString() : d.hash();
        var b;
        a ? (b = k.getElementById(a)) ? f(b) : (b = e(k.getElementsByName(a))) ? f(b) : "top" === a && f(null) : f(null);
      }

      var k = b.document;
      a && c.$watch(function () {
        return d.hash();
      }, function (a, b) {
        a === b && "" === a || qg(function () {
          c.$evalAsync(g);
        });
      });
      return g;
    }];
  }

  function hb(a, b) {
    if (!a && !b) return "";
    if (!a) return b;
    if (!b) return a;
    H(a) && (a = a.join(" "));
    H(b) && (b = b.join(" "));
    return a + " " + b;
  }

  function zg(a) {
    A(a) && (a = a.split(" "));
    var b = T();
    r(a, function (a) {
      a.length && (b[a] = !0);
    });
    return b;
  }

  function ra(a) {
    return D(a) ? a : {};
  }

  function Ag(a, b, d, c, e) {
    function f() {
      qa = null;
      k();
    }

    function g() {
      t = y();
      t = z(t) ? null : t;
      va(t, P) && (t = P);
      N = P = t;
    }

    function k() {
      var a = N;
      g();
      if (v !== h.url() || a !== t) v = h.url(), N = t, r(J, function (a) {
        a(h.url(), t);
      });
    }

    var h = this,
        l = a.location,
        m = a.history,
        p = a.setTimeout,
        n = a.clearTimeout,
        s = {},
        G = e(d);
    h.isMock = !1;
    h.$$completeOutstandingRequest = G.completeTask;
    h.$$incOutstandingRequestCount = G.incTaskCount;
    h.notifyWhenNoOutstandingRequests = G.notifyWhenNoPendingTasks;
    var t,
        N,
        v = l.href,
        jc = b.find("base"),
        qa = null,
        y = c.history ? function () {
      try {
        return m.state;
      } catch (a) {}
    } : E;
    g();

    h.url = function (b, d, e) {
      z(e) && (e = null);
      l !== a.location && (l = a.location);
      m !== a.history && (m = a.history);

      if (b) {
        var f = N === e;
        b = ga(b).href;
        if (v === b && (!c.history || f)) return h;
        var k = v && Da(v) === Da(b);
        v = b;
        N = e;
        !c.history || k && f ? (k || (qa = b), d ? l.replace(b) : k ? (d = l, e = b, f = e.indexOf("#"), e = -1 === f ? "" : e.substr(f), d.hash = e) : l.href = b, l.href !== b && (qa = b)) : (m[d ? "replaceState" : "pushState"](e, "", b), g());
        qa && (qa = b);
        return h;
      }

      return (qa || l.href).replace(/#$/, "");
    };

    h.state = function () {
      return t;
    };

    var J = [],
        I = !1,
        P = null;

    h.onUrlChange = function (b) {
      if (!I) {
        if (c.history) x(a).on("popstate", f);
        x(a).on("hashchange", f);
        I = !0;
      }

      J.push(b);
      return b;
    };

    h.$$applicationDestroyed = function () {
      x(a).off("hashchange popstate", f);
    };

    h.$$checkUrlChange = k;

    h.baseHref = function () {
      var a = jc.attr("href");
      return a ? a.replace(/^(https?:)?\/\/[^/]*/, "") : "";
    };

    h.defer = function (a, b, c) {
      var d;
      b = b || 0;
      c = c || G.DEFAULT_TASK_TYPE;
      G.incTaskCount(c);
      d = p(function () {
        delete s[d];
        G.completeTask(a, c);
      }, b);
      s[d] = c;
      return d;
    };

    h.defer.cancel = function (a) {
      if (s.hasOwnProperty(a)) {
        var b = s[a];
        delete s[a];
        n(a);
        G.completeTask(E, b);
        return !0;
      }

      return !1;
    };
  }

  function Df() {
    this.$get = ["$window", "$log", "$sniffer", "$document", "$$taskTrackerFactory", function (a, b, d, c, e) {
      return new Ag(a, c, b, d, e);
    }];
  }

  function Ef() {
    this.$get = function () {
      function a(a, c) {
        function e(a) {
          a !== p && (n ? n === a && (n = a.n) : n = a, f(a.n, a.p), f(a, p), p = a, p.n = null);
        }

        function f(a, b) {
          a !== b && (a && (a.p = b), b && (b.n = a));
        }

        if (a in b) throw F("$cacheFactory")("iid", a);
        var g = 0,
            k = S({}, c, {
          id: a
        }),
            h = T(),
            l = c && c.capacity || Number.MAX_VALUE,
            m = T(),
            p = null,
            n = null;
        return b[a] = {
          put: function put(a, b) {
            if (!z(b)) {
              if (l < Number.MAX_VALUE) {
                var c = m[a] || (m[a] = {
                  key: a
                });
                e(c);
              }

              a in h || g++;
              h[a] = b;
              g > l && this.remove(n.key);
              return b;
            }
          },
          get: function get(a) {
            if (l < Number.MAX_VALUE) {
              var b = m[a];
              if (!b) return;
              e(b);
            }

            return h[a];
          },
          remove: function remove(a) {
            if (l < Number.MAX_VALUE) {
              var b = m[a];
              if (!b) return;
              b === p && (p = b.p);
              b === n && (n = b.n);
              f(b.n, b.p);
              delete m[a];
            }

            a in h && (delete h[a], g--);
          },
          removeAll: function removeAll() {
            h = T();
            g = 0;
            m = T();
            p = n = null;
          },
          destroy: function destroy() {
            m = k = h = null;
            delete b[a];
          },
          info: function info() {
            return S({}, k, {
              size: g
            });
          }
        };
      }

      var b = {};

      a.info = function () {
        var a = {};
        r(b, function (b, e) {
          a[e] = b.info();
        });
        return a;
      };

      a.get = function (a) {
        return b[a];
      };

      return a;
    };
  }

  function cg() {
    this.$get = ["$cacheFactory", function (a) {
      return a("templates");
    }];
  }

  function Xc(a, b) {
    function d(a, b, c) {
      var d = /^([@&]|[=<](\*?))(\??)\s*([\w$]*)$/,
          e = T();
      r(a, function (a, f) {
        a = a.trim();
        if (a in p) e[f] = p[a];else {
          var g = a.match(d);
          if (!g) throw $("iscp", b, f, a, c ? "controller bindings definition" : "isolate scope definition");
          e[f] = {
            mode: g[1][0],
            collection: "*" === g[2],
            optional: "?" === g[3],
            attrName: g[4] || f
          };
          g[4] && (p[a] = e[f]);
        }
      });
      return e;
    }

    function c(a) {
      var b = a.charAt(0);
      if (!b || b !== K(b)) throw $("baddir", a);
      if (a !== a.trim()) throw $("baddir", a);
    }

    function e(a) {
      var b = a.require || a.controller && a.name;
      !H(b) && D(b) && r(b, function (a, c) {
        var d = a.match(l);
        a.substring(d[0].length) || (b[c] = d[0] + c);
      });
      return b;
    }

    var f = {},
        g = /^\s*directive:\s*([\w-]+)\s+(.*)$/,
        k = /(([\w-]+)(?::([^;]+))?;?)/,
        h = we("ngSrc,ngSrcset,src,srcset"),
        l = /^(?:(\^\^?)?(\?)?(\^\^?)?)?/,
        m = /^(on[a-z]+|formaction)$/,
        p = T();

    this.directive = function qa(b, d) {
      gb(b, "name");
      Ja(b, "directive");
      A(b) ? (c(b), gb(d, "directiveFactory"), f.hasOwnProperty(b) || (f[b] = [], a.factory(b + "Directive", ["$injector", "$exceptionHandler", function (a, c) {
        var d = [];
        r(f[b], function (f, g) {
          try {
            var h = a.invoke(f);
            B(h) ? h = {
              compile: ia(h)
            } : !h.compile && h.link && (h.compile = ia(h.link));
            h.priority = h.priority || 0;
            h.index = g;
            h.name = h.name || b;
            h.require = e(h);
            var k = h,
                l = h.restrict;
            if (l && (!A(l) || !/[EACM]/.test(l))) throw $("badrestrict", l, b);
            k.restrict = l || "EA";
            h.$$moduleName = f.$$moduleName;
            d.push(h);
          } catch (m) {
            c(m);
          }
        });
        return d;
      }])), f[b].push(d)) : r(b, Yb(qa));
      return this;
    };

    this.component = function y(a, b) {
      function c(a) {
        function e(b) {
          return B(b) || H(b) ? function (c, d) {
            return a.invoke(b, this, {
              $element: c,
              $attrs: d
            });
          } : b;
        }

        var f = b.template || b.templateUrl ? b.template : "",
            g = {
          controller: d,
          controllerAs: Bg(b.controller) || b.controllerAs || "$ctrl",
          template: e(f),
          templateUrl: e(b.templateUrl),
          transclude: b.transclude,
          scope: {},
          bindToController: b.bindings || {},
          restrict: "E",
          require: b.require
        };
        r(b, function (a, b) {
          "$" === b.charAt(0) && (g[b] = a);
        });
        return g;
      }

      if (!A(a)) return r(a, Yb(Va(this, y))), this;

      var d = b.controller || function () {};

      r(b, function (a, b) {
        "$" === b.charAt(0) && (c[b] = a, B(d) && (d[b] = a));
      });
      c.$inject = ["$injector"];
      return this.directive(a, c);
    };

    this.aHrefSanitizationWhitelist = function (a) {
      return w(a) ? (b.aHrefSanitizationWhitelist(a), this) : b.aHrefSanitizationWhitelist();
    };

    this.imgSrcSanitizationWhitelist = function (a) {
      return w(a) ? (b.imgSrcSanitizationWhitelist(a), this) : b.imgSrcSanitizationWhitelist();
    };

    var n = !0;

    this.debugInfoEnabled = function (a) {
      return w(a) ? (n = a, this) : n;
    };

    var s = !1;

    this.strictComponentBindingsEnabled = function (a) {
      return w(a) ? (s = a, this) : s;
    };

    var G = 10;

    this.onChangesTtl = function (a) {
      return arguments.length ? (G = a, this) : G;
    };

    var t = !0;

    this.commentDirectivesEnabled = function (a) {
      return arguments.length ? (t = a, this) : t;
    };

    var N = !0;

    this.cssClassDirectivesEnabled = function (a) {
      return arguments.length ? (N = a, this) : N;
    };

    var v = T();

    this.addPropertySecurityContext = function (a, b, c) {
      var d = a.toLowerCase() + "|" + b.toLowerCase();
      if (d in v && v[d] !== c) throw $("ctxoverride", a, b, v[d], c);
      v[d] = c;
      return this;
    };

    (function () {
      function a(b, c) {
        r(c, function (a) {
          v[a.toLowerCase()] = b;
        });
      }

      a(V.HTML, ["iframe|srcdoc", "*|innerHTML", "*|outerHTML"]);
      a(V.CSS, ["*|style"]);
      a(V.URL, "area|href area|ping a|href a|ping blockquote|cite body|background del|cite input|src ins|cite q|cite".split(" "));
      a(V.MEDIA_URL, "audio|src img|src img|srcset source|src source|srcset track|src video|src video|poster".split(" "));
      a(V.RESOURCE_URL, "*|formAction applet|code applet|codebase base|href embed|src frame|src form|action head|profile html|manifest iframe|src link|href media|src object|codebase object|data script|src".split(" "));
    })();

    this.$get = ["$injector", "$interpolate", "$exceptionHandler", "$templateRequest", "$parse", "$controller", "$rootScope", "$sce", "$animate", function (a, b, c, e, p, M, L, u, R) {
      function q() {
        try {
          if (! --Ja) throw Ua = void 0, $("infchng", G);
          L.$apply(function () {
            for (var a = 0, b = Ua.length; a < b; ++a) {
              try {
                Ua[a]();
              } catch (d) {
                c(d);
              }
            }

            Ua = void 0;
          });
        } finally {
          Ja++;
        }
      }

      function ma(a, b) {
        if (!a) return a;
        if (!A(a)) throw $("srcset", b, a.toString());

        for (var c = "", d = U(a), e = /(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/, e = /\s/.test(d) ? e : /(,)/, d = d.split(e), e = Math.floor(d.length / 2), f = 0; f < e; f++) {
          var g = 2 * f,
              c = c + u.getTrustedMediaUrl(U(d[g])),
              c = c + (" " + U(d[g + 1]));
        }

        d = U(d[2 * f]).split(/\s/);
        c += u.getTrustedMediaUrl(U(d[0]));
        2 === d.length && (c += " " + U(d[1]));
        return c;
      }

      function w(a, b) {
        if (b) {
          var c = Object.keys(b),
              d,
              e,
              f;
          d = 0;

          for (e = c.length; d < e; d++) {
            f = c[d], this[f] = b[f];
          }
        } else this.$attr = {};

        this.$$element = a;
      }

      function O(a, b, c) {
        Fa.innerHTML = "<span " + b + ">";
        b = Fa.firstChild.attributes;
        var d = b[0];
        b.removeNamedItem(d.name);
        d.value = c;
        a.attributes.setNamedItem(d);
      }

      function sa(a, b) {
        try {
          a.addClass(b);
        } catch (c) {}
      }

      function da(a, b, c, d, e) {
        a instanceof x || (a = x(a));
        var f = Xa(a, b, a, c, d, e);
        da.$$addScopeClass(a);
        var g = null;
        return function (b, c, d) {
          if (!a) throw $("multilink");
          gb(b, "scope");
          e && e.needsNewScope && (b = b.$parent.$new());
          d = d || {};
          var h = d.parentBoundTranscludeFn,
              k = d.transcludeControllers;
          d = d.futureParentElement;
          h && h.$$boundTransclude && (h = h.$$boundTransclude);
          g || (g = (d = d && d[0]) ? "foreignobject" !== ua(d) && la.call(d).match(/SVG/) ? "svg" : "html" : "html");
          d = "html" !== g ? x(ja(g, x("<div></div>").append(a).html())) : c ? Wa.clone.call(a) : a;
          if (k) for (var l in k) {
            d.data("$" + l + "Controller", k[l].instance);
          }
          da.$$addScopeInfo(d, b);
          c && c(d, b);
          f && f(b, d, d, h);
          c || (a = f = null);
          return d;
        };
      }

      function Xa(a, b, c, d, e, f) {
        function g(a, c, d, e) {
          var f, k, l, m, p, I, t;
          if (n) for (t = Array(c.length), m = 0; m < h.length; m += 3) {
            f = h[m], t[f] = c[f];
          } else t = c;
          m = 0;

          for (p = h.length; m < p;) {
            k = t[h[m++]], c = h[m++], f = h[m++], c ? (c.scope ? (l = a.$new(), da.$$addScopeInfo(x(k), l)) : l = a, I = c.transcludeOnThisElement ? ka(a, c.transclude, e) : !c.templateOnThisElement && e ? e : !e && b ? ka(a, b) : null, c(f, l, k, d, I)) : f && f(a, k.childNodes, void 0, e);
          }
        }

        for (var h = [], k = H(a) || a instanceof x, l, m, p, I, n, t = 0; t < a.length; t++) {
          l = new w();
          11 === Ca && ib(a, t, k);
          m = sc(a[t], [], l, 0 === t ? d : void 0, e);
          (f = m.length ? aa(m, a[t], l, b, c, null, [], [], f) : null) && f.scope && da.$$addScopeClass(l.$$element);
          l = f && f.terminal || !(p = a[t].childNodes) || !p.length ? null : Xa(p, f ? (f.transcludeOnThisElement || !f.templateOnThisElement) && f.transclude : b);
          if (f || l) h.push(t, f, l), I = !0, n = n || f;
          f = null;
        }

        return I ? g : null;
      }

      function ib(a, b, c) {
        var d = a[b],
            e = d.parentNode,
            f;
        if (d.nodeType === Pa) for (;;) {
          f = e ? d.nextSibling : a[b + 1];
          if (!f || f.nodeType !== Pa) break;
          d.nodeValue += f.nodeValue;
          f.parentNode && f.parentNode.removeChild(f);
          c && f === a[b + 1] && a.splice(b + 1, 1);
        }
      }

      function ka(a, b, c) {
        function d(e, f, g, h, k) {
          e || (e = a.$new(!1, k), e.$$transcluded = !0);
          return b(e, f, {
            parentBoundTranscludeFn: c,
            transcludeControllers: g,
            futureParentElement: h
          });
        }

        var e = d.$$slots = T(),
            f;

        for (f in b.$$slots) {
          e[f] = b.$$slots[f] ? ka(a, b.$$slots[f], c) : null;
        }

        return d;
      }

      function sc(a, b, d, e, f) {
        var g = d.$attr,
            h;

        switch (a.nodeType) {
          case 1:
            h = ua(a);
            X(b, wa(h), "E", e, f);

            for (var l, m, n, t, J, s = a.attributes, v = 0, G = s && s.length; v < G; v++) {
              var P = !1,
                  N = !1,
                  r = !1,
                  y = !1,
                  u = !1,
                  M;
              l = s[v];
              m = l.name;
              t = l.value;
              n = wa(m.toLowerCase());
              (J = n.match(Ra)) ? (r = "Attr" === J[1], y = "Prop" === J[1], u = "On" === J[1], m = m.replace(pd, "").toLowerCase().substr(4 + J[1].length).replace(/_(.)/g, function (a, b) {
                return b.toUpperCase();
              })) : (M = n.match(Sa)) && ca(M[1]) && (P = m, N = m.substr(0, m.length - 5) + "end", m = m.substr(0, m.length - 6));
              if (y || u) d[n] = t, g[n] = l.name, y ? Ea(a, b, n, m) : b.push(qd(p, L, c, n, m, !1));else {
                n = wa(m.toLowerCase());
                g[n] = m;
                if (r || !d.hasOwnProperty(n)) d[n] = t, ld(a, n) && (d[n] = !0);
                Ia(a, b, t, n, r);
                X(b, n, "A", e, f, P, N);
              }
            }

            "input" === h && "hidden" === a.getAttribute("type") && a.setAttribute("autocomplete", "off");
            if (!Qa) break;
            g = a.className;
            D(g) && (g = g.animVal);
            if (A(g) && "" !== g) for (; a = k.exec(g);) {
              n = wa(a[2]), X(b, n, "C", e, f) && (d[n] = U(a[3])), g = g.substr(a.index + a[0].length);
            }
            break;

          case Pa:
            na(b, a.nodeValue);
            break;

          case 8:
            if (!Oa) break;
            F(a, b, d, e, f);
        }

        b.sort(ia);
        return b;
      }

      function F(a, b, c, d, e) {
        try {
          var f = g.exec(a.nodeValue);

          if (f) {
            var h = wa(f[1]);
            X(b, h, "M", d, e) && (c[h] = U(f[2]));
          }
        } catch (k) {}
      }

      function V(a, b, c) {
        var d = [],
            e = 0;

        if (b && a.hasAttribute && a.hasAttribute(b)) {
          do {
            if (!a) throw $("uterdir", b, c);
            1 === a.nodeType && (a.hasAttribute(b) && e++, a.hasAttribute(c) && e--);
            d.push(a);
            a = a.nextSibling;
          } while (0 < e);
        } else d.push(a);

        return x(d);
      }

      function Y(a, b, c) {
        return function (d, e, f, g, h) {
          e = V(e[0], b, c);
          return a(d, e, f, g, h);
        };
      }

      function Z(a, b, c, d, e, f) {
        var g;
        return a ? da(b, c, d, e, f) : function () {
          g || (g = da(b, c, d, e, f), b = c = f = null);
          return g.apply(this, arguments);
        };
      }

      function aa(a, b, d, e, f, g, h, k, l) {
        function m(a, b, c, d) {
          if (a) {
            c && (a = Y(a, c, d));
            a.require = u.require;
            a.directiveName = Q;
            if (s === u || u.$$isolateScope) a = Aa(a, {
              isolateScope: !0
            });
            h.push(a);
          }

          if (b) {
            c && (b = Y(b, c, d));
            b.require = u.require;
            b.directiveName = Q;
            if (s === u || u.$$isolateScope) b = Aa(b, {
              isolateScope: !0
            });
            k.push(b);
          }
        }

        function p(a, e, f, g, l) {
          function m(a, b, c, d) {
            var e;
            bb(a) || (d = c, c = b, b = a, a = void 0);
            N && (e = P);
            c || (c = N ? Q.parent() : Q);

            if (d) {
              var f = l.$$slots[d];
              if (f) return f(a, b, e, c, R);
              if (z(f)) throw $("noslot", d, za(Q));
            } else return l(a, b, e, c, R);
          }

          var n, u, L, y, G, P, M, Q;
          b === f ? (g = d, Q = d.$$element) : (Q = x(f), g = new w(Q, d));
          G = e;
          s ? y = e.$new(!0) : t && (G = e.$parent);
          l && (M = m, M.$$boundTransclude = l, M.isSlotFilled = function (a) {
            return !!l.$$slots[a];
          });
          J && (P = ea(Q, g, M, J, y, e, s));
          s && (da.$$addScopeInfo(Q, y, !0, !(v && (v === s || v === s.$$originalDirective))), da.$$addScopeClass(Q, !0), y.$$isolateBindings = s.$$isolateBindings, u = Da(e, g, y, y.$$isolateBindings, s), u.removeWatches && y.$on("$destroy", u.removeWatches));

          for (n in P) {
            u = J[n];
            L = P[n];
            var Cg = u.$$bindings.bindToController;
            L.instance = L();
            Q.data("$" + u.name + "Controller", L.instance);
            L.bindingInfo = Da(G, g, L.instance, Cg, u);
          }

          r(J, function (a, b) {
            var c = a.require;
            a.bindToController && !H(c) && D(c) && S(P[b].instance, W(b, c, Q, P));
          });
          r(P, function (a) {
            var b = a.instance;
            if (B(b.$onChanges)) try {
              b.$onChanges(a.bindingInfo.initialChanges);
            } catch (d) {
              c(d);
            }
            if (B(b.$onInit)) try {
              b.$onInit();
            } catch (e) {
              c(e);
            }
            B(b.$doCheck) && (G.$watch(function () {
              b.$doCheck();
            }), b.$doCheck());
            B(b.$onDestroy) && G.$on("$destroy", function () {
              b.$onDestroy();
            });
          });
          n = 0;

          for (u = h.length; n < u; n++) {
            L = h[n], Ba(L, L.isolateScope ? y : e, Q, g, L.require && W(L.directiveName, L.require, Q, P), M);
          }

          var R = e;
          s && (s.template || null === s.templateUrl) && (R = y);
          a && a(R, f.childNodes, void 0, l);

          for (n = k.length - 1; 0 <= n; n--) {
            L = k[n], Ba(L, L.isolateScope ? y : e, Q, g, L.require && W(L.directiveName, L.require, Q, P), M);
          }

          r(P, function (a) {
            a = a.instance;
            B(a.$postLink) && a.$postLink();
          });
        }

        l = l || {};

        for (var n = -Number.MAX_VALUE, t = l.newScopeDirective, J = l.controllerDirectives, s = l.newIsolateScopeDirective, v = l.templateDirective, L = l.nonTlbTranscludeDirective, G = !1, P = !1, N = l.hasElementTranscludeDirective, y = d.$$element = x(b), u, Q, M, R = e, q, ma = !1, Ib = !1, O, sa = 0, A = a.length; sa < A; sa++) {
          u = a[sa];
          var E = u.$$start,
              ib = u.$$end;
          E && (y = V(b, E, ib));
          M = void 0;
          if (n > u.priority) break;
          if (O = u.scope) u.templateUrl || (D(O) ? (ba("new/isolated scope", s || t, u, y), s = u) : ba("new/isolated scope", s, u, y)), t = t || u;
          Q = u.name;

          if (!ma && (u.replace && (u.templateUrl || u.template) || u.transclude && !u.$$tlb)) {
            for (O = sa + 1; ma = a[O++];) {
              if (ma.transclude && !ma.$$tlb || ma.replace && (ma.templateUrl || ma.template)) {
                Ib = !0;
                break;
              }
            }

            ma = !0;
          }

          !u.templateUrl && u.controller && (J = J || T(), ba("'" + Q + "' controller", J[Q], u, y), J[Q] = u);
          if (O = u.transclude) if (G = !0, u.$$tlb || (ba("transclusion", L, u, y), L = u), "element" === O) N = !0, n = u.priority, M = y, y = d.$$element = x(da.$$createComment(Q, d[Q])), b = y[0], pa(f, Ha.call(M, 0), b), R = Z(Ib, M, e, n, g && g.name, {
            nonTlbTranscludeDirective: L
          });else {
            var ka = T();

            if (D(O)) {
              M = C.document.createDocumentFragment();
              var Xa = T(),
                  F = T();
              r(O, function (a, b) {
                var c = "?" === a.charAt(0);
                a = c ? a.substring(1) : a;
                Xa[a] = b;
                ka[b] = null;
                F[b] = c;
              });
              r(y.contents(), function (a) {
                var b = Xa[wa(ua(a))];
                b ? (F[b] = !0, ka[b] = ka[b] || C.document.createDocumentFragment(), ka[b].appendChild(a)) : M.appendChild(a);
              });
              r(F, function (a, b) {
                if (!a) throw $("reqslot", b);
              });

              for (var K in ka) {
                ka[K] && (R = x(ka[K].childNodes), ka[K] = Z(Ib, R, e));
              }

              M = x(M.childNodes);
            } else M = x(pc(b)).contents();

            y.empty();
            R = Z(Ib, M, e, void 0, void 0, {
              needsNewScope: u.$$isolateScope || u.$$newScope
            });
            R.$$slots = ka;
          }
          if (u.template) if (P = !0, ba("template", v, u, y), v = u, O = B(u.template) ? u.template(y, d) : u.template, O = Na(O), u.replace) {
            g = u;
            M = mc.test(O) ? rd(ja(u.templateNamespace, U(O))) : [];
            b = M[0];
            if (1 !== M.length || 1 !== b.nodeType) throw $("tplrt", Q, "");
            pa(f, y, b);
            A = {
              $attr: {}
            };
            O = sc(b, [], A);
            var Dg = a.splice(sa + 1, a.length - (sa + 1));
            (s || t) && fa(O, s, t);
            a = a.concat(O).concat(Dg);
            ga(d, A);
            A = a.length;
          } else y.html(O);
          if (u.templateUrl) P = !0, ba("template", v, u, y), v = u, u.replace && (g = u), p = ha(a.splice(sa, a.length - sa), y, d, f, G && R, h, k, {
            controllerDirectives: J,
            newScopeDirective: t !== u && t,
            newIsolateScopeDirective: s,
            templateDirective: v,
            nonTlbTranscludeDirective: L
          }), A = a.length;else if (u.compile) try {
            q = u.compile(y, d, R);
            var X = u.$$originalDirective || u;
            B(q) ? m(null, Va(X, q), E, ib) : q && m(Va(X, q.pre), Va(X, q.post), E, ib);
          } catch (ca) {
            c(ca, za(y));
          }
          u.terminal && (p.terminal = !0, n = Math.max(n, u.priority));
        }

        p.scope = t && !0 === t.scope;
        p.transcludeOnThisElement = G;
        p.templateOnThisElement = P;
        p.transclude = R;
        l.hasElementTranscludeDirective = N;
        return p;
      }

      function W(a, b, c, d) {
        var e;

        if (A(b)) {
          var f = b.match(l);
          b = b.substring(f[0].length);
          var g = f[1] || f[3],
              f = "?" === f[2];
          "^^" === g ? c = c.parent() : e = (e = d && d[b]) && e.instance;

          if (!e) {
            var h = "$" + b + "Controller";
            e = "^^" === g && c[0] && 9 === c[0].nodeType ? null : g ? c.inheritedData(h) : c.data(h);
          }

          if (!e && !f) throw $("ctreq", b, a);
        } else if (H(b)) for (e = [], g = 0, f = b.length; g < f; g++) {
          e[g] = W(a, b[g], c, d);
        } else D(b) && (e = {}, r(b, function (b, f) {
          e[f] = W(a, b, c, d);
        }));

        return e || null;
      }

      function ea(a, b, c, d, e, f, g) {
        var h = T(),
            k;

        for (k in d) {
          var l = d[k],
              m = {
            $scope: l === g || l.$$isolateScope ? e : f,
            $element: a,
            $attrs: b,
            $transclude: c
          },
              p = l.controller;
          "@" === p && (p = b[l.name]);
          m = M(p, m, !0, l.controllerAs);
          h[l.name] = m;
          a.data("$" + l.name + "Controller", m.instance);
        }

        return h;
      }

      function fa(a, b, c) {
        for (var d = 0, e = a.length; d < e; d++) {
          a[d] = ac(a[d], {
            $$isolateScope: b,
            $$newScope: c
          });
        }
      }

      function X(b, c, e, g, h, k, l) {
        if (c === h) return null;
        var m = null;

        if (f.hasOwnProperty(c)) {
          h = a.get(c + "Directive");

          for (var p = 0, n = h.length; p < n; p++) {
            if (c = h[p], (z(g) || g > c.priority) && -1 !== c.restrict.indexOf(e)) {
              k && (c = ac(c, {
                $$start: k,
                $$end: l
              }));

              if (!c.$$bindings) {
                var I = m = c,
                    t = c.name,
                    u = {
                  isolateScope: null,
                  bindToController: null
                };
                D(I.scope) && (!0 === I.bindToController ? (u.bindToController = d(I.scope, t, !0), u.isolateScope = {}) : u.isolateScope = d(I.scope, t, !1));
                D(I.bindToController) && (u.bindToController = d(I.bindToController, t, !0));
                if (u.bindToController && !I.controller) throw $("noctrl", t);
                m = m.$$bindings = u;
                D(m.isolateScope) && (c.$$isolateBindings = m.isolateScope);
              }

              b.push(c);
              m = c;
            }
          }
        }

        return m;
      }

      function ca(b) {
        if (f.hasOwnProperty(b)) for (var c = a.get(b + "Directive"), d = 0, e = c.length; d < e; d++) {
          if (b = c[d], b.multiElement) return !0;
        }
        return !1;
      }

      function ga(a, b) {
        var c = b.$attr,
            d = a.$attr;
        r(a, function (d, e) {
          "$" !== e.charAt(0) && (b[e] && b[e] !== d && (d = d.length ? d + (("style" === e ? ";" : " ") + b[e]) : b[e]), a.$set(e, d, !0, c[e]));
        });
        r(b, function (b, e) {
          a.hasOwnProperty(e) || "$" === e.charAt(0) || (a[e] = b, "class" !== e && "style" !== e && (d[e] = c[e]));
        });
      }

      function ha(a, b, d, f, g, h, k, l) {
        var m = [],
            p,
            n,
            t = b[0],
            u = a.shift(),
            J = ac(u, {
          templateUrl: null,
          transclude: null,
          replace: null,
          $$originalDirective: u
        }),
            s = B(u.templateUrl) ? u.templateUrl(b, d) : u.templateUrl,
            L = u.templateNamespace;
        b.empty();
        e(s).then(function (c) {
          var e, I;
          c = Na(c);

          if (u.replace) {
            c = mc.test(c) ? rd(ja(L, U(c))) : [];
            e = c[0];
            if (1 !== c.length || 1 !== e.nodeType) throw $("tplrt", u.name, s);
            c = {
              $attr: {}
            };
            pa(f, b, e);
            var v = sc(e, [], c);
            D(u.scope) && fa(v, !0);
            a = v.concat(a);
            ga(d, c);
          } else e = t, b.html(c);

          a.unshift(J);
          p = aa(a, e, d, g, b, u, h, k, l);
          r(f, function (a, c) {
            a === e && (f[c] = b[0]);
          });

          for (n = Xa(b[0].childNodes, g); m.length;) {
            c = m.shift();
            I = m.shift();
            var y = m.shift(),
                P = m.shift(),
                v = b[0];

            if (!c.$$destroyed) {
              if (I !== t) {
                var G = I.className;
                l.hasElementTranscludeDirective && u.replace || (v = pc(e));
                pa(y, x(I), v);
                sa(x(v), G);
              }

              I = p.transcludeOnThisElement ? ka(c, p.transclude, P) : P;
              p(n, c, v, f, I);
            }
          }

          m = null;
        })["catch"](function (a) {
          cc(a) && c(a);
        });
        return function (a, b, c, d, e) {
          a = e;
          b.$$destroyed || (m ? m.push(b, c, d, a) : (p.transcludeOnThisElement && (a = ka(b, p.transclude, e)), p(n, b, c, d, a)));
        };
      }

      function ia(a, b) {
        var c = b.priority - a.priority;
        return 0 !== c ? c : a.name !== b.name ? a.name < b.name ? -1 : 1 : a.index - b.index;
      }

      function ba(a, b, c, d) {
        function e(a) {
          return a ? " (module: " + a + ")" : "";
        }

        if (b) throw $("multidir", b.name, e(b.$$moduleName), c.name, e(c.$$moduleName), a, za(d));
      }

      function na(a, c) {
        var d = b(c, !0);
        d && a.push({
          priority: 0,
          compile: function compile(a) {
            a = a.parent();
            var b = !!a.length;
            b && da.$$addBindingClass(a);
            return function (a, c) {
              var e = c.parent();
              b || da.$$addBindingClass(e);
              da.$$addBindingInfo(e, d.expressions);
              a.$watch(d, function (a) {
                c[0].nodeValue = a;
              });
            };
          }
        });
      }

      function ja(a, b) {
        a = K(a || "html");

        switch (a) {
          case "svg":
          case "math":
            var c = C.document.createElement("div");
            c.innerHTML = "<" + a + ">" + b + "</" + a + ">";
            return c.childNodes[0].childNodes;

          default:
            return b;
        }
      }

      function oa(a, b) {
        if ("srcdoc" === b) return u.HTML;
        if ("src" === b || "ngSrc" === b) return -1 === ["img", "video", "audio", "source", "track"].indexOf(a) ? u.RESOURCE_URL : u.MEDIA_URL;
        if ("xlinkHref" === b) return "image" === a ? u.MEDIA_URL : "a" === a ? u.URL : u.RESOURCE_URL;
        if ("form" === a && "action" === b || "base" === a && "href" === b || "link" === a && "href" === b) return u.RESOURCE_URL;
        if ("a" === a && ("href" === b || "ngHref" === b)) return u.URL;
      }

      function xa(a, b) {
        var c = b.toLowerCase();
        return v[a + "|" + c] || v["*|" + c];
      }

      function ya(a) {
        return ma(u.valueOf(a), "ng-prop-srcset");
      }

      function Ea(a, b, c, d) {
        if (m.test(d)) throw $("nodomevents");
        a = ua(a);
        var e = xa(a, d),
            f = Ta;
        "srcset" !== d || "img" !== a && "source" !== a ? e && (f = u.getTrusted.bind(u, e)) : f = ya;
        b.push({
          priority: 100,
          compile: function compile(a, b) {
            var e = p(b[c]),
                g = p(b[c], function (a) {
              return u.valueOf(a);
            });
            return {
              pre: function pre(a, b) {
                function c() {
                  var g = e(a);
                  b[0][d] = f(g);
                }

                c();
                a.$watch(g, c);
              }
            };
          }
        });
      }

      function Ia(a, c, d, e, f) {
        var g = ua(a),
            k = oa(g, e),
            l = h[e] || f,
            p = b(d, !f, k, l);

        if (p) {
          if ("multiple" === e && "select" === g) throw $("selmulti", za(a));
          if (m.test(e)) throw $("nodomevents");
          c.push({
            priority: 100,
            compile: function compile() {
              return {
                pre: function pre(a, c, f) {
                  c = f.$$observers || (f.$$observers = T());
                  var g = f[e];
                  g !== d && (p = g && b(g, !0, k, l), d = g);
                  p && (f[e] = p(a), (c[e] || (c[e] = [])).$$inter = !0, (f.$$observers && f.$$observers[e].$$scope || a).$watch(p, function (a, b) {
                    "class" === e && a !== b ? f.$updateClass(a, b) : f.$set(e, a);
                  }));
                }
              };
            }
          });
        }
      }

      function pa(a, b, c) {
        var d = b[0],
            e = b.length,
            f = d.parentNode,
            g,
            h;
        if (a) for (g = 0, h = a.length; g < h; g++) {
          if (a[g] === d) {
            a[g++] = c;
            h = g + e - 1;

            for (var k = a.length; g < k; g++, h++) {
              h < k ? a[g] = a[h] : delete a[g];
            }

            a.length -= e - 1;
            a.context === d && (a.context = c);
            break;
          }
        }
        f && f.replaceChild(c, d);
        a = C.document.createDocumentFragment();

        for (g = 0; g < e; g++) {
          a.appendChild(b[g]);
        }

        x.hasData(d) && (x.data(c, x.data(d)), x(d).off("$destroy"));
        x.cleanData(a.querySelectorAll("*"));

        for (g = 1; g < e; g++) {
          delete b[g];
        }

        b[0] = c;
        b.length = 1;
      }

      function Aa(a, b) {
        return S(function () {
          return a.apply(null, arguments);
        }, a, b);
      }

      function Ba(a, b, d, e, f, g) {
        try {
          a(b, d, e, f, g);
        } catch (h) {
          c(h, za(d));
        }
      }

      function ra(a, b) {
        if (s) throw $("missingattr", a, b);
      }

      function Da(a, c, d, e, f) {
        function g(b, c, e) {
          B(d.$onChanges) && !dc(c, e) && (Ua || (a.$$postDigest(q), Ua = []), m || (m = {}, Ua.push(h)), m[b] && (e = m[b].previousValue), m[b] = new Jb(e, c));
        }

        function h() {
          d.$onChanges(m);
          m = void 0;
        }

        var k = [],
            l = {},
            m;
        r(e, function (e, h) {
          var m = e.attrName,
              n = e.optional,
              I,
              t,
              u,
              s;

          switch (e.mode) {
            case "@":
              n || ta.call(c, m) || (ra(m, f.name), d[h] = c[m] = void 0);
              n = c.$observe(m, function (a) {
                if (A(a) || Ga(a)) g(h, a, d[h]), d[h] = a;
              });
              c.$$observers[m].$$scope = a;
              I = c[m];
              A(I) ? d[h] = b(I)(a) : Ga(I) && (d[h] = I);
              l[h] = new Jb(tc, d[h]);
              k.push(n);
              break;

            case "=":
              if (!ta.call(c, m)) {
                if (n) break;
                ra(m, f.name);
                c[m] = void 0;
              }

              if (n && !c[m]) break;
              t = p(c[m]);
              s = t.literal ? va : dc;

              u = t.assign || function () {
                I = d[h] = t(a);
                throw $("nonassign", c[m], m, f.name);
              };

              I = d[h] = t(a);

              n = function n(b) {
                s(b, d[h]) || (s(b, I) ? u(a, b = d[h]) : d[h] = b);
                return I = b;
              };

              n.$stateful = !0;
              n = e.collection ? a.$watchCollection(c[m], n) : a.$watch(p(c[m], n), null, t.literal);
              k.push(n);
              break;

            case "<":
              if (!ta.call(c, m)) {
                if (n) break;
                ra(m, f.name);
                c[m] = void 0;
              }

              if (n && !c[m]) break;
              t = p(c[m]);
              var v = t.literal,
                  L = d[h] = t(a);
              l[h] = new Jb(tc, d[h]);
              n = a[e.collection ? "$watchCollection" : "$watch"](t, function (a, b) {
                if (b === a) {
                  if (b === L || v && va(b, L)) return;
                  b = L;
                }

                g(h, a, b);
                d[h] = a;
              });
              k.push(n);
              break;

            case "&":
              n || ta.call(c, m) || ra(m, f.name);
              t = c.hasOwnProperty(m) ? p(c[m]) : E;
              if (t === E && n) break;

              d[h] = function (b) {
                return t(a, b);
              };

          }
        });
        return {
          initialChanges: l,
          removeWatches: k.length && function () {
            for (var a = 0, b = k.length; a < b; ++a) {
              k[a]();
            }
          }
        };
      }

      var Ma = /^\w/,
          Fa = C.document.createElement("div"),
          Oa = t,
          Qa = N,
          Ja = G,
          Ua;
      w.prototype = {
        $normalize: wa,
        $addClass: function $addClass(a) {
          a && 0 < a.length && R.addClass(this.$$element, a);
        },
        $removeClass: function $removeClass(a) {
          a && 0 < a.length && R.removeClass(this.$$element, a);
        },
        $updateClass: function $updateClass(a, b) {
          var c = sd(a, b);
          c && c.length && R.addClass(this.$$element, c);
          (c = sd(b, a)) && c.length && R.removeClass(this.$$element, c);
        },
        $set: function $set(a, b, d, e) {
          var f = ld(this.$$element[0], a),
              g = td[a],
              h = a;
          f ? (this.$$element.prop(a, b), e = f) : g && (this[g] = b, h = g);
          this[a] = b;
          e ? this.$attr[a] = e : (e = this.$attr[a]) || (this.$attr[a] = e = Vc(a, "-"));
          "img" === ua(this.$$element) && "srcset" === a && (this[a] = b = ma(b, "$set('srcset', value)"));
          !1 !== d && (null === b || z(b) ? this.$$element.removeAttr(e) : Ma.test(e) ? f && !1 === b ? this.$$element.removeAttr(e) : this.$$element.attr(e, b) : O(this.$$element[0], e, b));
          (a = this.$$observers) && r(a[h], function (a) {
            try {
              a(b);
            } catch (d) {
              c(d);
            }
          });
        },
        $observe: function $observe(a, b) {
          var c = this,
              d = c.$$observers || (c.$$observers = T()),
              e = d[a] || (d[a] = []);
          e.push(b);
          L.$evalAsync(function () {
            e.$$inter || !c.hasOwnProperty(a) || z(c[a]) || b(c[a]);
          });
          return function () {
            cb(e, b);
          };
        }
      };
      var Ka = b.startSymbol(),
          La = b.endSymbol(),
          Na = "{{" === Ka && "}}" === La ? Ta : function (a) {
        return a.replace(/\{\{/g, Ka).replace(/}}/g, La);
      },
          Ra = /^ng(Attr|Prop|On)([A-Z].*)$/,
          Sa = /^(.+)Start$/;
      da.$$addBindingInfo = n ? function (a, b) {
        var c = a.data("$binding") || [];
        H(b) ? c = c.concat(b) : c.push(b);
        a.data("$binding", c);
      } : E;
      da.$$addBindingClass = n ? function (a) {
        sa(a, "ng-binding");
      } : E;
      da.$$addScopeInfo = n ? function (a, b, c, d) {
        a.data(c ? d ? "$isolateScopeNoTemplate" : "$isolateScope" : "$scope", b);
      } : E;
      da.$$addScopeClass = n ? function (a, b) {
        sa(a, b ? "ng-isolate-scope" : "ng-scope");
      } : E;

      da.$$createComment = function (a, b) {
        var c = "";
        n && (c = " " + (a || "") + ": ", b && (c += b + " "));
        return C.document.createComment(c);
      };

      return da;
    }];
  }

  function Jb(a, b) {
    this.previousValue = a;
    this.currentValue = b;
  }

  function wa(a) {
    return a.replace(pd, "").replace(Eg, function (a, d, c) {
      return c ? d.toUpperCase() : d;
    });
  }

  function sd(a, b) {
    var d = "",
        c = a.split(/\s+/),
        e = b.split(/\s+/),
        f = 0;

    a: for (; f < c.length; f++) {
      for (var g = c[f], k = 0; k < e.length; k++) {
        if (g === e[k]) continue a;
      }

      d += (0 < d.length ? " " : "") + g;
    }

    return d;
  }

  function rd(a) {
    a = x(a);
    var b = a.length;
    if (1 >= b) return a;

    for (; b--;) {
      var d = a[b];
      (8 === d.nodeType || d.nodeType === Pa && "" === d.nodeValue.trim()) && Fg.call(a, b, 1);
    }

    return a;
  }

  function Bg(a, b) {
    if (b && A(b)) return b;

    if (A(a)) {
      var d = ud.exec(a);
      if (d) return d[3];
    }
  }

  function Ff() {
    var a = {};

    this.has = function (b) {
      return a.hasOwnProperty(b);
    };

    this.register = function (b, d) {
      Ja(b, "controller");
      D(b) ? S(a, b) : a[b] = d;
    };

    this.$get = ["$injector", function (b) {
      function d(a, b, d, g) {
        if (!a || !D(a.$scope)) throw F("$controller")("noscp", g, b);
        a.$scope[b] = d;
      }

      return function (c, e, f, g) {
        var k, h, l;
        f = !0 === f;
        g && A(g) && (l = g);

        if (A(c)) {
          g = c.match(ud);
          if (!g) throw vd("ctrlfmt", c);
          h = g[1];
          l = l || g[3];
          c = a.hasOwnProperty(h) ? a[h] : Ge(e.$scope, h, !0);
          if (!c) throw vd("ctrlreg", h);
          sb(c, h, !0);
        }

        if (f) return f = (H(c) ? c[c.length - 1] : c).prototype, k = Object.create(f || null), l && d(e, l, k, h || c.name), S(function () {
          var a = b.invoke(c, k, e, h);
          a !== k && (D(a) || B(a)) && (k = a, l && d(e, l, k, h || c.name));
          return k;
        }, {
          instance: k,
          identifier: l
        });
        k = b.instantiate(c, e, h);
        l && d(e, l, k, h || c.name);
        return k;
      };
    }];
  }

  function Gf() {
    this.$get = ["$window", function (a) {
      return x(a.document);
    }];
  }

  function Hf() {
    this.$get = ["$document", "$rootScope", function (a, b) {
      function d() {
        e = c.hidden;
      }

      var c = a[0],
          e = c && c.hidden;
      a.on("visibilitychange", d);
      b.$on("$destroy", function () {
        a.off("visibilitychange", d);
      });
      return function () {
        return e;
      };
    }];
  }

  function If() {
    this.$get = ["$log", function (a) {
      return function (b, d) {
        a.error.apply(a, arguments);
      };
    }];
  }

  function uc(a) {
    return D(a) ? ha(a) ? a.toISOString() : eb(a) : a;
  }

  function Of() {
    this.$get = function () {
      return function (a) {
        if (!a) return "";
        var b = [];
        Oc(a, function (a, c) {
          null === a || z(a) || B(a) || (H(a) ? r(a, function (a) {
            b.push(ba(c) + "=" + ba(uc(a)));
          }) : b.push(ba(c) + "=" + ba(uc(a))));
        });
        return b.join("&");
      };
    };
  }

  function Pf() {
    this.$get = function () {
      return function (a) {
        function b(a, e, f) {
          H(a) ? r(a, function (a, c) {
            b(a, e + "[" + (D(a) ? c : "") + "]");
          }) : D(a) && !ha(a) ? Oc(a, function (a, c) {
            b(a, e + (f ? "" : "[") + c + (f ? "" : "]"));
          }) : (B(a) && (a = a()), d.push(ba(e) + "=" + (null == a ? "" : ba(uc(a)))));
        }

        if (!a) return "";
        var d = [];
        b(a, "", !0);
        return d.join("&");
      };
    };
  }

  function vc(a, b) {
    if (A(a)) {
      var d = a.replace(Gg, "").trim();

      if (d) {
        var c = b("Content-Type"),
            c = c && 0 === c.indexOf(wd),
            e;
        (e = c) || (e = (e = d.match(Hg)) && Ig[e[0]].test(d));
        if (e) try {
          a = Rc(d);
        } catch (f) {
          if (!c) return a;
          throw Kb("baddata", a, f);
        }
      }
    }

    return a;
  }

  function xd(a) {
    var b = T(),
        d;
    A(a) ? r(a.split("\n"), function (a) {
      d = a.indexOf(":");
      var e = K(U(a.substr(0, d)));
      a = U(a.substr(d + 1));
      e && (b[e] = b[e] ? b[e] + ", " + a : a);
    }) : D(a) && r(a, function (a, d) {
      var f = K(d),
          g = U(a);
      f && (b[f] = b[f] ? b[f] + ", " + g : g);
    });
    return b;
  }

  function yd(a) {
    var b;
    return function (d) {
      b || (b = xd(a));
      return d ? (d = b[K(d)], void 0 === d && (d = null), d) : b;
    };
  }

  function zd(a, b, d, c) {
    if (B(c)) return c(a, b, d);
    r(c, function (c) {
      a = c(a, b, d);
    });
    return a;
  }

  function Nf() {
    var a = this.defaults = {
      transformResponse: [vc],
      transformRequest: [function (a) {
        return D(a) && "[object File]" !== la.call(a) && "[object Blob]" !== la.call(a) && "[object FormData]" !== la.call(a) ? eb(a) : a;
      }],
      headers: {
        common: {
          Accept: "application/json, text/plain, */*"
        },
        post: ja(wc),
        put: ja(wc),
        patch: ja(wc)
      },
      xsrfCookieName: "XSRF-TOKEN",
      xsrfHeaderName: "X-XSRF-TOKEN",
      paramSerializer: "$httpParamSerializer",
      jsonpCallbackParam: "callback"
    },
        b = !1;

    this.useApplyAsync = function (a) {
      return w(a) ? (b = !!a, this) : b;
    };

    var d = this.interceptors = [],
        c = this.xsrfWhitelistedOrigins = [];
    this.$get = ["$browser", "$httpBackend", "$$cookieReader", "$cacheFactory", "$rootScope", "$q", "$injector", "$sce", function (e, f, g, k, h, l, m, p) {
      function n(b) {
        function c(a, b) {
          for (var d = 0, e = b.length; d < e;) {
            var f = b[d++],
                g = b[d++];
            a = a.then(f, g);
          }

          b.length = 0;
          return a;
        }

        function d(a, b) {
          var c,
              e = {};
          r(a, function (a, d) {
            B(a) ? (c = a(b), null != c && (e[d] = c)) : e[d] = a;
          });
          return e;
        }

        function f(a) {
          var b = S({}, a);
          b.data = zd(a.data, a.headers, a.status, g.transformResponse);
          a = a.status;
          return 200 <= a && 300 > a ? b : l.reject(b);
        }

        if (!D(b)) throw F("$http")("badreq", b);
        if (!A(p.valueOf(b.url))) throw F("$http")("badreq", b.url);
        var g = S({
          method: "get",
          transformRequest: a.transformRequest,
          transformResponse: a.transformResponse,
          paramSerializer: a.paramSerializer,
          jsonpCallbackParam: a.jsonpCallbackParam
        }, b);

        g.headers = function (b) {
          var c = a.headers,
              e = S({}, b.headers),
              f,
              g,
              h,
              c = S({}, c.common, c[K(b.method)]);

          a: for (f in c) {
            g = K(f);

            for (h in e) {
              if (K(h) === g) continue a;
            }

            e[f] = c[f];
          }

          return d(e, ja(b));
        }(b);

        g.method = ub(g.method);
        g.paramSerializer = A(g.paramSerializer) ? m.get(g.paramSerializer) : g.paramSerializer;
        e.$$incOutstandingRequestCount("$http");
        var h = [],
            k = [];
        b = l.resolve(g);
        r(v, function (a) {
          (a.request || a.requestError) && h.unshift(a.request, a.requestError);
          (a.response || a.responseError) && k.push(a.response, a.responseError);
        });
        b = c(b, h);
        b = b.then(function (b) {
          var c = b.headers,
              d = zd(b.data, yd(c), void 0, b.transformRequest);
          z(d) && r(c, function (a, b) {
            "content-type" === K(b) && delete c[b];
          });
          z(b.withCredentials) && !z(a.withCredentials) && (b.withCredentials = a.withCredentials);
          return s(b, d).then(f, f);
        });
        b = c(b, k);
        return b = b["finally"](function () {
          e.$$completeOutstandingRequest(E, "$http");
        });
      }

      function s(c, d) {
        function e(a) {
          if (a) {
            var c = {};
            r(a, function (a, d) {
              c[d] = function (c) {
                function d() {
                  a(c);
                }

                b ? h.$applyAsync(d) : h.$$phase ? d() : h.$apply(d);
              };
            });
            return c;
          }
        }

        function k(a, c, d, e, f) {
          function g() {
            m(c, a, d, e, f);
          }

          R && (200 <= a && 300 > a ? R.put(O, [a, c, xd(d), e, f]) : R.remove(O));
          b ? h.$applyAsync(g) : (g(), h.$$phase || h.$apply());
        }

        function m(a, b, d, e, f) {
          b = -1 <= b ? b : 0;
          (200 <= b && 300 > b ? L.resolve : L.reject)({
            data: a,
            status: b,
            headers: yd(d),
            config: c,
            statusText: e,
            xhrStatus: f
          });
        }

        function s(a) {
          m(a.data, a.status, ja(a.headers()), a.statusText, a.xhrStatus);
        }

        function v() {
          var a = n.pendingRequests.indexOf(c);
          -1 !== a && n.pendingRequests.splice(a, 1);
        }

        var L = l.defer(),
            u = L.promise,
            R,
            q,
            ma = c.headers,
            x = "jsonp" === K(c.method),
            O = c.url;
        x ? O = p.getTrustedResourceUrl(O) : A(O) || (O = p.valueOf(O));
        O = G(O, c.paramSerializer(c.params));
        x && (O = t(O, c.jsonpCallbackParam));
        n.pendingRequests.push(c);
        u.then(v, v);
        !c.cache && !a.cache || !1 === c.cache || "GET" !== c.method && "JSONP" !== c.method || (R = D(c.cache) ? c.cache : D(a.cache) ? a.cache : N);
        R && (q = R.get(O), w(q) ? q && B(q.then) ? q.then(s, s) : H(q) ? m(q[1], q[0], ja(q[2]), q[3], q[4]) : m(q, 200, {}, "OK", "complete") : R.put(O, u));
        z(q) && ((q = jc(c.url) ? g()[c.xsrfCookieName || a.xsrfCookieName] : void 0) && (ma[c.xsrfHeaderName || a.xsrfHeaderName] = q), f(c.method, O, d, k, ma, c.timeout, c.withCredentials, c.responseType, e(c.eventHandlers), e(c.uploadEventHandlers)));
        return u;
      }

      function G(a, b) {
        0 < b.length && (a += (-1 === a.indexOf("?") ? "?" : "&") + b);
        return a;
      }

      function t(a, b) {
        var c = a.split("?");
        if (2 < c.length) throw Kb("badjsonp", a);
        c = gc(c[1]);
        r(c, function (c, d) {
          if ("JSON_CALLBACK" === c) throw Kb("badjsonp", a);
          if (d === b) throw Kb("badjsonp", b, a);
        });
        return a += (-1 === a.indexOf("?") ? "?" : "&") + b + "=JSON_CALLBACK";
      }

      var N = k("$http");
      a.paramSerializer = A(a.paramSerializer) ? m.get(a.paramSerializer) : a.paramSerializer;
      var v = [];
      r(d, function (a) {
        v.unshift(A(a) ? m.get(a) : m.invoke(a));
      });
      var jc = Jg(c);
      n.pendingRequests = [];

      (function (a) {
        r(arguments, function (a) {
          n[a] = function (b, c) {
            return n(S({}, c || {}, {
              method: a,
              url: b
            }));
          };
        });
      })("get", "delete", "head", "jsonp");

      (function (a) {
        r(arguments, function (a) {
          n[a] = function (b, c, d) {
            return n(S({}, d || {}, {
              method: a,
              url: b,
              data: c
            }));
          };
        });
      })("post", "put", "patch");

      n.defaults = a;
      return n;
    }];
  }

  function Rf() {
    this.$get = function () {
      return function () {
        return new C.XMLHttpRequest();
      };
    };
  }

  function Qf() {
    this.$get = ["$browser", "$jsonpCallbacks", "$document", "$xhrFactory", function (a, b, d, c) {
      return Kg(a, c, a.defer, b, d[0]);
    }];
  }

  function Kg(a, b, d, c, e) {
    function f(a, b, d) {
      a = a.replace("JSON_CALLBACK", b);
      var f = e.createElement("script"),
          _m = null;
      f.type = "text/javascript";
      f.src = a;
      f.async = !0;

      _m = function m(a) {
        f.removeEventListener("load", _m);
        f.removeEventListener("error", _m);
        e.body.removeChild(f);
        f = null;
        var g = -1,
            s = "unknown";
        a && ("load" !== a.type || c.wasCalled(b) || (a = {
          type: "error"
        }), s = a.type, g = "error" === a.type ? 404 : 200);
        d && d(g, s);
      };

      f.addEventListener("load", _m);
      f.addEventListener("error", _m);
      e.body.appendChild(f);
      return _m;
    }

    return function (e, k, h, l, m, p, n, s, G, t) {
      function N(a) {
        J = "timeout" === a;
        qa && qa();
        y && y.abort();
      }

      function v(a, b, c, e, f, g) {
        w(P) && d.cancel(P);
        qa = y = null;
        a(b, c, e, f, g);
      }

      k = k || a.url();
      if ("jsonp" === K(e)) var q = c.createCallback(k),
          qa = f(k, q, function (a, b) {
        var d = 200 === a && c.getResponse(q);
        v(l, a, d, "", b, "complete");
        c.removeCallback(q);
      });else {
        var y = b(e, k),
            J = !1;
        y.open(e, k, !0);
        r(m, function (a, b) {
          w(a) && y.setRequestHeader(b, a);
        });

        y.onload = function () {
          var a = y.statusText || "",
              b = "response" in y ? y.response : y.responseText,
              c = 1223 === y.status ? 204 : y.status;
          0 === c && (c = b ? 200 : "file" === ga(k).protocol ? 404 : 0);
          v(l, c, b, y.getAllResponseHeaders(), a, "complete");
        };

        y.onerror = function () {
          v(l, -1, null, null, "", "error");
        };

        y.ontimeout = function () {
          v(l, -1, null, null, "", "timeout");
        };

        y.onabort = function () {
          v(l, -1, null, null, "", J ? "timeout" : "abort");
        };

        r(G, function (a, b) {
          y.addEventListener(b, a);
        });
        r(t, function (a, b) {
          y.upload.addEventListener(b, a);
        });
        n && (y.withCredentials = !0);
        if (s) try {
          y.responseType = s;
        } catch (I) {
          if ("json" !== s) throw I;
        }
        y.send(z(h) ? null : h);
      }
      if (0 < p) var P = d(function () {
        N("timeout");
      }, p);else p && B(p.then) && p.then(function () {
        N(w(p.$$timeoutId) ? "timeout" : "abort");
      });
    };
  }

  function Kf() {
    var a = "{{",
        b = "}}";

    this.startSymbol = function (b) {
      return b ? (a = b, this) : a;
    };

    this.endSymbol = function (a) {
      return a ? (b = a, this) : b;
    };

    this.$get = ["$parse", "$exceptionHandler", "$sce", function (d, c, e) {
      function f(a) {
        return "\\\\\\" + a;
      }

      function g(c) {
        return c.replace(p, a).replace(n, b);
      }

      function k(a, b, c, d) {
        var e = a.$watch(function (a) {
          e();
          return d(a);
        }, b, c);
        return e;
      }

      function h(f, h, n, p) {
        function v(a) {
          try {
            return a = n && !r ? e.getTrusted(n, a) : e.valueOf(a), p && !w(a) ? a : ic(a);
          } catch (b) {
            c(Ma.interr(f, b));
          }
        }

        var r = n === e.URL || n === e.MEDIA_URL;

        if (!f.length || -1 === f.indexOf(a)) {
          if (h) return;
          h = g(f);
          r && (h = e.getTrusted(n, h));
          h = ia(h);
          h.exp = f;
          h.expressions = [];
          h.$$watchDelegate = k;
          return h;
        }

        p = !!p;

        for (var q, y, J = 0, I = [], P, Q = f.length, M = [], L = [], u; J < Q;) {
          if (-1 !== (q = f.indexOf(a, J)) && -1 !== (y = f.indexOf(b, q + l))) J !== q && M.push(g(f.substring(J, q))), J = f.substring(q + l, y), I.push(J), J = y + m, L.push(M.length), M.push("");else {
            J !== Q && M.push(g(f.substring(J)));
            break;
          }
        }

        u = 1 === M.length && 1 === L.length;
        var R = r && u ? void 0 : v;
        P = I.map(function (a) {
          return d(a, R);
        });

        if (!h || I.length) {
          var x = function x(a) {
            for (var b = 0, c = I.length; b < c; b++) {
              if (p && z(a[b])) return;
              M[L[b]] = a[b];
            }

            if (r) return e.getTrusted(n, u ? M[0] : M.join(""));
            n && 1 < M.length && Ma.throwNoconcat(f);
            return M.join("");
          };

          return S(function (a) {
            var b = 0,
                d = I.length,
                e = Array(d);

            try {
              for (; b < d; b++) {
                e[b] = P[b](a);
              }

              return x(e);
            } catch (g) {
              c(Ma.interr(f, g));
            }
          }, {
            exp: f,
            expressions: I,
            $$watchDelegate: function $$watchDelegate(a, b) {
              var c;
              return a.$watchGroup(P, function (d, e) {
                var f = x(d);
                b.call(this, f, d !== e ? c : f, a);
                c = f;
              });
            }
          });
        }
      }

      var l = a.length,
          m = b.length,
          p = new RegExp(a.replace(/./g, f), "g"),
          n = new RegExp(b.replace(/./g, f), "g");

      h.startSymbol = function () {
        return a;
      };

      h.endSymbol = function () {
        return b;
      };

      return h;
    }];
  }

  function Lf() {
    this.$get = ["$$intervalFactory", "$window", function (a, b) {
      var d = {},
          c = function c(a) {
        b.clearInterval(a);
        delete d[a];
      },
          e = a(function (a, c, e) {
        a = b.setInterval(a, c);
        d[a] = e;
        return a;
      }, c);

      e.cancel = function (a) {
        if (!a) return !1;
        if (!a.hasOwnProperty("$$intervalId")) throw Lg("badprom");
        if (!d.hasOwnProperty(a.$$intervalId)) return !1;
        a = a.$$intervalId;
        var b = d[a],
            e = b.promise;
        e.$$state && (e.$$state.pur = !0);
        b.reject("canceled");
        c(a);
        return !0;
      };

      return e;
    }];
  }

  function Mf() {
    this.$get = ["$browser", "$q", "$$q", "$rootScope", function (a, b, d, c) {
      return function (e, f) {
        return function (g, k, h, l) {
          function m() {
            p ? g.apply(null, n) : g(s);
          }

          var p = 4 < arguments.length,
              n = p ? Ha.call(arguments, 4) : [],
              s = 0,
              G = w(l) && !l,
              t = (G ? d : b).defer(),
              r = t.promise;
          h = w(h) ? h : 0;
          r.$$intervalId = e(function () {
            G ? a.defer(m) : c.$evalAsync(m);
            t.notify(s++);
            0 < h && s >= h && (t.resolve(s), f(r.$$intervalId));
            G || c.$apply();
          }, k, t, G);
          return r;
        };
      };
    }];
  }

  function Ad(a, b) {
    var d = ga(a);
    b.$$protocol = d.protocol;
    b.$$host = d.hostname;
    b.$$port = fa(d.port) || Mg[d.protocol] || null;
  }

  function Bd(a, b, d) {
    if (Ng.test(a)) throw jb("badpath", a);
    var c = "/" !== a.charAt(0);
    c && (a = "/" + a);
    a = ga(a);

    for (var c = (c && "/" === a.pathname.charAt(0) ? a.pathname.substring(1) : a.pathname).split("/"), e = c.length; e--;) {
      c[e] = decodeURIComponent(c[e]), d && (c[e] = c[e].replace(/\//g, "%2F"));
    }

    d = c.join("/");
    b.$$path = d;
    b.$$search = gc(a.search);
    b.$$hash = decodeURIComponent(a.hash);
    b.$$path && "/" !== b.$$path.charAt(0) && (b.$$path = "/" + b.$$path);
  }

  function xc(a, b) {
    return a.slice(0, b.length) === b;
  }

  function xa(a, b) {
    if (xc(b, a)) return b.substr(a.length);
  }

  function Da(a) {
    var b = a.indexOf("#");
    return -1 === b ? a : a.substr(0, b);
  }

  function yc(a, b, d) {
    this.$$html5 = !0;
    d = d || "";
    Ad(a, this);

    this.$$parse = function (a) {
      var d = xa(b, a);
      if (!A(d)) throw jb("ipthprfx", a, b);
      Bd(d, this, !0);
      this.$$path || (this.$$path = "/");
      this.$$compose();
    };

    this.$$normalizeUrl = function (a) {
      return b + a.substr(1);
    };

    this.$$parseLinkUrl = function (c, e) {
      if (e && "#" === e[0]) return this.hash(e.slice(1)), !0;
      var f, g;
      w(f = xa(a, c)) ? (g = f, g = d && w(f = xa(d, f)) ? b + (xa("/", f) || f) : a + g) : w(f = xa(b, c)) ? g = b + f : b === c + "/" && (g = b);
      g && this.$$parse(g);
      return !!g;
    };
  }

  function zc(a, b, d) {
    Ad(a, this);

    this.$$parse = function (c) {
      var e = xa(a, c) || xa(b, c),
          f;
      z(e) || "#" !== e.charAt(0) ? this.$$html5 ? f = e : (f = "", z(e) && (a = c, this.replace())) : (f = xa(d, e), z(f) && (f = e));
      Bd(f, this, !1);
      c = this.$$path;
      var e = a,
          g = /^\/[A-Z]:(\/.*)/;
      xc(f, e) && (f = f.replace(e, ""));
      g.exec(f) || (c = (f = g.exec(c)) ? f[1] : c);
      this.$$path = c;
      this.$$compose();
    };

    this.$$normalizeUrl = function (b) {
      return a + (b ? d + b : "");
    };

    this.$$parseLinkUrl = function (b, d) {
      return Da(a) === Da(b) ? (this.$$parse(b), !0) : !1;
    };
  }

  function Cd(a, b, d) {
    this.$$html5 = !0;
    zc.apply(this, arguments);

    this.$$parseLinkUrl = function (c, e) {
      if (e && "#" === e[0]) return this.hash(e.slice(1)), !0;
      var f, g;
      a === Da(c) ? f = c : (g = xa(b, c)) ? f = a + d + g : b === c + "/" && (f = b);
      f && this.$$parse(f);
      return !!f;
    };

    this.$$normalizeUrl = function (b) {
      return a + d + b;
    };
  }

  function Lb(a) {
    return function () {
      return this[a];
    };
  }

  function Dd(a, b) {
    return function (d) {
      if (z(d)) return this[a];
      this[a] = b(d);
      this.$$compose();
      return this;
    };
  }

  function Tf() {
    var a = "!",
        b = {
      enabled: !1,
      requireBase: !0,
      rewriteLinks: !0
    };

    this.hashPrefix = function (b) {
      return w(b) ? (a = b, this) : a;
    };

    this.html5Mode = function (a) {
      if (Ga(a)) return b.enabled = a, this;

      if (D(a)) {
        Ga(a.enabled) && (b.enabled = a.enabled);
        Ga(a.requireBase) && (b.requireBase = a.requireBase);
        if (Ga(a.rewriteLinks) || A(a.rewriteLinks)) b.rewriteLinks = a.rewriteLinks;
        return this;
      }

      return b;
    };

    this.$get = ["$rootScope", "$browser", "$sniffer", "$rootElement", "$window", function (d, c, e, f, g) {
      function k(a, b) {
        return a === b || ga(a).href === ga(b).href;
      }

      function h(a, b, d) {
        var e = m.url(),
            f = m.$$state;

        try {
          c.url(a, b, d), m.$$state = c.state();
        } catch (g) {
          throw m.url(e), m.$$state = f, g;
        }
      }

      function l(a, b) {
        d.$broadcast("$locationChangeSuccess", m.absUrl(), a, m.$$state, b);
      }

      var m, p;
      p = c.baseHref();
      var n = c.url(),
          s;

      if (b.enabled) {
        if (!p && b.requireBase) throw jb("nobase");
        s = n.substring(0, n.indexOf("/", n.indexOf("//") + 2)) + (p || "/");
        p = e.history ? yc : Cd;
      } else s = Da(n), p = zc;

      var r = s.substr(0, Da(s).lastIndexOf("/") + 1);
      m = new p(s, r, "#" + a);
      m.$$parseLinkUrl(n, n);
      m.$$state = c.state();
      var t = /^\s*(javascript|mailto):/i;
      f.on("click", function (a) {
        var e = b.rewriteLinks;

        if (e && !a.ctrlKey && !a.metaKey && !a.shiftKey && 2 !== a.which && 2 !== a.button) {
          for (var g = x(a.target); "a" !== ua(g[0]);) {
            if (g[0] === f[0] || !(g = g.parent())[0]) return;
          }

          if (!A(e) || !z(g.attr(e))) {
            var e = g.prop("href"),
                h = g.attr("href") || g.attr("xlink:href");
            D(e) && "[object SVGAnimatedString]" === e.toString() && (e = ga(e.animVal).href);
            t.test(e) || !e || g.attr("target") || a.isDefaultPrevented() || !m.$$parseLinkUrl(e, h) || (a.preventDefault(), m.absUrl() !== c.url() && d.$apply());
          }
        }
      });
      m.absUrl() !== n && c.url(m.absUrl(), !0);
      var N = !0;
      c.onUrlChange(function (a, b) {
        xc(a, r) ? (d.$evalAsync(function () {
          var c = m.absUrl(),
              e = m.$$state,
              f;
          m.$$parse(a);
          m.$$state = b;
          f = d.$broadcast("$locationChangeStart", a, c, b, e).defaultPrevented;
          m.absUrl() === a && (f ? (m.$$parse(c), m.$$state = e, h(c, !1, e)) : (N = !1, l(c, e)));
        }), d.$$phase || d.$digest()) : g.location.href = a;
      });
      d.$watch(function () {
        if (N || m.$$urlUpdatedByLocation) {
          m.$$urlUpdatedByLocation = !1;
          var a = c.url(),
              b = m.absUrl(),
              f = c.state(),
              g = m.$$replace,
              n = !k(a, b) || m.$$html5 && e.history && f !== m.$$state;
          if (N || n) N = !1, d.$evalAsync(function () {
            var b = m.absUrl(),
                c = d.$broadcast("$locationChangeStart", b, a, m.$$state, f).defaultPrevented;
            m.absUrl() === b && (c ? (m.$$parse(a), m.$$state = f) : (n && h(b, g, f === m.$$state ? null : m.$$state), l(a, f)));
          });
        }

        m.$$replace = !1;
      });
      return m;
    }];
  }

  function Uf() {
    var a = !0,
        b = this;

    this.debugEnabled = function (b) {
      return w(b) ? (a = b, this) : a;
    };

    this.$get = ["$window", function (d) {
      function c(a) {
        cc(a) && (a.stack && f ? a = a.message && -1 === a.stack.indexOf(a.message) ? "Error: " + a.message + "\n" + a.stack : a.stack : a.sourceURL && (a = a.message + "\n" + a.sourceURL + ":" + a.line));
        return a;
      }

      function e(a) {
        var b = d.console || {},
            e = b[a] || b.log || E;
        return function () {
          var a = [];
          r(arguments, function (b) {
            a.push(c(b));
          });
          return Function.prototype.apply.call(e, b, a);
        };
      }

      var f = Ca || /\bEdge\//.test(d.navigator && d.navigator.userAgent);
      return {
        log: e("log"),
        info: e("info"),
        warn: e("warn"),
        error: e("error"),
        debug: function () {
          var c = e("debug");
          return function () {
            a && c.apply(b, arguments);
          };
        }()
      };
    }];
  }

  function Og(a) {
    return a + "";
  }

  function Pg(a, b) {
    return "undefined" !== typeof a ? a : b;
  }

  function Ed(a, b) {
    return "undefined" === typeof a ? b : "undefined" === typeof b ? a : a + b;
  }

  function Qg(a, b) {
    switch (a.type) {
      case q.MemberExpression:
        if (a.computed) return !1;
        break;

      case q.UnaryExpression:
        return 1;

      case q.BinaryExpression:
        return "+" !== a.operator ? 1 : !1;

      case q.CallExpression:
        return !1;
    }

    return void 0 === b ? Fd : b;
  }

  function Z(a, b, d) {
    var c,
        e,
        f = a.isPure = Qg(a, d);

    switch (a.type) {
      case q.Program:
        c = !0;
        r(a.body, function (a) {
          Z(a.expression, b, f);
          c = c && a.expression.constant;
        });
        a.constant = c;
        break;

      case q.Literal:
        a.constant = !0;
        a.toWatch = [];
        break;

      case q.UnaryExpression:
        Z(a.argument, b, f);
        a.constant = a.argument.constant;
        a.toWatch = a.argument.toWatch;
        break;

      case q.BinaryExpression:
        Z(a.left, b, f);
        Z(a.right, b, f);
        a.constant = a.left.constant && a.right.constant;
        a.toWatch = a.left.toWatch.concat(a.right.toWatch);
        break;

      case q.LogicalExpression:
        Z(a.left, b, f);
        Z(a.right, b, f);
        a.constant = a.left.constant && a.right.constant;
        a.toWatch = a.constant ? [] : [a];
        break;

      case q.ConditionalExpression:
        Z(a.test, b, f);
        Z(a.alternate, b, f);
        Z(a.consequent, b, f);
        a.constant = a.test.constant && a.alternate.constant && a.consequent.constant;
        a.toWatch = a.constant ? [] : [a];
        break;

      case q.Identifier:
        a.constant = !1;
        a.toWatch = [a];
        break;

      case q.MemberExpression:
        Z(a.object, b, f);
        a.computed && Z(a.property, b, f);
        a.constant = a.object.constant && (!a.computed || a.property.constant);
        a.toWatch = a.constant ? [] : [a];
        break;

      case q.CallExpression:
        c = d = a.filter ? !b(a.callee.name).$stateful : !1;
        e = [];
        r(a.arguments, function (a) {
          Z(a, b, f);
          c = c && a.constant;
          e.push.apply(e, a.toWatch);
        });
        a.constant = c;
        a.toWatch = d ? e : [a];
        break;

      case q.AssignmentExpression:
        Z(a.left, b, f);
        Z(a.right, b, f);
        a.constant = a.left.constant && a.right.constant;
        a.toWatch = [a];
        break;

      case q.ArrayExpression:
        c = !0;
        e = [];
        r(a.elements, function (a) {
          Z(a, b, f);
          c = c && a.constant;
          e.push.apply(e, a.toWatch);
        });
        a.constant = c;
        a.toWatch = e;
        break;

      case q.ObjectExpression:
        c = !0;
        e = [];
        r(a.properties, function (a) {
          Z(a.value, b, f);
          c = c && a.value.constant;
          e.push.apply(e, a.value.toWatch);
          a.computed && (Z(a.key, b, !1), c = c && a.key.constant, e.push.apply(e, a.key.toWatch));
        });
        a.constant = c;
        a.toWatch = e;
        break;

      case q.ThisExpression:
        a.constant = !1;
        a.toWatch = [];
        break;

      case q.LocalsExpression:
        a.constant = !1, a.toWatch = [];
    }
  }

  function Gd(a) {
    if (1 === a.length) {
      a = a[0].expression;
      var b = a.toWatch;
      return 1 !== b.length ? b : b[0] !== a ? b : void 0;
    }
  }

  function Hd(a) {
    return a.type === q.Identifier || a.type === q.MemberExpression;
  }

  function Id(a) {
    if (1 === a.body.length && Hd(a.body[0].expression)) return {
      type: q.AssignmentExpression,
      left: a.body[0].expression,
      right: {
        type: q.NGValueParameter
      },
      operator: "="
    };
  }

  function Jd(a) {
    this.$filter = a;
  }

  function Kd(a) {
    this.$filter = a;
  }

  function Mb(a, b, d) {
    this.ast = new q(a, d);
    this.astCompiler = d.csp ? new Kd(b) : new Jd(b);
  }

  function Ac(a) {
    return B(a.valueOf) ? a.valueOf() : Rg.call(a);
  }

  function Vf() {
    var a = T(),
        b = {
      "true": !0,
      "false": !1,
      "null": null,
      undefined: void 0
    },
        d,
        c;

    this.addLiteral = function (a, c) {
      b[a] = c;
    };

    this.setIdentifierFns = function (a, b) {
      d = a;
      c = b;
      return this;
    };

    this.$get = ["$filter", function (e) {
      function f(b, c) {
        var d, f;

        switch (_typeof(b)) {
          case "string":
            return f = b = b.trim(), d = a[f], d || (d = new Nb(G), d = new Mb(d, e, G).parse(b), a[f] = p(d)), s(d, c);

          case "function":
            return s(b, c);

          default:
            return s(E, c);
        }
      }

      function g(a, b, c) {
        return null == a || null == b ? a === b : "object" !== _typeof(a) || (a = Ac(a), "object" !== _typeof(a) || c) ? a === b || a !== a && b !== b : !1;
      }

      function k(a, b, c, d, e) {
        var f = d.inputs,
            h;

        if (1 === f.length) {
          var k = g,
              f = f[0];
          return a.$watch(function (a) {
            var b = f(a);
            g(b, k, f.isPure) || (h = d(a, void 0, void 0, [b]), k = b && Ac(b));
            return h;
          }, b, c, e);
        }

        for (var l = [], m = [], n = 0, p = f.length; n < p; n++) {
          l[n] = g, m[n] = null;
        }

        return a.$watch(function (a) {
          for (var b = !1, c = 0, e = f.length; c < e; c++) {
            var k = f[c](a);
            if (b || (b = !g(k, l[c], f[c].isPure))) m[c] = k, l[c] = k && Ac(k);
          }

          b && (h = d(a, void 0, void 0, m));
          return h;
        }, b, c, e);
      }

      function h(a, b, c, d, e) {
        function f() {
          h(m) && k();
        }

        function g(a, b, c, d) {
          m = u && d ? d[0] : n(a, b, c, d);
          h(m) && a.$$postDigest(f);
          return s(m);
        }

        var h = d.literal ? l : w,
            k,
            m,
            n = d.$$intercepted || d,
            s = d.$$interceptor || Ta,
            u = d.inputs && !n.inputs;
        g.literal = d.literal;
        g.constant = d.constant;
        g.inputs = d.inputs;
        p(g);
        return k = a.$watch(g, b, c, e);
      }

      function l(a) {
        var b = !0;
        r(a, function (a) {
          w(a) || (b = !1);
        });
        return b;
      }

      function m(a, b, c, d) {
        var e = a.$watch(function (a) {
          e();
          return d(a);
        }, b, c);
        return e;
      }

      function p(a) {
        a.constant ? a.$$watchDelegate = m : a.oneTime ? a.$$watchDelegate = h : a.inputs && (a.$$watchDelegate = k);
        return a;
      }

      function n(a, b) {
        function c(d) {
          return b(a(d));
        }

        c.$stateful = a.$stateful || b.$stateful;
        c.$$pure = a.$$pure && b.$$pure;
        return c;
      }

      function s(a, b) {
        if (!b) return a;
        a.$$interceptor && (b = n(a.$$interceptor, b), a = a.$$intercepted);

        var c = !1,
            d = function d(_d2, e, f, g) {
          _d2 = c && g ? g[0] : a(_d2, e, f, g);
          return b(_d2);
        };

        d.$$intercepted = a;
        d.$$interceptor = b;
        d.literal = a.literal;
        d.oneTime = a.oneTime;
        d.constant = a.constant;
        b.$stateful || (c = !a.inputs, d.inputs = a.inputs ? a.inputs : [a], b.$$pure || (d.inputs = d.inputs.map(function (a) {
          return a.isPure === Fd ? function (b) {
            return a(b);
          } : a;
        })));
        return p(d);
      }

      var G = {
        csp: Aa().noUnsafeEval,
        literals: Ia(b),
        isIdentifierStart: B(d) && d,
        isIdentifierContinue: B(c) && c
      };

      f.$$getAst = function (a) {
        var b = new Nb(G);
        return new Mb(b, e, G).getAst(a).ast;
      };

      return f;
    }];
  }

  function Xf() {
    var a = !0;
    this.$get = ["$rootScope", "$exceptionHandler", function (b, d) {
      return Ld(function (a) {
        b.$evalAsync(a);
      }, d, a);
    }];

    this.errorOnUnhandledRejections = function (b) {
      return w(b) ? (a = b, this) : a;
    };
  }

  function Yf() {
    var a = !0;
    this.$get = ["$browser", "$exceptionHandler", function (b, d) {
      return Ld(function (a) {
        b.defer(a);
      }, d, a);
    }];

    this.errorOnUnhandledRejections = function (b) {
      return w(b) ? (a = b, this) : a;
    };
  }

  function Ld(a, b, d) {
    function c() {
      return new e();
    }

    function e() {
      var a = this.promise = new f();

      this.resolve = function (b) {
        h(a, b);
      };

      this.reject = function (b) {
        m(a, b);
      };

      this.notify = function (b) {
        n(a, b);
      };
    }

    function f() {
      this.$$state = {
        status: 0
      };
    }

    function g() {
      for (; !w && x.length;) {
        var a = x.shift();

        if (!a.pur) {
          a.pur = !0;
          var c = a.value,
              c = "Possibly unhandled rejection: " + ("function" === typeof c ? c.toString().replace(/ \{[\s\S]*$/, "") : z(c) ? "undefined" : "string" !== typeof c ? Ie(c, void 0) : c);
          cc(a.value) ? b(a.value, c) : b(c);
        }
      }
    }

    function k(c) {
      !d || c.pending || 2 !== c.status || c.pur || (0 === w && 0 === x.length && a(g), x.push(c));
      !c.processScheduled && c.pending && (c.processScheduled = !0, ++w, a(function () {
        var e, f, k;
        k = c.pending;
        c.processScheduled = !1;
        c.pending = void 0;

        try {
          for (var l = 0, n = k.length; l < n; ++l) {
            c.pur = !0;
            f = k[l][0];
            e = k[l][c.status];

            try {
              B(e) ? h(f, e(c.value)) : 1 === c.status ? h(f, c.value) : m(f, c.value);
            } catch (p) {
              m(f, p), p && !0 === p.$$passToExceptionHandler && b(p);
            }
          }
        } finally {
          --w, d && 0 === w && a(g);
        }
      }));
    }

    function h(a, b) {
      a.$$state.status || (b === a ? p(a, v("qcycle", b)) : l(a, b));
    }

    function l(a, b) {
      function c(b) {
        g || (g = !0, l(a, b));
      }

      function d(b) {
        g || (g = !0, p(a, b));
      }

      function e(b) {
        n(a, b);
      }

      var f,
          g = !1;

      try {
        if (D(b) || B(b)) f = b.then;
        B(f) ? (a.$$state.status = -1, f.call(b, c, d, e)) : (a.$$state.value = b, a.$$state.status = 1, k(a.$$state));
      } catch (h) {
        d(h);
      }
    }

    function m(a, b) {
      a.$$state.status || p(a, b);
    }

    function p(a, b) {
      a.$$state.value = b;
      a.$$state.status = 2;
      k(a.$$state);
    }

    function n(c, d) {
      var e = c.$$state.pending;
      0 >= c.$$state.status && e && e.length && a(function () {
        for (var a, c, f = 0, g = e.length; f < g; f++) {
          c = e[f][0];
          a = e[f][3];

          try {
            n(c, B(a) ? a(d) : d);
          } catch (h) {
            b(h);
          }
        }
      });
    }

    function s(a) {
      var b = new f();
      m(b, a);
      return b;
    }

    function G(a, b, c) {
      var d = null;

      try {
        B(c) && (d = c());
      } catch (e) {
        return s(e);
      }

      return d && B(d.then) ? d.then(function () {
        return b(a);
      }, s) : b(a);
    }

    function t(a, b, c, d) {
      var e = new f();
      h(e, a);
      return e.then(b, c, d);
    }

    function q(a) {
      if (!B(a)) throw v("norslvr", a);
      var b = new f();
      a(function (a) {
        h(b, a);
      }, function (a) {
        m(b, a);
      });
      return b;
    }

    var v = F("$q", TypeError),
        w = 0,
        x = [];
    S(f.prototype, {
      then: function then(a, b, c) {
        if (z(a) && z(b) && z(c)) return this;
        var d = new f();
        this.$$state.pending = this.$$state.pending || [];
        this.$$state.pending.push([d, a, b, c]);
        0 < this.$$state.status && k(this.$$state);
        return d;
      },
      "catch": function _catch(a) {
        return this.then(null, a);
      },
      "finally": function _finally(a, b) {
        return this.then(function (b) {
          return G(b, y, a);
        }, function (b) {
          return G(b, s, a);
        }, b);
      }
    });
    var y = t;
    q.prototype = f.prototype;
    q.defer = c;
    q.reject = s;
    q.when = t;
    q.resolve = y;

    q.all = function (a) {
      var b = new f(),
          c = 0,
          d = H(a) ? [] : {};
      r(a, function (a, e) {
        c++;
        t(a).then(function (a) {
          d[e] = a;
          --c || h(b, d);
        }, function (a) {
          m(b, a);
        });
      });
      0 === c && h(b, d);
      return b;
    };

    q.race = function (a) {
      var b = c();
      r(a, function (a) {
        t(a).then(b.resolve, b.reject);
      });
      return b.promise;
    };

    return q;
  }

  function hg() {
    this.$get = ["$window", "$timeout", function (a, b) {
      var d = a.requestAnimationFrame || a.webkitRequestAnimationFrame,
          c = a.cancelAnimationFrame || a.webkitCancelAnimationFrame || a.webkitCancelRequestAnimationFrame,
          e = !!d,
          f = e ? function (a) {
        var b = d(a);
        return function () {
          c(b);
        };
      } : function (a) {
        var c = b(a, 16.66, !1);
        return function () {
          b.cancel(c);
        };
      };
      f.supported = e;
      return f;
    }];
  }

  function Wf() {
    function a(a) {
      function b() {
        this.$$watchers = this.$$nextSibling = this.$$childHead = this.$$childTail = null;
        this.$$listeners = {};
        this.$$listenerCount = {};
        this.$$watchersCount = 0;
        this.$id = ++pb;
        this.$$ChildScope = null;
        this.$$suspended = !1;
      }

      b.prototype = a;
      return b;
    }

    var b = 10,
        d = F("$rootScope"),
        c = null,
        e = null;

    this.digestTtl = function (a) {
      arguments.length && (b = a);
      return b;
    };

    this.$get = ["$exceptionHandler", "$parse", "$browser", function (f, g, k) {
      function h(a) {
        a.currentScope.$$destroyed = !0;
      }

      function l(a) {
        9 === Ca && (a.$$childHead && l(a.$$childHead), a.$$nextSibling && l(a.$$nextSibling));
        a.$parent = a.$$nextSibling = a.$$prevSibling = a.$$childHead = a.$$childTail = a.$root = a.$$watchers = null;
      }

      function m() {
        this.$id = ++pb;
        this.$$phase = this.$parent = this.$$watchers = this.$$nextSibling = this.$$prevSibling = this.$$childHead = this.$$childTail = null;
        this.$root = this;
        this.$$suspended = this.$$destroyed = !1;
        this.$$listeners = {};
        this.$$listenerCount = {};
        this.$$watchersCount = 0;
        this.$$isolateBindings = null;
      }

      function p(a) {
        if (v.$$phase) throw d("inprog", v.$$phase);
        v.$$phase = a;
      }

      function n(a, b) {
        do {
          a.$$watchersCount += b;
        } while (a = a.$parent);
      }

      function s(a, b, c) {
        do {
          a.$$listenerCount[c] -= b, 0 === a.$$listenerCount[c] && delete a.$$listenerCount[c];
        } while (a = a.$parent);
      }

      function G() {}

      function t() {
        for (; y.length;) {
          try {
            y.shift()();
          } catch (a) {
            f(a);
          }
        }

        e = null;
      }

      function q() {
        null === e && (e = k.defer(function () {
          v.$apply(t);
        }, null, "$applyAsync"));
      }

      m.prototype = {
        constructor: m,
        $new: function $new(b, c) {
          var d;
          c = c || this;
          b ? (d = new m(), d.$root = this.$root) : (this.$$ChildScope || (this.$$ChildScope = a(this)), d = new this.$$ChildScope());
          d.$parent = c;
          d.$$prevSibling = c.$$childTail;
          c.$$childHead ? (c.$$childTail.$$nextSibling = d, c.$$childTail = d) : c.$$childHead = c.$$childTail = d;
          (b || c !== this) && d.$on("$destroy", h);
          return d;
        },
        $watch: function $watch(a, b, d, e) {
          var f = g(a);
          b = B(b) ? b : E;
          if (f.$$watchDelegate) return f.$$watchDelegate(this, b, d, f, a);
          var h = this,
              k = h.$$watchers,
              l = {
            fn: b,
            last: G,
            get: f,
            exp: e || a,
            eq: !!d
          };
          c = null;
          k || (k = h.$$watchers = [], k.$$digestWatchIndex = -1);
          k.unshift(l);
          k.$$digestWatchIndex++;
          n(this, 1);
          return function () {
            var a = cb(k, l);
            0 <= a && (n(h, -1), a < k.$$digestWatchIndex && k.$$digestWatchIndex--);
            c = null;
          };
        },
        $watchGroup: function $watchGroup(a, b) {
          function c() {
            h = !1;

            try {
              k ? (k = !1, b(e, e, g)) : b(e, d, g);
            } finally {
              for (var f = 0; f < a.length; f++) {
                d[f] = e[f];
              }
            }
          }

          var d = Array(a.length),
              e = Array(a.length),
              f = [],
              g = this,
              h = !1,
              k = !0;

          if (!a.length) {
            var l = !0;
            g.$evalAsync(function () {
              l && b(e, e, g);
            });
            return function () {
              l = !1;
            };
          }

          if (1 === a.length) return this.$watch(a[0], function (a, c, f) {
            e[0] = a;
            d[0] = c;
            b(e, a === c ? e : d, f);
          });
          r(a, function (a, b) {
            var d = g.$watch(a, function (a) {
              e[b] = a;
              h || (h = !0, g.$evalAsync(c));
            });
            f.push(d);
          });
          return function () {
            for (; f.length;) {
              f.shift()();
            }
          };
        },
        $watchCollection: function $watchCollection(a, b) {
          function c(a) {
            e = a;
            var b, d, g, h;

            if (!z(e)) {
              if (D(e)) {
                if (ya(e)) for (f !== n && (f = n, t = f.length = 0, l++), a = e.length, t !== a && (l++, f.length = t = a), b = 0; b < a; b++) {
                  h = f[b], g = e[b], d = h !== h && g !== g, d || h === g || (l++, f[b] = g);
                } else {
                  f !== p && (f = p = {}, t = 0, l++);
                  a = 0;

                  for (b in e) {
                    ta.call(e, b) && (a++, g = e[b], h = f[b], b in f ? (d = h !== h && g !== g, d || h === g || (l++, f[b] = g)) : (t++, f[b] = g, l++));
                  }

                  if (t > a) for (b in l++, f) {
                    ta.call(e, b) || (t--, delete f[b]);
                  }
                }
              } else f !== e && (f = e, l++);
              return l;
            }
          }

          c.$$pure = g(a).literal;
          c.$stateful = !c.$$pure;
          var d = this,
              e,
              f,
              h,
              k = 1 < b.length,
              l = 0,
              m = g(a, c),
              n = [],
              p = {},
              s = !0,
              t = 0;
          return this.$watch(m, function () {
            s ? (s = !1, b(e, e, d)) : b(e, h, d);
            if (k) if (D(e)) {
              if (ya(e)) {
                h = Array(e.length);

                for (var a = 0; a < e.length; a++) {
                  h[a] = e[a];
                }
              } else for (a in h = {}, e) {
                ta.call(e, a) && (h[a] = e[a]);
              }
            } else h = e;
          });
        },
        $digest: function $digest() {
          var a,
              g,
              h,
              l,
              m,
              n,
              s,
              r = b,
              q,
              y = w.length ? v : this,
              N = [],
              z,
              A;
          p("$digest");
          k.$$checkUrlChange();
          this === v && null !== e && (k.defer.cancel(e), t());
          c = null;

          do {
            s = !1;
            q = y;

            for (n = 0; n < w.length; n++) {
              try {
                A = w[n], l = A.fn, l(A.scope, A.locals);
              } catch (C) {
                f(C);
              }

              c = null;
            }

            w.length = 0;

            a: do {
              if (n = !q.$$suspended && q.$$watchers) for (n.$$digestWatchIndex = n.length; n.$$digestWatchIndex--;) {
                try {
                  if (a = n[n.$$digestWatchIndex]) if (m = a.get, (g = m(q)) !== (h = a.last) && !(a.eq ? va(g, h) : X(g) && X(h))) s = !0, c = a, a.last = a.eq ? Ia(g, null) : g, l = a.fn, l(g, h === G ? g : h, q), 5 > r && (z = 4 - r, N[z] || (N[z] = []), N[z].push({
                    msg: B(a.exp) ? "fn: " + (a.exp.name || a.exp.toString()) : a.exp,
                    newVal: g,
                    oldVal: h
                  }));else if (a === c) {
                    s = !1;
                    break a;
                  }
                } catch (E) {
                  f(E);
                }
              }
              if (!(n = !q.$$suspended && q.$$watchersCount && q.$$childHead || q !== y && q.$$nextSibling)) for (; q !== y && !(n = q.$$nextSibling);) {
                q = q.$parent;
              }
            } while (q = n);

            if ((s || w.length) && !r--) throw v.$$phase = null, d("infdig", b, N);
          } while (s || w.length);

          for (v.$$phase = null; J < x.length;) {
            try {
              x[J++]();
            } catch (D) {
              f(D);
            }
          }

          x.length = J = 0;
          k.$$checkUrlChange();
        },
        $suspend: function $suspend() {
          this.$$suspended = !0;
        },
        $isSuspended: function $isSuspended() {
          return this.$$suspended;
        },
        $resume: function $resume() {
          this.$$suspended = !1;
        },
        $destroy: function $destroy() {
          if (!this.$$destroyed) {
            var a = this.$parent;
            this.$broadcast("$destroy");
            this.$$destroyed = !0;
            this === v && k.$$applicationDestroyed();
            n(this, -this.$$watchersCount);

            for (var b in this.$$listenerCount) {
              s(this, this.$$listenerCount[b], b);
            }

            a && a.$$childHead === this && (a.$$childHead = this.$$nextSibling);
            a && a.$$childTail === this && (a.$$childTail = this.$$prevSibling);
            this.$$prevSibling && (this.$$prevSibling.$$nextSibling = this.$$nextSibling);
            this.$$nextSibling && (this.$$nextSibling.$$prevSibling = this.$$prevSibling);
            this.$destroy = this.$digest = this.$apply = this.$evalAsync = this.$applyAsync = E;

            this.$on = this.$watch = this.$watchGroup = function () {
              return E;
            };

            this.$$listeners = {};
            this.$$nextSibling = null;
            l(this);
          }
        },
        $eval: function $eval(a, b) {
          return g(a)(this, b);
        },
        $evalAsync: function $evalAsync(a, b) {
          v.$$phase || w.length || k.defer(function () {
            w.length && v.$digest();
          }, null, "$evalAsync");
          w.push({
            scope: this,
            fn: g(a),
            locals: b
          });
        },
        $$postDigest: function $$postDigest(a) {
          x.push(a);
        },
        $apply: function $apply(a) {
          try {
            p("$apply");

            try {
              return this.$eval(a);
            } finally {
              v.$$phase = null;
            }
          } catch (b) {
            f(b);
          } finally {
            try {
              v.$digest();
            } catch (c) {
              throw f(c), c;
            }
          }
        },
        $applyAsync: function $applyAsync(a) {
          function b() {
            c.$eval(a);
          }

          var c = this;
          a && y.push(b);
          a = g(a);
          q();
        },
        $on: function $on(a, b) {
          var c = this.$$listeners[a];
          c || (this.$$listeners[a] = c = []);
          c.push(b);
          var d = this;

          do {
            d.$$listenerCount[a] || (d.$$listenerCount[a] = 0), d.$$listenerCount[a]++;
          } while (d = d.$parent);

          var e = this;
          return function () {
            var d = c.indexOf(b);
            -1 !== d && (delete c[d], s(e, 1, a));
          };
        },
        $emit: function $emit(a, b) {
          var c = [],
              d,
              e = this,
              g = !1,
              h = {
            name: a,
            targetScope: e,
            stopPropagation: function stopPropagation() {
              g = !0;
            },
            preventDefault: function preventDefault() {
              h.defaultPrevented = !0;
            },
            defaultPrevented: !1
          },
              k = db([h], arguments, 1),
              l,
              m;

          do {
            d = e.$$listeners[a] || c;
            h.currentScope = e;
            l = 0;

            for (m = d.length; l < m; l++) {
              if (d[l]) try {
                d[l].apply(null, k);
              } catch (n) {
                f(n);
              } else d.splice(l, 1), l--, m--;
            }

            if (g) break;
            e = e.$parent;
          } while (e);

          h.currentScope = null;
          return h;
        },
        $broadcast: function $broadcast(a, b) {
          var c = this,
              d = this,
              e = {
            name: a,
            targetScope: this,
            preventDefault: function preventDefault() {
              e.defaultPrevented = !0;
            },
            defaultPrevented: !1
          };
          if (!this.$$listenerCount[a]) return e;

          for (var g = db([e], arguments, 1), h, k; c = d;) {
            e.currentScope = c;
            d = c.$$listeners[a] || [];
            h = 0;

            for (k = d.length; h < k; h++) {
              if (d[h]) try {
                d[h].apply(null, g);
              } catch (l) {
                f(l);
              } else d.splice(h, 1), h--, k--;
            }

            if (!(d = c.$$listenerCount[a] && c.$$childHead || c !== this && c.$$nextSibling)) for (; c !== this && !(d = c.$$nextSibling);) {
              c = c.$parent;
            }
          }

          e.currentScope = null;
          return e;
        }
      };
      var v = new m(),
          w = v.$$asyncQueue = [],
          x = v.$$postDigestQueue = [],
          y = v.$$applyAsyncQueue = [],
          J = 0;
      return v;
    }];
  }

  function Le() {
    var a = /^\s*(https?|s?ftp|mailto|tel|file):/,
        b = /^\s*((https?|ftp|file|blob):|data:image\/)/;

    this.aHrefSanitizationWhitelist = function (b) {
      return w(b) ? (a = b, this) : a;
    };

    this.imgSrcSanitizationWhitelist = function (a) {
      return w(a) ? (b = a, this) : b;
    };

    this.$get = function () {
      return function (d, c) {
        var e = c ? b : a,
            f = ga(d && d.trim()).href;
        return "" === f || f.match(e) ? d : "unsafe:" + f;
      };
    };
  }

  function Sg(a) {
    if ("self" === a) return a;

    if (A(a)) {
      if (-1 < a.indexOf("***")) throw Ea("iwcard", a);
      a = Md(a).replace(/\\\*\\\*/g, ".*").replace(/\\\*/g, "[^:/.?&;]*");
      return new RegExp("^" + a + "$");
    }

    if (ab(a)) return new RegExp("^" + a.source + "$");
    throw Ea("imatcher");
  }

  function Nd(a) {
    var b = [];
    w(a) && r(a, function (a) {
      b.push(Sg(a));
    });
    return b;
  }

  function $f() {
    this.SCE_CONTEXTS = V;
    var a = ["self"],
        b = [];

    this.resourceUrlWhitelist = function (b) {
      arguments.length && (a = Nd(b));
      return a;
    };

    this.resourceUrlBlacklist = function (a) {
      arguments.length && (b = Nd(a));
      return b;
    };

    this.$get = ["$injector", "$$sanitizeUri", function (d, c) {
      function e(a, b) {
        var c;
        "self" === a ? (c = Bc(b, Od)) || (C.document.baseURI ? c = C.document.baseURI : (Na || (Na = C.document.createElement("a"), Na.href = ".", Na = Na.cloneNode(!1)), c = Na.href), c = Bc(b, c)) : c = !!a.exec(b.href);
        return c;
      }

      function f(a) {
        var b = function b(a) {
          this.$$unwrapTrustedValue = function () {
            return a;
          };
        };

        a && (b.prototype = new a());

        b.prototype.valueOf = function () {
          return this.$$unwrapTrustedValue();
        };

        b.prototype.toString = function () {
          return this.$$unwrapTrustedValue().toString();
        };

        return b;
      }

      var g = function g(a) {
        throw Ea("unsafe");
      };

      d.has("$sanitize") && (g = d.get("$sanitize"));
      var k = f(),
          h = {};
      h[V.HTML] = f(k);
      h[V.CSS] = f(k);
      h[V.MEDIA_URL] = f(k);
      h[V.URL] = f(h[V.MEDIA_URL]);
      h[V.JS] = f(k);
      h[V.RESOURCE_URL] = f(h[V.URL]);
      return {
        trustAs: function trustAs(a, b) {
          var c = h.hasOwnProperty(a) ? h[a] : null;
          if (!c) throw Ea("icontext", a, b);
          if (null === b || z(b) || "" === b) return b;
          if ("string" !== typeof b) throw Ea("itype", a);
          return new c(b);
        },
        getTrusted: function getTrusted(d, f) {
          if (null === f || z(f) || "" === f) return f;
          var k = h.hasOwnProperty(d) ? h[d] : null;
          if (k && f instanceof k) return f.$$unwrapTrustedValue();
          B(f.$$unwrapTrustedValue) && (f = f.$$unwrapTrustedValue());
          if (d === V.MEDIA_URL || d === V.URL) return c(f.toString(), d === V.MEDIA_URL);

          if (d === V.RESOURCE_URL) {
            var k = ga(f.toString()),
                n,
                s,
                r = !1;
            n = 0;

            for (s = a.length; n < s; n++) {
              if (e(a[n], k)) {
                r = !0;
                break;
              }
            }

            if (r) for (n = 0, s = b.length; n < s; n++) {
              if (e(b[n], k)) {
                r = !1;
                break;
              }
            }
            if (r) return f;
            throw Ea("insecurl", f.toString());
          }

          if (d === V.HTML) return g(f);
          throw Ea("unsafe");
        },
        valueOf: function valueOf(a) {
          return a instanceof k ? a.$$unwrapTrustedValue() : a;
        }
      };
    }];
  }

  function Zf() {
    var a = !0;

    this.enabled = function (b) {
      arguments.length && (a = !!b);
      return a;
    };

    this.$get = ["$parse", "$sceDelegate", function (b, d) {
      if (a && 8 > Ca) throw Ea("iequirks");
      var c = ja(V);

      c.isEnabled = function () {
        return a;
      };

      c.trustAs = d.trustAs;
      c.getTrusted = d.getTrusted;
      c.valueOf = d.valueOf;
      a || (c.trustAs = c.getTrusted = function (a, b) {
        return b;
      }, c.valueOf = Ta);

      c.parseAs = function (a, d) {
        var e = b(d);
        return e.literal && e.constant ? e : b(d, function (b) {
          return c.getTrusted(a, b);
        });
      };

      var e = c.parseAs,
          f = c.getTrusted,
          g = c.trustAs;
      r(V, function (a, b) {
        var d = K(b);

        c[("parse_as_" + d).replace(Cc, wb)] = function (b) {
          return e(a, b);
        };

        c[("get_trusted_" + d).replace(Cc, wb)] = function (b) {
          return f(a, b);
        };

        c[("trust_as_" + d).replace(Cc, wb)] = function (b) {
          return g(a, b);
        };
      });
      return c;
    }];
  }

  function ag() {
    this.$get = ["$window", "$document", function (a, b) {
      var d = {},
          c = !((!a.nw || !a.nw.process) && a.chrome && (a.chrome.app && a.chrome.app.runtime || !a.chrome.app && a.chrome.runtime && a.chrome.runtime.id)) && a.history && a.history.pushState,
          e = fa((/android (\d+)/.exec(K((a.navigator || {}).userAgent)) || [])[1]),
          f = /Boxee/i.test((a.navigator || {}).userAgent),
          g = b[0] || {},
          k = g.body && g.body.style,
          h = !1,
          l = !1;
      k && (h = !!("transition" in k || "webkitTransition" in k), l = !!("animation" in k || "webkitAnimation" in k));
      return {
        history: !(!c || 4 > e || f),
        hasEvent: function hasEvent(a) {
          if ("input" === a && Ca) return !1;

          if (z(d[a])) {
            var b = g.createElement("div");
            d[a] = "on" + a in b;
          }

          return d[a];
        },
        csp: Aa(),
        transitions: h,
        animations: l,
        android: e
      };
    }];
  }

  function bg() {
    this.$get = ia(function (a) {
      return new Tg(a);
    });
  }

  function Tg(a) {
    function b() {
      var a = e.pop();
      return a && a.cb;
    }

    function d(a) {
      for (var b = e.length - 1; 0 <= b; --b) {
        var c = e[b];
        if (c.type === a) return e.splice(b, 1), c.cb;
      }
    }

    var c = {},
        e = [],
        f = this.ALL_TASKS_TYPE = "$$all$$",
        g = this.DEFAULT_TASK_TYPE = "$$default$$";

    this.completeTask = function (e, h) {
      h = h || g;

      try {
        e();
      } finally {
        var l;
        l = h || g;
        c[l] && (c[l]--, c[f]--);
        l = c[h];
        var m = c[f];
        if (!m || !l) for (l = m ? d : b; m = l(h);) {
          try {
            m();
          } catch (p) {
            a.error(p);
          }
        }
      }
    };

    this.incTaskCount = function (a) {
      a = a || g;
      c[a] = (c[a] || 0) + 1;
      c[f] = (c[f] || 0) + 1;
    };

    this.notifyWhenNoPendingTasks = function (a, b) {
      b = b || f;
      c[b] ? e.push({
        type: b,
        cb: a
      }) : a();
    };
  }

  function dg() {
    var a;

    this.httpOptions = function (b) {
      return b ? (a = b, this) : a;
    };

    this.$get = ["$exceptionHandler", "$templateCache", "$http", "$q", "$sce", function (b, d, c, e, f) {
      function g(k, h) {
        g.totalPendingRequests++;
        if (!A(k) || z(d.get(k))) k = f.getTrustedResourceUrl(k);
        var l = c.defaults && c.defaults.transformResponse;
        H(l) ? l = l.filter(function (a) {
          return a !== vc;
        }) : l === vc && (l = null);
        return c.get(k, S({
          cache: d,
          transformResponse: l
        }, a))["finally"](function () {
          g.totalPendingRequests--;
        }).then(function (a) {
          return d.put(k, a.data);
        }, function (a) {
          h || (a = Ug("tpload", k, a.status, a.statusText), b(a));
          return e.reject(a);
        });
      }

      g.totalPendingRequests = 0;
      return g;
    }];
  }

  function eg() {
    this.$get = ["$rootScope", "$browser", "$location", function (a, b, d) {
      return {
        findBindings: function findBindings(a, b, d) {
          a = a.getElementsByClassName("ng-binding");
          var g = [];
          r(a, function (a) {
            var c = ca.element(a).data("$binding");
            c && r(c, function (c) {
              d ? new RegExp("(^|\\s)" + Md(b) + "(\\s|\\||$)").test(c) && g.push(a) : -1 !== c.indexOf(b) && g.push(a);
            });
          });
          return g;
        },
        findModels: function findModels(a, b, d) {
          for (var g = ["ng-", "data-ng-", "ng\\:"], k = 0; k < g.length; ++k) {
            var h = a.querySelectorAll("[" + g[k] + "model" + (d ? "=" : "*=") + '"' + b + '"]');
            if (h.length) return h;
          }
        },
        getLocation: function getLocation() {
          return d.url();
        },
        setLocation: function setLocation(b) {
          b !== d.url() && (d.url(b), a.$digest());
        },
        whenStable: function whenStable(a) {
          b.notifyWhenNoOutstandingRequests(a);
        }
      };
    }];
  }

  function fg() {
    this.$get = ["$rootScope", "$browser", "$q", "$$q", "$exceptionHandler", function (a, b, d, c, e) {
      function f(f, h, l) {
        B(f) || (l = h, h = f, f = E);
        var m = Ha.call(arguments, 3),
            p = w(l) && !l,
            n = (p ? c : d).defer(),
            s = n.promise,
            r;
        r = b.defer(function () {
          try {
            n.resolve(f.apply(null, m));
          } catch (b) {
            n.reject(b), e(b);
          } finally {
            delete g[s.$$timeoutId];
          }

          p || a.$apply();
        }, h, "$timeout");
        s.$$timeoutId = r;
        g[r] = n;
        return s;
      }

      var g = {};

      f.cancel = function (a) {
        if (!a) return !1;
        if (!a.hasOwnProperty("$$timeoutId")) throw Vg("badprom");
        if (!g.hasOwnProperty(a.$$timeoutId)) return !1;
        a = a.$$timeoutId;
        var c = g[a],
            d = c.promise;
        d.$$state && (d.$$state.pur = !0);
        c.reject("canceled");
        delete g[a];
        return b.defer.cancel(a);
      };

      return f;
    }];
  }

  function ga(a) {
    if (!A(a)) return a;
    Ca && (aa.setAttribute("href", a), a = aa.href);
    aa.setAttribute("href", a);
    a = aa.hostname;
    !Wg && -1 < a.indexOf(":") && (a = "[" + a + "]");
    return {
      href: aa.href,
      protocol: aa.protocol ? aa.protocol.replace(/:$/, "") : "",
      host: aa.host,
      search: aa.search ? aa.search.replace(/^\?/, "") : "",
      hash: aa.hash ? aa.hash.replace(/^#/, "") : "",
      hostname: a,
      port: aa.port,
      pathname: "/" === aa.pathname.charAt(0) ? aa.pathname : "/" + aa.pathname
    };
  }

  function Jg(a) {
    var b = [Od].concat(a.map(ga));
    return function (a) {
      a = ga(a);
      return b.some(Bc.bind(null, a));
    };
  }

  function Bc(a, b) {
    a = ga(a);
    b = ga(b);
    return a.protocol === b.protocol && a.host === b.host;
  }

  function gg() {
    this.$get = ia(C);
  }

  function Pd(a) {
    function b(a) {
      try {
        return decodeURIComponent(a);
      } catch (b) {
        return a;
      }
    }

    var d = a[0] || {},
        c = {},
        e = "";
    return function () {
      var a, g, k, h, l;

      try {
        a = d.cookie || "";
      } catch (m) {
        a = "";
      }

      if (a !== e) for (e = a, a = e.split("; "), c = {}, k = 0; k < a.length; k++) {
        g = a[k], h = g.indexOf("="), 0 < h && (l = b(g.substring(0, h)), z(c[l]) && (c[l] = b(g.substring(h + 1))));
      }
      return c;
    };
  }

  function kg() {
    this.$get = Pd;
  }

  function dd(a) {
    function b(d, c) {
      if (D(d)) {
        var e = {};
        r(d, function (a, c) {
          e[c] = b(c, a);
        });
        return e;
      }

      return a.factory(d + "Filter", c);
    }

    this.register = b;
    this.$get = ["$injector", function (a) {
      return function (b) {
        return a.get(b + "Filter");
      };
    }];
    b("currency", Qd);
    b("date", Rd);
    b("filter", Xg);
    b("json", Yg);
    b("limitTo", Zg);
    b("lowercase", $g);
    b("number", Sd);
    b("orderBy", Td);
    b("uppercase", ah);
  }

  function Xg() {
    return function (a, b, d, c) {
      if (!ya(a)) {
        if (null == a) return a;
        throw F("filter")("notarray", a);
      }

      c = c || "$";
      var e;

      switch (Dc(b)) {
        case "function":
          break;

        case "boolean":
        case "null":
        case "number":
        case "string":
          e = !0;

        case "object":
          b = bh(b, d, c, e);
          break;

        default:
          return a;
      }

      return Array.prototype.filter.call(a, b);
    };
  }

  function bh(a, b, d, c) {
    var e = D(a) && d in a;
    !0 === b ? b = va : B(b) || (b = function b(a, _b) {
      if (z(a)) return !1;
      if (null === a || null === _b) return a === _b;
      if (D(_b) || D(a) && !bc(a)) return !1;
      a = K("" + a);
      _b = K("" + _b);
      return -1 !== a.indexOf(_b);
    });
    return function (f) {
      return e && !D(f) ? Fa(f, a[d], b, d, !1) : Fa(f, a, b, d, c);
    };
  }

  function Fa(a, b, d, c, e, f) {
    var g = Dc(a),
        k = Dc(b);
    if ("string" === k && "!" === b.charAt(0)) return !Fa(a, b.substring(1), d, c, e);
    if (H(a)) return a.some(function (a) {
      return Fa(a, b, d, c, e);
    });

    switch (g) {
      case "object":
        var h;

        if (e) {
          for (h in a) {
            if (h.charAt && "$" !== h.charAt(0) && Fa(a[h], b, d, c, !0)) return !0;
          }

          return f ? !1 : Fa(a, b, d, c, !1);
        }

        if ("object" === k) {
          for (h in b) {
            if (f = b[h], !B(f) && !z(f) && (g = h === c, !Fa(g ? a : a[h], f, d, c, g, g))) return !1;
          }

          return !0;
        }

        return d(a, b);

      case "function":
        return !1;

      default:
        return d(a, b);
    }
  }

  function Dc(a) {
    return null === a ? "null" : _typeof(a);
  }

  function Qd(a) {
    var b = a.NUMBER_FORMATS;
    return function (a, c, e) {
      z(c) && (c = b.CURRENCY_SYM);
      z(e) && (e = b.PATTERNS[1].maxFrac);
      var f = c ? /\u00A4/g : /\s*\u00A4\s*/g;
      return null == a ? a : Ud(a, b.PATTERNS[1], b.GROUP_SEP, b.DECIMAL_SEP, e).replace(f, c);
    };
  }

  function Sd(a) {
    var b = a.NUMBER_FORMATS;
    return function (a, c) {
      return null == a ? a : Ud(a, b.PATTERNS[0], b.GROUP_SEP, b.DECIMAL_SEP, c);
    };
  }

  function ch(a) {
    var b = 0,
        d,
        c,
        e,
        f,
        g;
    -1 < (c = a.indexOf(Vd)) && (a = a.replace(Vd, ""));
    0 < (e = a.search(/e/i)) ? (0 > c && (c = e), c += +a.slice(e + 1), a = a.substring(0, e)) : 0 > c && (c = a.length);

    for (e = 0; a.charAt(e) === Ec; e++) {
      ;
    }

    if (e === (g = a.length)) d = [0], c = 1;else {
      for (g--; a.charAt(g) === Ec;) {
        g--;
      }

      c -= e;
      d = [];

      for (f = 0; e <= g; e++, f++) {
        d[f] = +a.charAt(e);
      }
    }
    c > Wd && (d = d.splice(0, Wd - 1), b = c - 1, c = 1);
    return {
      d: d,
      e: b,
      i: c
    };
  }

  function dh(a, b, d, c) {
    var e = a.d,
        f = e.length - a.i;
    b = z(b) ? Math.min(Math.max(d, f), c) : +b;
    d = b + a.i;
    c = e[d];

    if (0 < d) {
      e.splice(Math.max(a.i, d));

      for (var g = d; g < e.length; g++) {
        e[g] = 0;
      }
    } else for (f = Math.max(0, f), a.i = 1, e.length = Math.max(1, d = b + 1), e[0] = 0, g = 1; g < d; g++) {
      e[g] = 0;
    }

    if (5 <= c) if (0 > d - 1) {
      for (c = 0; c > d; c--) {
        e.unshift(0), a.i++;
      }

      e.unshift(1);
      a.i++;
    } else e[d - 1]++;

    for (; f < Math.max(0, b); f++) {
      e.push(0);
    }

    if (b = e.reduceRight(function (a, b, c, d) {
      b += a;
      d[c] = b % 10;
      return Math.floor(b / 10);
    }, 0)) e.unshift(b), a.i++;
  }

  function Ud(a, b, d, c, e) {
    if (!A(a) && !W(a) || isNaN(a)) return "";
    var f = !isFinite(a),
        g = !1,
        k = Math.abs(a) + "",
        h = "";
    if (f) h = "\u221E";else {
      g = ch(k);
      dh(g, e, b.minFrac, b.maxFrac);
      h = g.d;
      k = g.i;
      e = g.e;
      f = [];

      for (g = h.reduce(function (a, b) {
        return a && !b;
      }, !0); 0 > k;) {
        h.unshift(0), k++;
      }

      0 < k ? f = h.splice(k, h.length) : (f = h, h = [0]);
      k = [];

      for (h.length >= b.lgSize && k.unshift(h.splice(-b.lgSize, h.length).join("")); h.length > b.gSize;) {
        k.unshift(h.splice(-b.gSize, h.length).join(""));
      }

      h.length && k.unshift(h.join(""));
      h = k.join(d);
      f.length && (h += c + f.join(""));
      e && (h += "e+" + e);
    }
    return 0 > a && !g ? b.negPre + h + b.negSuf : b.posPre + h + b.posSuf;
  }

  function Ob(a, b, d, c) {
    var e = "";
    if (0 > a || c && 0 >= a) c ? a = -a + 1 : (a = -a, e = "-");

    for (a = "" + a; a.length < b;) {
      a = Ec + a;
    }

    d && (a = a.substr(a.length - b));
    return e + a;
  }

  function ea(a, b, d, c, e) {
    d = d || 0;
    return function (f) {
      f = f["get" + a]();
      if (0 < d || f > -d) f += d;
      0 === f && -12 === d && (f = 12);
      return Ob(f, b, c, e);
    };
  }

  function kb(a, b, d) {
    return function (c, e) {
      var f = c["get" + a](),
          g = ub((d ? "STANDALONE" : "") + (b ? "SHORT" : "") + a);
      return e[g][f];
    };
  }

  function Xd(a) {
    var b = new Date(a, 0, 1).getDay();
    return new Date(a, 0, (4 >= b ? 5 : 12) - b);
  }

  function Yd(a) {
    return function (b) {
      var d = Xd(b.getFullYear());
      b = +new Date(b.getFullYear(), b.getMonth(), b.getDate() + (4 - b.getDay())) - +d;
      b = 1 + Math.round(b / 6048E5);
      return Ob(b, a);
    };
  }

  function Fc(a, b) {
    return 0 >= a.getFullYear() ? b.ERAS[0] : b.ERAS[1];
  }

  function Rd(a) {
    function b(a) {
      var b;

      if (b = a.match(d)) {
        a = new Date(0);
        var f = 0,
            g = 0,
            k = b[8] ? a.setUTCFullYear : a.setFullYear,
            h = b[8] ? a.setUTCHours : a.setHours;
        b[9] && (f = fa(b[9] + b[10]), g = fa(b[9] + b[11]));
        k.call(a, fa(b[1]), fa(b[2]) - 1, fa(b[3]));
        f = fa(b[4] || 0) - f;
        g = fa(b[5] || 0) - g;
        k = fa(b[6] || 0);
        b = Math.round(1E3 * parseFloat("0." + (b[7] || 0)));
        h.call(a, f, g, k, b);
      }

      return a;
    }

    var d = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;
    return function (c, d, f) {
      var g = "",
          k = [],
          h,
          l;
      d = d || "mediumDate";
      d = a.DATETIME_FORMATS[d] || d;
      A(c) && (c = eh.test(c) ? fa(c) : b(c));
      W(c) && (c = new Date(c));
      if (!ha(c) || !isFinite(c.getTime())) return c;

      for (; d;) {
        (l = fh.exec(d)) ? (k = db(k, l, 1), d = k.pop()) : (k.push(d), d = null);
      }

      var m = c.getTimezoneOffset();
      f && (m = ec(f, m), c = fc(c, f, !0));
      r(k, function (b) {
        h = gh[b];
        g += h ? h(c, a.DATETIME_FORMATS, m) : "''" === b ? "'" : b.replace(/(^'|'$)/g, "").replace(/''/g, "'");
      });
      return g;
    };
  }

  function Yg() {
    return function (a, b) {
      z(b) && (b = 2);
      return eb(a, b);
    };
  }

  function Zg() {
    return function (a, b, d) {
      b = Infinity === Math.abs(Number(b)) ? Number(b) : fa(b);
      if (X(b)) return a;
      W(a) && (a = a.toString());
      if (!ya(a)) return a;
      d = !d || isNaN(d) ? 0 : fa(d);
      d = 0 > d ? Math.max(0, a.length + d) : d;
      return 0 <= b ? Gc(a, d, d + b) : 0 === d ? Gc(a, b, a.length) : Gc(a, Math.max(0, d + b), d);
    };
  }

  function Gc(a, b, d) {
    return A(a) ? a.slice(b, d) : Ha.call(a, b, d);
  }

  function Td(a) {
    function b(b) {
      return b.map(function (b) {
        var c = 1,
            d = Ta;
        if (B(b)) d = b;else if (A(b)) {
          if ("+" === b.charAt(0) || "-" === b.charAt(0)) c = "-" === b.charAt(0) ? -1 : 1, b = b.substring(1);
          if ("" !== b && (d = a(b), d.constant)) var e = d(),
              d = function d(a) {
            return a[e];
          };
        }
        return {
          get: d,
          descending: c
        };
      });
    }

    function d(a) {
      switch (_typeof(a)) {
        case "number":
        case "boolean":
        case "string":
          return !0;

        default:
          return !1;
      }
    }

    function c(a, b) {
      var c = 0,
          d = a.type,
          h = b.type;

      if (d === h) {
        var h = a.value,
            l = b.value;
        "string" === d ? (h = h.toLowerCase(), l = l.toLowerCase()) : "object" === d && (D(h) && (h = a.index), D(l) && (l = b.index));
        h !== l && (c = h < l ? -1 : 1);
      } else c = "undefined" === d ? 1 : "undefined" === h ? -1 : "null" === d ? 1 : "null" === h ? -1 : d < h ? -1 : 1;

      return c;
    }

    return function (a, f, g, k) {
      if (null == a) return a;
      if (!ya(a)) throw F("orderBy")("notarray", a);
      H(f) || (f = [f]);
      0 === f.length && (f = ["+"]);
      var h = b(f),
          l = g ? -1 : 1,
          m = B(k) ? k : c;
      a = Array.prototype.map.call(a, function (a, b) {
        return {
          value: a,
          tieBreaker: {
            value: b,
            type: "number",
            index: b
          },
          predicateValues: h.map(function (c) {
            var e = c.get(a);
            c = _typeof(e);
            if (null === e) c = "null";else if ("object" === c) a: {
              if (B(e.valueOf) && (e = e.valueOf(), d(e))) break a;
              bc(e) && (e = e.toString(), d(e));
            }
            return {
              value: e,
              type: c,
              index: b
            };
          })
        };
      });
      a.sort(function (a, b) {
        for (var d = 0, e = h.length; d < e; d++) {
          var f = m(a.predicateValues[d], b.predicateValues[d]);
          if (f) return f * h[d].descending * l;
        }

        return (m(a.tieBreaker, b.tieBreaker) || c(a.tieBreaker, b.tieBreaker)) * l;
      });
      return a = a.map(function (a) {
        return a.value;
      });
    };
  }

  function Ra(a) {
    B(a) && (a = {
      link: a
    });
    a.restrict = a.restrict || "AC";
    return ia(a);
  }

  function Pb(a, b, d, c, e) {
    this.$$controls = [];
    this.$error = {};
    this.$$success = {};
    this.$pending = void 0;
    this.$name = e(b.name || b.ngForm || "")(d);
    this.$dirty = !1;
    this.$valid = this.$pristine = !0;
    this.$submitted = this.$invalid = !1;
    this.$$parentForm = lb;
    this.$$element = a;
    this.$$animate = c;
    Zd(this);
  }

  function Zd(a) {
    a.$$classCache = {};
    a.$$classCache[$d] = !(a.$$classCache[mb] = a.$$element.hasClass(mb));
  }

  function ae(a) {
    function b(a, b, c) {
      c && !a.$$classCache[b] ? (a.$$animate.addClass(a.$$element, b), a.$$classCache[b] = !0) : !c && a.$$classCache[b] && (a.$$animate.removeClass(a.$$element, b), a.$$classCache[b] = !1);
    }

    function d(a, c, d) {
      c = c ? "-" + Vc(c, "-") : "";
      b(a, mb + c, !0 === d);
      b(a, $d + c, !1 === d);
    }

    var c = a.set,
        e = a.unset;

    a.clazz.prototype.$setValidity = function (a, g, k) {
      z(g) ? (this.$pending || (this.$pending = {}), c(this.$pending, a, k)) : (this.$pending && e(this.$pending, a, k), be(this.$pending) && (this.$pending = void 0));
      Ga(g) ? g ? (e(this.$error, a, k), c(this.$$success, a, k)) : (c(this.$error, a, k), e(this.$$success, a, k)) : (e(this.$error, a, k), e(this.$$success, a, k));
      this.$pending ? (b(this, "ng-pending", !0), this.$valid = this.$invalid = void 0, d(this, "", null)) : (b(this, "ng-pending", !1), this.$valid = be(this.$error), this.$invalid = !this.$valid, d(this, "", this.$valid));
      g = this.$pending && this.$pending[a] ? void 0 : this.$error[a] ? !1 : this.$$success[a] ? !0 : null;
      d(this, a, g);
      this.$$parentForm.$setValidity(a, g, this);
    };
  }

  function be(a) {
    if (a) for (var b in a) {
      if (a.hasOwnProperty(b)) return !1;
    }
    return !0;
  }

  function Hc(a) {
    a.$formatters.push(function (b) {
      return a.$isEmpty(b) ? b : b.toString();
    });
  }

  function Sa(a, b, d, c, e, f) {
    var g = K(b[0].type);

    if (!e.android) {
      var k = !1;
      b.on("compositionstart", function () {
        k = !0;
      });
      b.on("compositionupdate", function (a) {
        if (z(a.data) || "" === a.data) k = !1;
      });
      b.on("compositionend", function () {
        k = !1;
        l();
      });
    }

    var h,
        l = function l(a) {
      h && (f.defer.cancel(h), h = null);

      if (!k) {
        var e = b.val();
        a = a && a.type;
        "password" === g || d.ngTrim && "false" === d.ngTrim || (e = U(e));
        (c.$viewValue !== e || "" === e && c.$$hasNativeValidators) && c.$setViewValue(e, a);
      }
    };

    if (e.hasEvent("input")) b.on("input", l);else {
      var m = function m(a, b, c) {
        h || (h = f.defer(function () {
          h = null;
          b && b.value === c || l(a);
        }));
      };

      b.on("keydown", function (a) {
        var b = a.keyCode;
        91 === b || 15 < b && 19 > b || 37 <= b && 40 >= b || m(a, this, this.value);
      });
      if (e.hasEvent("paste")) b.on("paste cut drop", m);
    }
    b.on("change", l);
    if (ce[g] && c.$$hasNativeValidators && g === d.type) b.on("keydown wheel mousedown", function (a) {
      if (!h) {
        var b = this.validity,
            c = b.badInput,
            d = b.typeMismatch;
        h = f.defer(function () {
          h = null;
          b.badInput === c && b.typeMismatch === d || l(a);
        });
      }
    });

    c.$render = function () {
      var a = c.$isEmpty(c.$viewValue) ? "" : c.$viewValue;
      b.val() !== a && b.val(a);
    };
  }

  function Qb(a, b) {
    return function (d, c) {
      var e, f;
      if (ha(d)) return d;

      if (A(d)) {
        '"' === d.charAt(0) && '"' === d.charAt(d.length - 1) && (d = d.substring(1, d.length - 1));
        if (hh.test(d)) return new Date(d);
        a.lastIndex = 0;
        if (e = a.exec(d)) return e.shift(), f = c ? {
          yyyy: c.getFullYear(),
          MM: c.getMonth() + 1,
          dd: c.getDate(),
          HH: c.getHours(),
          mm: c.getMinutes(),
          ss: c.getSeconds(),
          sss: c.getMilliseconds() / 1E3
        } : {
          yyyy: 1970,
          MM: 1,
          dd: 1,
          HH: 0,
          mm: 0,
          ss: 0,
          sss: 0
        }, r(e, function (a, c) {
          c < b.length && (f[b[c]] = +a);
        }), e = new Date(f.yyyy, f.MM - 1, f.dd, f.HH, f.mm, f.ss || 0, 1E3 * f.sss || 0), 100 > f.yyyy && e.setFullYear(f.yyyy), e;
      }

      return NaN;
    };
  }

  function nb(a, b, d, c) {
    return function (e, f, g, k, h, l, m, p) {
      function n(a) {
        return a && !(a.getTime && a.getTime() !== a.getTime());
      }

      function s(a) {
        return w(a) && !ha(a) ? r(a) || void 0 : a;
      }

      function r(a, b) {
        var c = k.$options.getOption("timezone");
        v && v !== c && (b = Sc(b, ec(v)));
        var e = d(a, b);
        !isNaN(e) && c && (e = fc(e, c));
        return e;
      }

      Ic(e, f, g, k, a);
      Sa(e, f, g, k, h, l);
      var t = "time" === a || "datetimelocal" === a,
          q,
          v;
      k.$parsers.push(function (c) {
        if (k.$isEmpty(c)) return null;
        if (b.test(c)) return r(c, q);
        k.$$parserName = a;
      });
      k.$formatters.push(function (a) {
        if (a && !ha(a)) throw ob("datefmt", a);

        if (n(a)) {
          q = a;
          var b = k.$options.getOption("timezone");
          b && (v = b, q = fc(q, b, !0));
          var d = c;
          t && A(k.$options.getOption("timeSecondsFormat")) && (d = c.replace("ss.sss", k.$options.getOption("timeSecondsFormat")).replace(/:$/, ""));
          a = m("date")(a, d, b);
          t && k.$options.getOption("timeStripZeroSeconds") && (a = a.replace(/(?::00)?(?:\.000)?$/, ""));
          return a;
        }

        v = q = null;
        return "";
      });

      if (w(g.min) || g.ngMin) {
        var x = g.min || p(g.ngMin)(e),
            B = s(x);

        k.$validators.min = function (a) {
          return !n(a) || z(B) || d(a) >= B;
        };

        g.$observe("min", function (a) {
          a !== x && (B = s(a), x = a, k.$validate());
        });
      }

      if (w(g.max) || g.ngMax) {
        var y = g.max || p(g.ngMax)(e),
            J = s(y);

        k.$validators.max = function (a) {
          return !n(a) || z(J) || d(a) <= J;
        };

        g.$observe("max", function (a) {
          a !== y && (J = s(a), y = a, k.$validate());
        });
      }
    };
  }

  function Ic(a, b, d, c, e) {
    (c.$$hasNativeValidators = D(b[0].validity)) && c.$parsers.push(function (a) {
      var d = b.prop("validity") || {};
      if (d.badInput || d.typeMismatch) c.$$parserName = e;else return a;
    });
  }

  function de(a) {
    a.$parsers.push(function (b) {
      if (a.$isEmpty(b)) return null;
      if (ih.test(b)) return parseFloat(b);
      a.$$parserName = "number";
    });
    a.$formatters.push(function (b) {
      if (!a.$isEmpty(b)) {
        if (!W(b)) throw ob("numfmt", b);
        b = b.toString();
      }

      return b;
    });
  }

  function na(a) {
    w(a) && !W(a) && (a = parseFloat(a));
    return X(a) ? void 0 : a;
  }

  function Jc(a) {
    var b = a.toString(),
        d = b.indexOf(".");
    return -1 === d ? -1 < a && 1 > a && (a = /e-(\d+)$/.exec(b)) ? Number(a[1]) : 0 : b.length - d - 1;
  }

  function ee(a, b, d) {
    a = Number(a);
    var c = (a | 0) !== a,
        e = (b | 0) !== b,
        f = (d | 0) !== d;

    if (c || e || f) {
      var g = c ? Jc(a) : 0,
          k = e ? Jc(b) : 0,
          h = f ? Jc(d) : 0,
          g = Math.max(g, k, h),
          g = Math.pow(10, g);
      a *= g;
      b *= g;
      d *= g;
      c && (a = Math.round(a));
      e && (b = Math.round(b));
      f && (d = Math.round(d));
    }

    return 0 === (a - b) % d;
  }

  function fe(a, b, d, c, e) {
    if (w(c)) {
      a = a(c);
      if (!a.constant) throw ob("constexpr", d, c);
      return a(b);
    }

    return e;
  }

  function Kc(a, b) {
    function d(a, b) {
      if (!a || !a.length) return [];
      if (!b || !b.length) return a;
      var c = [],
          d = 0;

      a: for (; d < a.length; d++) {
        for (var e = a[d], m = 0; m < b.length; m++) {
          if (e === b[m]) continue a;
        }

        c.push(e);
      }

      return c;
    }

    function c(a) {
      if (!a) return a;
      var b = a;
      H(a) ? b = a.map(c).join(" ") : D(a) ? b = Object.keys(a).filter(function (b) {
        return a[b];
      }).join(" ") : A(a) || (b = a + "");
      return b;
    }

    a = "ngClass" + a;
    var e;
    return ["$parse", function (f) {
      return {
        restrict: "AC",
        link: function link(g, k, h) {
          function l(a, b) {
            var c = [];
            r(a, function (a) {
              if (0 < b || p[a]) p[a] = (p[a] || 0) + b, p[a] === +(0 < b) && c.push(a);
            });
            return c.join(" ");
          }

          function m(a) {
            if (a === b) {
              var c = s,
                  c = l(c && c.split(" "), 1);
              h.$addClass(c);
            } else c = s, c = l(c && c.split(" "), -1), h.$removeClass(c);

            n = a;
          }

          var p = k.data("$classCounts"),
              n = !0,
              s;
          p || (p = T(), k.data("$classCounts", p));
          "ngClass" !== a && (e || (e = f("$index", function (a) {
            return a & 1;
          })), g.$watch(e, m));
          g.$watch(f(h[a], c), function (a) {
            if (n === b) {
              var c = s && s.split(" "),
                  e = a && a.split(" "),
                  f = d(c, e),
                  c = d(e, c),
                  f = l(f, -1),
                  c = l(c, 1);
              h.$addClass(c);
              h.$removeClass(f);
            }

            s = a;
          });
        }
      };
    }];
  }

  function qd(a, b, d, c, e, f) {
    return {
      restrict: "A",
      compile: function compile(g, k) {
        var h = a(k[c]);
        return function (a, c) {
          c.on(e, function (c) {
            var e = function e() {
              h(a, {
                $event: c
              });
            };

            if (b.$$phase) {
              if (f) a.$evalAsync(e);else try {
                e();
              } catch (g) {
                d(g);
              }
            } else a.$apply(e);
          });
        };
      }
    };
  }

  function Rb(a, b, d, c, e, f, g, k, h) {
    this.$modelValue = this.$viewValue = Number.NaN;
    this.$$rawModelValue = void 0;
    this.$validators = {};
    this.$asyncValidators = {};
    this.$parsers = [];
    this.$formatters = [];
    this.$viewChangeListeners = [];
    this.$untouched = !0;
    this.$touched = !1;
    this.$pristine = !0;
    this.$dirty = !1;
    this.$valid = !0;
    this.$invalid = !1;
    this.$error = {};
    this.$$success = {};
    this.$pending = void 0;
    this.$name = h(d.name || "", !1)(a);
    this.$$parentForm = lb;
    this.$options = Sb;
    this.$$updateEvents = "";
    this.$$updateEventHandler = this.$$updateEventHandler.bind(this);
    this.$$parsedNgModel = e(d.ngModel);
    this.$$parsedNgModelAssign = this.$$parsedNgModel.assign;
    this.$$ngModelGet = this.$$parsedNgModel;
    this.$$ngModelSet = this.$$parsedNgModelAssign;
    this.$$pendingDebounce = null;
    this.$$parserValid = void 0;
    this.$$parserName = "parse";
    this.$$currentValidationRunId = 0;
    this.$$scope = a;
    this.$$rootScope = a.$root;
    this.$$attr = d;
    this.$$element = c;
    this.$$animate = f;
    this.$$timeout = g;
    this.$$parse = e;
    this.$$q = k;
    this.$$exceptionHandler = b;
    Zd(this);
    jh(this);
  }

  function jh(a) {
    a.$$scope.$watch(function (b) {
      b = a.$$ngModelGet(b);
      b === a.$modelValue || a.$modelValue !== a.$modelValue && b !== b || a.$$setModelValue(b);
      return b;
    });
  }

  function Lc(a) {
    this.$$options = a;
  }

  function ge(a, b) {
    r(b, function (b, c) {
      w(a[c]) || (a[c] = b);
    });
  }

  function Oa(a, b) {
    a.prop("selected", b);
    a.attr("selected", b);
  }

  function he(a, b, d) {
    if (a) {
      A(a) && (a = new RegExp("^" + a + "$"));
      if (!a.test) throw F("ngPattern")("noregexp", b, a, za(d));
      return a;
    }
  }

  function Tb(a) {
    a = fa(a);
    return X(a) ? -1 : a;
  }

  var Wb = {
    objectMaxDepth: 5,
    urlErrorParamsEnabled: !0
  },
      ie = /^\/(.+)\/([a-z]*)$/,
      ta = Object.prototype.hasOwnProperty,
      K = function K(a) {
    return A(a) ? a.toLowerCase() : a;
  },
      ub = function ub(a) {
    return A(a) ? a.toUpperCase() : a;
  },
      Ca,
      x,
      rb,
      Ha = [].slice,
      Fg = [].splice,
      kh = [].push,
      la = Object.prototype.toString,
      Pc = Object.getPrototypeOf,
      pa = F("ng"),
      ca = C.angular || (C.angular = {}),
      kc,
      pb = 0;

  Ca = C.document.documentMode;

  var X = Number.isNaN || function (a) {
    return a !== a;
  };

  E.$inject = [];
  Ta.$inject = [];

  var ve = /^\[object (?:Uint8|Uint8Clamped|Uint16|Uint32|Int8|Int16|Int32|Float32|Float64)Array]$/,
      U = function U(a) {
    return A(a) ? a.trim() : a;
  },
      Md = function Md(a) {
    return a.replace(/([-()[\]{}+?*.$^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
  },
      Aa = function Aa() {
    if (!w(Aa.rules)) {
      var a = C.document.querySelector("[ng-csp]") || C.document.querySelector("[data-ng-csp]");

      if (a) {
        var b = a.getAttribute("ng-csp") || a.getAttribute("data-ng-csp");
        Aa.rules = {
          noUnsafeEval: !b || -1 !== b.indexOf("no-unsafe-eval"),
          noInlineStyle: !b || -1 !== b.indexOf("no-inline-style")
        };
      } else {
        a = Aa;

        try {
          new Function(""), b = !1;
        } catch (d) {
          b = !0;
        }

        a.rules = {
          noUnsafeEval: b,
          noInlineStyle: !1
        };
      }
    }

    return Aa.rules;
  },
      qb = function qb() {
    if (w(qb.name_)) return qb.name_;
    var a,
        b,
        d = Qa.length,
        c,
        e;

    for (b = 0; b < d; ++b) {
      if (c = Qa[b], a = C.document.querySelector("[" + c.replace(":", "\\:") + "jq]")) {
        e = a.getAttribute(c + "jq");
        break;
      }
    }

    return qb.name_ = e;
  },
      xe = /:/g,
      Qa = ["ng-", "data-ng-", "ng:", "x-ng-"],
      Be = function (a) {
    var b = a.currentScript;
    if (!b) return !0;
    if (!(b instanceof C.HTMLScriptElement || b instanceof C.SVGScriptElement)) return !1;
    b = b.attributes;
    return [b.getNamedItem("src"), b.getNamedItem("href"), b.getNamedItem("xlink:href")].every(function (b) {
      if (!b) return !0;
      if (!b.value) return !1;
      var c = a.createElement("a");
      c.href = b.value;
      if (a.location.origin === c.origin) return !0;

      switch (c.protocol) {
        case "http:":
        case "https:":
        case "ftp:":
        case "blob:":
        case "file:":
        case "data:":
          return !0;

        default:
          return !1;
      }
    });
  }(C.document),
      Ee = /[A-Z]/g,
      Wc = !1,
      Pa = 3,
      Ke = {
    full: "1.7.8",
    major: 1,
    minor: 7,
    dot: 8,
    codeName: "enthusiastic-oblation"
  };

  Y.expando = "ng339";
  var Ka = Y.cache = {},
      pg = 1;

  Y._data = function (a) {
    return this.cache[a[this.expando]] || {};
  };

  var lg = /-([a-z])/g,
      lh = /^-ms-/,
      Ab = {
    mouseleave: "mouseout",
    mouseenter: "mouseover"
  },
      nc = F("jqLite"),
      og = /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,
      mc = /<|&#?\w+;/,
      mg = /<([\w:-]+)/,
      ng = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,
      oa = {
    option: [1, '<select multiple="multiple">', "</select>"],
    thead: [1, "<table>", "</table>"],
    col: [2, "<table><colgroup>", "</colgroup></table>"],
    tr: [2, "<table><tbody>", "</tbody></table>"],
    td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
    _default: [0, "", ""]
  };
  oa.optgroup = oa.option;
  oa.tbody = oa.tfoot = oa.colgroup = oa.caption = oa.thead;
  oa.th = oa.td;

  var ug = C.Node.prototype.contains || function (a) {
    return !!(this.compareDocumentPosition(a) & 16);
  },
      Wa = Y.prototype = {
    ready: fd,
    toString: function toString() {
      var a = [];
      r(this, function (b) {
        a.push("" + b);
      });
      return "[" + a.join(", ") + "]";
    },
    eq: function eq(a) {
      return 0 <= a ? x(this[a]) : x(this[this.length + a]);
    },
    length: 0,
    push: kh,
    sort: [].sort,
    splice: [].splice
  },
      Gb = {};

  r("multiple selected checked disabled readOnly required open".split(" "), function (a) {
    Gb[K(a)] = a;
  });
  var md = {};
  r("input select option textarea button form details".split(" "), function (a) {
    md[a] = !0;
  });
  var td = {
    ngMinlength: "minlength",
    ngMaxlength: "maxlength",
    ngMin: "min",
    ngMax: "max",
    ngPattern: "pattern",
    ngStep: "step"
  };
  r({
    data: rc,
    removeData: qc,
    hasData: function hasData(a) {
      for (var b in Ka[a.ng339]) {
        return !0;
      }

      return !1;
    },
    cleanData: function cleanData(a) {
      for (var b = 0, d = a.length; b < d; b++) {
        qc(a[b]), id(a[b]);
      }
    }
  }, function (a, b) {
    Y[b] = a;
  });
  r({
    data: rc,
    inheritedData: Eb,
    scope: function scope(a) {
      return x.data(a, "$scope") || Eb(a.parentNode || a, ["$isolateScope", "$scope"]);
    },
    isolateScope: function isolateScope(a) {
      return x.data(a, "$isolateScope") || x.data(a, "$isolateScopeNoTemplate");
    },
    controller: jd,
    injector: function injector(a) {
      return Eb(a, "$injector");
    },
    removeAttr: function removeAttr(a, b) {
      a.removeAttribute(b);
    },
    hasClass: Bb,
    css: function css(a, b, d) {
      b = xb(b.replace(lh, "ms-"));
      if (w(d)) a.style[b] = d;else return a.style[b];
    },
    attr: function attr(a, b, d) {
      var c = a.nodeType;

      if (c !== Pa && 2 !== c && 8 !== c && a.getAttribute) {
        var c = K(b),
            e = Gb[c];
        if (w(d)) null === d || !1 === d && e ? a.removeAttribute(b) : a.setAttribute(b, e ? c : d);else return a = a.getAttribute(b), e && null !== a && (a = c), null === a ? void 0 : a;
      }
    },
    prop: function prop(a, b, d) {
      if (w(d)) a[b] = d;else return a[b];
    },
    text: function () {
      function a(a, d) {
        if (z(d)) {
          var c = a.nodeType;
          return 1 === c || c === Pa ? a.textContent : "";
        }

        a.textContent = d;
      }

      a.$dv = "";
      return a;
    }(),
    val: function val(a, b) {
      if (z(b)) {
        if (a.multiple && "select" === ua(a)) {
          var d = [];
          r(a.options, function (a) {
            a.selected && d.push(a.value || a.text);
          });
          return d;
        }

        return a.value;
      }

      a.value = b;
    },
    html: function html(a, b) {
      if (z(b)) return a.innerHTML;
      yb(a, !0);
      a.innerHTML = b;
    },
    empty: kd
  }, function (a, b) {
    Y.prototype[b] = function (b, c) {
      var e,
          f,
          g = this.length;

      if (a !== kd && z(2 === a.length && a !== Bb && a !== jd ? b : c)) {
        if (D(b)) {
          for (e = 0; e < g; e++) {
            if (a === rc) a(this[e], b);else for (f in b) {
              a(this[e], f, b[f]);
            }
          }

          return this;
        }

        e = a.$dv;
        g = z(e) ? Math.min(g, 1) : g;

        for (f = 0; f < g; f++) {
          var k = a(this[f], b, c);
          e = e ? e + k : k;
        }

        return e;
      }

      for (e = 0; e < g; e++) {
        a(this[e], b, c);
      }

      return this;
    };
  });
  r({
    removeData: qc,
    on: function on(a, b, d, c) {
      if (w(c)) throw nc("onargs");

      if (lc(a)) {
        c = zb(a, !0);
        var e = c.events,
            f = c.handle;
        f || (f = c.handle = rg(a, e));
        c = 0 <= b.indexOf(" ") ? b.split(" ") : [b];

        for (var g = c.length, k = function k(b, c, g) {
          var k = e[b];
          k || (k = e[b] = [], k.specialHandlerWrapper = c, "$destroy" === b || g || a.addEventListener(b, f));
          k.push(d);
        }; g--;) {
          b = c[g], Ab[b] ? (k(Ab[b], tg), k(b, void 0, !0)) : k(b);
        }
      }
    },
    off: id,
    one: function one(a, b, d) {
      a = x(a);
      a.on(b, function e() {
        a.off(b, d);
        a.off(b, e);
      });
      a.on(b, d);
    },
    replaceWith: function replaceWith(a, b) {
      var d,
          c = a.parentNode;
      yb(a);
      r(new Y(b), function (b) {
        d ? c.insertBefore(b, d.nextSibling) : c.replaceChild(b, a);
        d = b;
      });
    },
    children: function children(a) {
      var b = [];
      r(a.childNodes, function (a) {
        1 === a.nodeType && b.push(a);
      });
      return b;
    },
    contents: function contents(a) {
      return a.contentDocument || a.childNodes || [];
    },
    append: function append(a, b) {
      var d = a.nodeType;

      if (1 === d || 11 === d) {
        b = new Y(b);

        for (var d = 0, c = b.length; d < c; d++) {
          a.appendChild(b[d]);
        }
      }
    },
    prepend: function prepend(a, b) {
      if (1 === a.nodeType) {
        var d = a.firstChild;
        r(new Y(b), function (b) {
          a.insertBefore(b, d);
        });
      }
    },
    wrap: function wrap(a, b) {
      var d = x(b).eq(0).clone()[0],
          c = a.parentNode;
      c && c.replaceChild(d, a);
      d.appendChild(a);
    },
    remove: Fb,
    detach: function detach(a) {
      Fb(a, !0);
    },
    after: function after(a, b) {
      var d = a,
          c = a.parentNode;

      if (c) {
        b = new Y(b);

        for (var e = 0, f = b.length; e < f; e++) {
          var g = b[e];
          c.insertBefore(g, d.nextSibling);
          d = g;
        }
      }
    },
    addClass: Db,
    removeClass: Cb,
    toggleClass: function toggleClass(a, b, d) {
      b && r(b.split(" "), function (b) {
        var e = d;
        z(e) && (e = !Bb(a, b));
        (e ? Db : Cb)(a, b);
      });
    },
    parent: function parent(a) {
      return (a = a.parentNode) && 11 !== a.nodeType ? a : null;
    },
    next: function next(a) {
      return a.nextElementSibling;
    },
    find: function find(a, b) {
      return a.getElementsByTagName ? a.getElementsByTagName(b) : [];
    },
    clone: pc,
    triggerHandler: function triggerHandler(a, b, d) {
      var c,
          e,
          f = b.type || b,
          g = zb(a);
      if (g = (g = g && g.events) && g[f]) c = {
        preventDefault: function preventDefault() {
          this.defaultPrevented = !0;
        },
        isDefaultPrevented: function isDefaultPrevented() {
          return !0 === this.defaultPrevented;
        },
        stopImmediatePropagation: function stopImmediatePropagation() {
          this.immediatePropagationStopped = !0;
        },
        isImmediatePropagationStopped: function isImmediatePropagationStopped() {
          return !0 === this.immediatePropagationStopped;
        },
        stopPropagation: E,
        type: f,
        target: a
      }, b.type && (c = S(c, b)), b = ja(g), e = d ? [c].concat(d) : [c], r(b, function (b) {
        c.isImmediatePropagationStopped() || b.apply(a, e);
      });
    }
  }, function (a, b) {
    Y.prototype[b] = function (b, c, e) {
      for (var f, g = 0, k = this.length; g < k; g++) {
        z(f) ? (f = a(this[g], b, c, e), w(f) && (f = x(f))) : oc(f, a(this[g], b, c, e));
      }

      return w(f) ? f : this;
    };
  });
  Y.prototype.bind = Y.prototype.on;
  Y.prototype.unbind = Y.prototype.off;
  var mh = Object.create(null);
  nd.prototype = {
    _idx: function _idx(a) {
      a !== this._lastKey && (this._lastKey = a, this._lastIndex = this._keys.indexOf(a));
      return this._lastIndex;
    },
    _transformKey: function _transformKey(a) {
      return X(a) ? mh : a;
    },
    get: function get(a) {
      a = this._transformKey(a);
      a = this._idx(a);
      if (-1 !== a) return this._values[a];
    },
    has: function has(a) {
      a = this._transformKey(a);
      return -1 !== this._idx(a);
    },
    set: function set(a, b) {
      a = this._transformKey(a);

      var d = this._idx(a);

      -1 === d && (d = this._lastIndex = this._keys.length);
      this._keys[d] = a;
      this._values[d] = b;
    },
    "delete": function _delete(a) {
      a = this._transformKey(a);
      a = this._idx(a);
      if (-1 === a) return !1;

      this._keys.splice(a, 1);

      this._values.splice(a, 1);

      this._lastKey = NaN;
      this._lastIndex = -1;
      return !0;
    }
  };
  var Hb = nd,
      jg = [function () {
    this.$get = [function () {
      return Hb;
    }];
  }],
      wg = /^([^(]+?)=>/,
      xg = /^[^(]*\(\s*([^)]*)\)/m,
      nh = /,/,
      oh = /^\s*(_?)(\S+?)\1\s*$/,
      vg = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg,
      Ba = F("$injector");

  fb.$$annotate = function (a, b, d) {
    var c;

    if ("function" === typeof a) {
      if (!(c = a.$inject)) {
        c = [];

        if (a.length) {
          if (b) throw A(d) && d || (d = a.name || yg(a)), Ba("strictdi", d);
          b = od(a);
          r(b[1].split(nh), function (a) {
            a.replace(oh, function (a, b, d) {
              c.push(d);
            });
          });
        }

        a.$inject = c;
      }
    } else H(a) ? (b = a.length - 1, sb(a[b], "fn"), c = a.slice(0, b)) : sb(a, "fn", !0);

    return c;
  };

  var je = F("$animate"),
      zf = function zf() {
    this.$get = E;
  },
      Af = function Af() {
    var a = new Hb(),
        b = [];
    this.$get = ["$$AnimateRunner", "$rootScope", function (d, c) {
      function e(a, b, c) {
        var d = !1;
        b && (b = A(b) ? b.split(" ") : H(b) ? b : [], r(b, function (b) {
          b && (d = !0, a[b] = c);
        }));
        return d;
      }

      function f() {
        r(b, function (b) {
          var c = a.get(b);

          if (c) {
            var d = zg(b.attr("class")),
                e = "",
                f = "";
            r(c, function (a, b) {
              a !== !!d[b] && (a ? e += (e.length ? " " : "") + b : f += (f.length ? " " : "") + b);
            });
            r(b, function (a) {
              e && Db(a, e);
              f && Cb(a, f);
            });
            a["delete"](b);
          }
        });
        b.length = 0;
      }

      return {
        enabled: E,
        on: E,
        off: E,
        pin: E,
        push: function push(g, k, h, l) {
          l && l();
          h = h || {};
          h.from && g.css(h.from);
          h.to && g.css(h.to);
          if (h.addClass || h.removeClass) if (k = h.addClass, l = h.removeClass, h = a.get(g) || {}, k = e(h, k, !0), l = e(h, l, !1), k || l) a.set(g, h), b.push(g), 1 === b.length && c.$$postDigest(f);
          g = new d();
          g.complete();
          return g;
        }
      };
    }];
  },
      xf = ["$provide", function (a) {
    var b = this,
        d = null,
        c = null;
    this.$$registeredAnimations = Object.create(null);

    this.register = function (c, d) {
      if (c && "." !== c.charAt(0)) throw je("notcsel", c);
      var g = c + "-animation";
      b.$$registeredAnimations[c.substr(1)] = g;
      a.factory(g, d);
    };

    this.customFilter = function (a) {
      1 === arguments.length && (c = B(a) ? a : null);
      return c;
    };

    this.classNameFilter = function (a) {
      if (1 === arguments.length && (d = a instanceof RegExp ? a : null) && /[(\s|\/)]ng-animate[(\s|\/)]/.test(d.toString())) throw d = null, je("nongcls", "ng-animate");
      return d;
    };

    this.$get = ["$$animateQueue", function (a) {
      function b(a, c, d) {
        if (d) {
          var e;

          a: {
            for (e = 0; e < d.length; e++) {
              var f = d[e];

              if (1 === f.nodeType) {
                e = f;
                break a;
              }
            }

            e = void 0;
          }

          !e || e.parentNode || e.previousElementSibling || (d = null);
        }

        d ? d.after(a) : c.prepend(a);
      }

      return {
        on: a.on,
        off: a.off,
        pin: a.pin,
        enabled: a.enabled,
        cancel: function cancel(a) {
          a.cancel && a.cancel();
        },
        enter: function enter(c, d, h, l) {
          d = d && x(d);
          h = h && x(h);
          d = d || h.parent();
          b(c, d, h);
          return a.push(c, "enter", ra(l));
        },
        move: function move(c, d, h, l) {
          d = d && x(d);
          h = h && x(h);
          d = d || h.parent();
          b(c, d, h);
          return a.push(c, "move", ra(l));
        },
        leave: function leave(b, c) {
          return a.push(b, "leave", ra(c), function () {
            b.remove();
          });
        },
        addClass: function addClass(b, c, d) {
          d = ra(d);
          d.addClass = hb(d.addclass, c);
          return a.push(b, "addClass", d);
        },
        removeClass: function removeClass(b, c, d) {
          d = ra(d);
          d.removeClass = hb(d.removeClass, c);
          return a.push(b, "removeClass", d);
        },
        setClass: function setClass(b, c, d, f) {
          f = ra(f);
          f.addClass = hb(f.addClass, c);
          f.removeClass = hb(f.removeClass, d);
          return a.push(b, "setClass", f);
        },
        animate: function animate(b, c, d, f, m) {
          m = ra(m);
          m.from = m.from ? S(m.from, c) : c;
          m.to = m.to ? S(m.to, d) : d;
          m.tempClasses = hb(m.tempClasses, f || "ng-inline-animate");
          return a.push(b, "animate", m);
        }
      };
    }];
  }],
      Cf = function Cf() {
    this.$get = ["$$rAF", function (a) {
      function b(b) {
        d.push(b);
        1 < d.length || a(function () {
          for (var a = 0; a < d.length; a++) {
            d[a]();
          }

          d = [];
        });
      }

      var d = [];
      return function () {
        var a = !1;
        b(function () {
          a = !0;
        });
        return function (d) {
          a ? d() : b(d);
        };
      };
    }];
  },
      Bf = function Bf() {
    this.$get = ["$q", "$sniffer", "$$animateAsyncRun", "$$isDocumentHidden", "$timeout", function (a, b, d, c, e) {
      function f(a) {
        this.setHost(a);
        var b = d();
        this._doneCallbacks = [];

        this._tick = function (a) {
          c() ? e(a, 0, !1) : b(a);
        };

        this._state = 0;
      }

      f.chain = function (a, b) {
        function c() {
          if (d === a.length) b(!0);else a[d](function (a) {
            !1 === a ? b(!1) : (d++, c());
          });
        }

        var d = 0;
        c();
      };

      f.all = function (a, b) {
        function c(f) {
          e = e && f;
          ++d === a.length && b(e);
        }

        var d = 0,
            e = !0;
        r(a, function (a) {
          a.done(c);
        });
      };

      f.prototype = {
        setHost: function setHost(a) {
          this.host = a || {};
        },
        done: function done(a) {
          2 === this._state ? a() : this._doneCallbacks.push(a);
        },
        progress: E,
        getPromise: function getPromise() {
          if (!this.promise) {
            var b = this;
            this.promise = a(function (a, c) {
              b.done(function (b) {
                !1 === b ? c() : a();
              });
            });
          }

          return this.promise;
        },
        then: function then(a, b) {
          return this.getPromise().then(a, b);
        },
        "catch": function _catch(a) {
          return this.getPromise()["catch"](a);
        },
        "finally": function _finally(a) {
          return this.getPromise()["finally"](a);
        },
        pause: function pause() {
          this.host.pause && this.host.pause();
        },
        resume: function resume() {
          this.host.resume && this.host.resume();
        },
        end: function end() {
          this.host.end && this.host.end();

          this._resolve(!0);
        },
        cancel: function cancel() {
          this.host.cancel && this.host.cancel();

          this._resolve(!1);
        },
        complete: function complete(a) {
          var b = this;
          0 === b._state && (b._state = 1, b._tick(function () {
            b._resolve(a);
          }));
        },
        _resolve: function _resolve(a) {
          2 !== this._state && (r(this._doneCallbacks, function (b) {
            b(a);
          }), this._doneCallbacks.length = 0, this._state = 2);
        }
      };
      return f;
    }];
  },
      yf = function yf() {
    this.$get = ["$$rAF", "$q", "$$AnimateRunner", function (a, b, d) {
      return function (b, e) {
        function f() {
          a(function () {
            g.addClass && (b.addClass(g.addClass), g.addClass = null);
            g.removeClass && (b.removeClass(g.removeClass), g.removeClass = null);
            g.to && (b.css(g.to), g.to = null);
            k || h.complete();
            k = !0;
          });
          return h;
        }

        var g = e || {};
        g.$$prepared || (g = Ia(g));
        g.cleanupStyles && (g.from = g.to = null);
        g.from && (b.css(g.from), g.from = null);
        var k,
            h = new d();
        return {
          start: f,
          end: f
        };
      };
    }];
  },
      $ = F("$compile"),
      tc = new function () {}();

  Xc.$inject = ["$provide", "$$sanitizeUriProvider"];

  Jb.prototype.isFirstChange = function () {
    return this.previousValue === tc;
  };

  var pd = /^((?:x|data)[:\-_])/i,
      Eg = /[:\-_]+(.)/g,
      vd = F("$controller"),
      ud = /^(\S+)(\s+as\s+([\w$]+))?$/,
      Jf = function Jf() {
    this.$get = ["$document", function (a) {
      return function (b) {
        b ? !b.nodeType && b instanceof x && (b = b[0]) : b = a[0].body;
        return b.offsetWidth + 1;
      };
    }];
  },
      wd = "application/json",
      wc = {
    "Content-Type": wd + ";charset=utf-8"
  },
      Hg = /^\[|^\{(?!\{)/,
      Ig = {
    "[": /]$/,
    "{": /}$/
  },
      Gg = /^\)]\}',?\n/,
      Kb = F("$http"),
      Ma = ca.$interpolateMinErr = F("$interpolate");

  Ma.throwNoconcat = function (a) {
    throw Ma("noconcat", a);
  };

  Ma.interr = function (a, b) {
    return Ma("interr", a, b.toString());
  };

  var Lg = F("$interval"),
      Sf = function Sf() {
    this.$get = function () {
      function a(a) {
        var b = function b(a) {
          b.data = a;
          b.called = !0;
        };

        b.id = a;
        return b;
      }

      var b = ca.callbacks,
          d = {};
      return {
        createCallback: function createCallback(c) {
          c = "_" + (b.$$counter++).toString(36);
          var e = "angular.callbacks." + c,
              f = a(c);
          d[e] = b[c] = f;
          return e;
        },
        wasCalled: function wasCalled(a) {
          return d[a].called;
        },
        getResponse: function getResponse(a) {
          return d[a].data;
        },
        removeCallback: function removeCallback(a) {
          delete b[d[a].id];
          delete d[a];
        }
      };
    };
  },
      ph = /^([^?#]*)(\?([^#]*))?(#(.*))?$/,
      Mg = {
    http: 80,
    https: 443,
    ftp: 21
  },
      jb = F("$location"),
      Ng = /^\s*[\\/]{2,}/,
      qh = {
    $$absUrl: "",
    $$html5: !1,
    $$replace: !1,
    $$compose: function $$compose() {
      for (var a = this.$$path, b = this.$$hash, d = ye(this.$$search), b = b ? "#" + hc(b) : "", a = a.split("/"), c = a.length; c--;) {
        a[c] = hc(a[c].replace(/%2F/g, "/"));
      }

      this.$$url = a.join("/") + (d ? "?" + d : "") + b;
      this.$$absUrl = this.$$normalizeUrl(this.$$url);
      this.$$urlUpdatedByLocation = !0;
    },
    absUrl: Lb("$$absUrl"),
    url: function url(a) {
      if (z(a)) return this.$$url;
      var b = ph.exec(a);
      (b[1] || "" === a) && this.path(decodeURIComponent(b[1]));
      (b[2] || b[1] || "" === a) && this.search(b[3] || "");
      this.hash(b[5] || "");
      return this;
    },
    protocol: Lb("$$protocol"),
    host: Lb("$$host"),
    port: Lb("$$port"),
    path: Dd("$$path", function (a) {
      a = null !== a ? a.toString() : "";
      return "/" === a.charAt(0) ? a : "/" + a;
    }),
    search: function search(a, b) {
      switch (arguments.length) {
        case 0:
          return this.$$search;

        case 1:
          if (A(a) || W(a)) a = a.toString(), this.$$search = gc(a);else if (D(a)) a = Ia(a, {}), r(a, function (b, c) {
            null == b && delete a[c];
          }), this.$$search = a;else throw jb("isrcharg");
          break;

        default:
          z(b) || null === b ? delete this.$$search[a] : this.$$search[a] = b;
      }

      this.$$compose();
      return this;
    },
    hash: Dd("$$hash", function (a) {
      return null !== a ? a.toString() : "";
    }),
    replace: function replace() {
      this.$$replace = !0;
      return this;
    }
  };

  r([Cd, zc, yc], function (a) {
    a.prototype = Object.create(qh);

    a.prototype.state = function (b) {
      if (!arguments.length) return this.$$state;
      if (a !== yc || !this.$$html5) throw jb("nostate");
      this.$$state = z(b) ? null : b;
      this.$$urlUpdatedByLocation = !0;
      return this;
    };
  });
  var Ya = F("$parse"),
      Rg = {}.constructor.prototype.valueOf,
      Ub = T();
  r("+ - * / % === !== == != < > <= >= && || ! = |".split(" "), function (a) {
    Ub[a] = !0;
  });

  var rh = {
    n: "\n",
    f: "\f",
    r: "\r",
    t: "\t",
    v: "\v",
    "'": "'",
    '"': '"'
  },
      Nb = function Nb(a) {
    this.options = a;
  };

  Nb.prototype = {
    constructor: Nb,
    lex: function lex(a) {
      this.text = a;
      this.index = 0;

      for (this.tokens = []; this.index < this.text.length;) {
        if (a = this.text.charAt(this.index), '"' === a || "'" === a) this.readString(a);else if (this.isNumber(a) || "." === a && this.isNumber(this.peek())) this.readNumber();else if (this.isIdentifierStart(this.peekMultichar())) this.readIdent();else if (this.is(a, "(){}[].,;:?")) this.tokens.push({
          index: this.index,
          text: a
        }), this.index++;else if (this.isWhitespace(a)) this.index++;else {
          var b = a + this.peek(),
              d = b + this.peek(2),
              c = Ub[b],
              e = Ub[d];
          Ub[a] || c || e ? (a = e ? d : c ? b : a, this.tokens.push({
            index: this.index,
            text: a,
            operator: !0
          }), this.index += a.length) : this.throwError("Unexpected next character ", this.index, this.index + 1);
        }
      }

      return this.tokens;
    },
    is: function is(a, b) {
      return -1 !== b.indexOf(a);
    },
    peek: function peek(a) {
      a = a || 1;
      return this.index + a < this.text.length ? this.text.charAt(this.index + a) : !1;
    },
    isNumber: function isNumber(a) {
      return "0" <= a && "9" >= a && "string" === typeof a;
    },
    isWhitespace: function isWhitespace(a) {
      return " " === a || "\r" === a || "\t" === a || "\n" === a || "\v" === a || "\xA0" === a;
    },
    isIdentifierStart: function isIdentifierStart(a) {
      return this.options.isIdentifierStart ? this.options.isIdentifierStart(a, this.codePointAt(a)) : this.isValidIdentifierStart(a);
    },
    isValidIdentifierStart: function isValidIdentifierStart(a) {
      return "a" <= a && "z" >= a || "A" <= a && "Z" >= a || "_" === a || "$" === a;
    },
    isIdentifierContinue: function isIdentifierContinue(a) {
      return this.options.isIdentifierContinue ? this.options.isIdentifierContinue(a, this.codePointAt(a)) : this.isValidIdentifierContinue(a);
    },
    isValidIdentifierContinue: function isValidIdentifierContinue(a, b) {
      return this.isValidIdentifierStart(a, b) || this.isNumber(a);
    },
    codePointAt: function codePointAt(a) {
      return 1 === a.length ? a.charCodeAt(0) : (a.charCodeAt(0) << 10) + a.charCodeAt(1) - 56613888;
    },
    peekMultichar: function peekMultichar() {
      var a = this.text.charAt(this.index),
          b = this.peek();
      if (!b) return a;
      var d = a.charCodeAt(0),
          c = b.charCodeAt(0);
      return 55296 <= d && 56319 >= d && 56320 <= c && 57343 >= c ? a + b : a;
    },
    isExpOperator: function isExpOperator(a) {
      return "-" === a || "+" === a || this.isNumber(a);
    },
    throwError: function throwError(a, b, d) {
      d = d || this.index;
      b = w(b) ? "s " + b + "-" + this.index + " [" + this.text.substring(b, d) + "]" : " " + d;
      throw Ya("lexerr", a, b, this.text);
    },
    readNumber: function readNumber() {
      for (var a = "", b = this.index; this.index < this.text.length;) {
        var d = K(this.text.charAt(this.index));
        if ("." === d || this.isNumber(d)) a += d;else {
          var c = this.peek();
          if ("e" === d && this.isExpOperator(c)) a += d;else if (this.isExpOperator(d) && c && this.isNumber(c) && "e" === a.charAt(a.length - 1)) a += d;else if (!this.isExpOperator(d) || c && this.isNumber(c) || "e" !== a.charAt(a.length - 1)) break;else this.throwError("Invalid exponent");
        }
        this.index++;
      }

      this.tokens.push({
        index: b,
        text: a,
        constant: !0,
        value: Number(a)
      });
    },
    readIdent: function readIdent() {
      var a = this.index;

      for (this.index += this.peekMultichar().length; this.index < this.text.length;) {
        var b = this.peekMultichar();
        if (!this.isIdentifierContinue(b)) break;
        this.index += b.length;
      }

      this.tokens.push({
        index: a,
        text: this.text.slice(a, this.index),
        identifier: !0
      });
    },
    readString: function readString(a) {
      var b = this.index;
      this.index++;

      for (var d = "", c = a, e = !1; this.index < this.text.length;) {
        var f = this.text.charAt(this.index),
            c = c + f;
        if (e) "u" === f ? (e = this.text.substring(this.index + 1, this.index + 5), e.match(/[\da-f]{4}/i) || this.throwError("Invalid unicode escape [\\u" + e + "]"), this.index += 4, d += String.fromCharCode(parseInt(e, 16))) : d += rh[f] || f, e = !1;else if ("\\" === f) e = !0;else {
          if (f === a) {
            this.index++;
            this.tokens.push({
              index: b,
              text: c,
              constant: !0,
              value: d
            });
            return;
          }

          d += f;
        }
        this.index++;
      }

      this.throwError("Unterminated quote", b);
    }
  };

  var q = function q(a, b) {
    this.lexer = a;
    this.options = b;
  };

  q.Program = "Program";
  q.ExpressionStatement = "ExpressionStatement";
  q.AssignmentExpression = "AssignmentExpression";
  q.ConditionalExpression = "ConditionalExpression";
  q.LogicalExpression = "LogicalExpression";
  q.BinaryExpression = "BinaryExpression";
  q.UnaryExpression = "UnaryExpression";
  q.CallExpression = "CallExpression";
  q.MemberExpression = "MemberExpression";
  q.Identifier = "Identifier";
  q.Literal = "Literal";
  q.ArrayExpression = "ArrayExpression";
  q.Property = "Property";
  q.ObjectExpression = "ObjectExpression";
  q.ThisExpression = "ThisExpression";
  q.LocalsExpression = "LocalsExpression";
  q.NGValueParameter = "NGValueParameter";
  q.prototype = {
    ast: function ast(a) {
      this.text = a;
      this.tokens = this.lexer.lex(a);
      a = this.program();
      0 !== this.tokens.length && this.throwError("is an unexpected token", this.tokens[0]);
      return a;
    },
    program: function program() {
      for (var a = [];;) {
        if (0 < this.tokens.length && !this.peek("}", ")", ";", "]") && a.push(this.expressionStatement()), !this.expect(";")) return {
          type: q.Program,
          body: a
        };
      }
    },
    expressionStatement: function expressionStatement() {
      return {
        type: q.ExpressionStatement,
        expression: this.filterChain()
      };
    },
    filterChain: function filterChain() {
      for (var a = this.expression(); this.expect("|");) {
        a = this.filter(a);
      }

      return a;
    },
    expression: function expression() {
      return this.assignment();
    },
    assignment: function assignment() {
      var a = this.ternary();

      if (this.expect("=")) {
        if (!Hd(a)) throw Ya("lval");
        a = {
          type: q.AssignmentExpression,
          left: a,
          right: this.assignment(),
          operator: "="
        };
      }

      return a;
    },
    ternary: function ternary() {
      var a = this.logicalOR(),
          b,
          d;
      return this.expect("?") && (b = this.expression(), this.consume(":")) ? (d = this.expression(), {
        type: q.ConditionalExpression,
        test: a,
        alternate: b,
        consequent: d
      }) : a;
    },
    logicalOR: function logicalOR() {
      for (var a = this.logicalAND(); this.expect("||");) {
        a = {
          type: q.LogicalExpression,
          operator: "||",
          left: a,
          right: this.logicalAND()
        };
      }

      return a;
    },
    logicalAND: function logicalAND() {
      for (var a = this.equality(); this.expect("&&");) {
        a = {
          type: q.LogicalExpression,
          operator: "&&",
          left: a,
          right: this.equality()
        };
      }

      return a;
    },
    equality: function equality() {
      for (var a = this.relational(), b; b = this.expect("==", "!=", "===", "!==");) {
        a = {
          type: q.BinaryExpression,
          operator: b.text,
          left: a,
          right: this.relational()
        };
      }

      return a;
    },
    relational: function relational() {
      for (var a = this.additive(), b; b = this.expect("<", ">", "<=", ">=");) {
        a = {
          type: q.BinaryExpression,
          operator: b.text,
          left: a,
          right: this.additive()
        };
      }

      return a;
    },
    additive: function additive() {
      for (var a = this.multiplicative(), b; b = this.expect("+", "-");) {
        a = {
          type: q.BinaryExpression,
          operator: b.text,
          left: a,
          right: this.multiplicative()
        };
      }

      return a;
    },
    multiplicative: function multiplicative() {
      for (var a = this.unary(), b; b = this.expect("*", "/", "%");) {
        a = {
          type: q.BinaryExpression,
          operator: b.text,
          left: a,
          right: this.unary()
        };
      }

      return a;
    },
    unary: function unary() {
      var a;
      return (a = this.expect("+", "-", "!")) ? {
        type: q.UnaryExpression,
        operator: a.text,
        prefix: !0,
        argument: this.unary()
      } : this.primary();
    },
    primary: function primary() {
      var a;
      this.expect("(") ? (a = this.filterChain(), this.consume(")")) : this.expect("[") ? a = this.arrayDeclaration() : this.expect("{") ? a = this.object() : this.selfReferential.hasOwnProperty(this.peek().text) ? a = Ia(this.selfReferential[this.consume().text]) : this.options.literals.hasOwnProperty(this.peek().text) ? a = {
        type: q.Literal,
        value: this.options.literals[this.consume().text]
      } : this.peek().identifier ? a = this.identifier() : this.peek().constant ? a = this.constant() : this.throwError("not a primary expression", this.peek());

      for (var b; b = this.expect("(", "[", ".");) {
        "(" === b.text ? (a = {
          type: q.CallExpression,
          callee: a,
          arguments: this.parseArguments()
        }, this.consume(")")) : "[" === b.text ? (a = {
          type: q.MemberExpression,
          object: a,
          property: this.expression(),
          computed: !0
        }, this.consume("]")) : "." === b.text ? a = {
          type: q.MemberExpression,
          object: a,
          property: this.identifier(),
          computed: !1
        } : this.throwError("IMPOSSIBLE");
      }

      return a;
    },
    filter: function filter(a) {
      a = [a];

      for (var b = {
        type: q.CallExpression,
        callee: this.identifier(),
        arguments: a,
        filter: !0
      }; this.expect(":");) {
        a.push(this.expression());
      }

      return b;
    },
    parseArguments: function parseArguments() {
      var a = [];

      if (")" !== this.peekToken().text) {
        do {
          a.push(this.filterChain());
        } while (this.expect(","));
      }

      return a;
    },
    identifier: function identifier() {
      var a = this.consume();
      a.identifier || this.throwError("is not a valid identifier", a);
      return {
        type: q.Identifier,
        name: a.text
      };
    },
    constant: function constant() {
      return {
        type: q.Literal,
        value: this.consume().value
      };
    },
    arrayDeclaration: function arrayDeclaration() {
      var a = [];

      if ("]" !== this.peekToken().text) {
        do {
          if (this.peek("]")) break;
          a.push(this.expression());
        } while (this.expect(","));
      }

      this.consume("]");
      return {
        type: q.ArrayExpression,
        elements: a
      };
    },
    object: function object() {
      var a = [],
          b;

      if ("}" !== this.peekToken().text) {
        do {
          if (this.peek("}")) break;
          b = {
            type: q.Property,
            kind: "init"
          };
          this.peek().constant ? (b.key = this.constant(), b.computed = !1, this.consume(":"), b.value = this.expression()) : this.peek().identifier ? (b.key = this.identifier(), b.computed = !1, this.peek(":") ? (this.consume(":"), b.value = this.expression()) : b.value = b.key) : this.peek("[") ? (this.consume("["), b.key = this.expression(), this.consume("]"), b.computed = !0, this.consume(":"), b.value = this.expression()) : this.throwError("invalid key", this.peek());
          a.push(b);
        } while (this.expect(","));
      }

      this.consume("}");
      return {
        type: q.ObjectExpression,
        properties: a
      };
    },
    throwError: function throwError(a, b) {
      throw Ya("syntax", b.text, a, b.index + 1, this.text, this.text.substring(b.index));
    },
    consume: function consume(a) {
      if (0 === this.tokens.length) throw Ya("ueoe", this.text);
      var b = this.expect(a);
      b || this.throwError("is unexpected, expecting [" + a + "]", this.peek());
      return b;
    },
    peekToken: function peekToken() {
      if (0 === this.tokens.length) throw Ya("ueoe", this.text);
      return this.tokens[0];
    },
    peek: function peek(a, b, d, c) {
      return this.peekAhead(0, a, b, d, c);
    },
    peekAhead: function peekAhead(a, b, d, c, e) {
      if (this.tokens.length > a) {
        a = this.tokens[a];
        var f = a.text;
        if (f === b || f === d || f === c || f === e || !(b || d || c || e)) return a;
      }

      return !1;
    },
    expect: function expect(a, b, d, c) {
      return (a = this.peek(a, b, d, c)) ? (this.tokens.shift(), a) : !1;
    },
    selfReferential: {
      "this": {
        type: q.ThisExpression
      },
      $locals: {
        type: q.LocalsExpression
      }
    }
  };
  var Fd = 2;
  Jd.prototype = {
    compile: function compile(a) {
      var b = this;
      this.state = {
        nextId: 0,
        filters: {},
        fn: {
          vars: [],
          body: [],
          own: {}
        },
        assign: {
          vars: [],
          body: [],
          own: {}
        },
        inputs: []
      };
      Z(a, b.$filter);
      var d = "",
          c;
      this.stage = "assign";
      if (c = Id(a)) this.state.computing = "assign", d = this.nextId(), this.recurse(c, d), this.return_(d), d = "fn.assign=" + this.generateFunction("assign", "s,v,l");
      c = Gd(a.body);
      b.stage = "inputs";
      r(c, function (a, c) {
        var d = "fn" + c;
        b.state[d] = {
          vars: [],
          body: [],
          own: {}
        };
        b.state.computing = d;
        var k = b.nextId();
        b.recurse(a, k);
        b.return_(k);
        b.state.inputs.push({
          name: d,
          isPure: a.isPure
        });
        a.watchId = c;
      });
      this.state.computing = "fn";
      this.stage = "main";
      this.recurse(a);
      a = '"' + this.USE + " " + this.STRICT + '";\n' + this.filterPrefix() + "var fn=" + this.generateFunction("fn", "s,l,a,i") + d + this.watchFns() + "return fn;";
      a = new Function("$filter", "getStringValue", "ifDefined", "plus", a)(this.$filter, Og, Pg, Ed);
      this.state = this.stage = void 0;
      return a;
    },
    USE: "use",
    STRICT: "strict",
    watchFns: function watchFns() {
      var a = [],
          b = this.state.inputs,
          d = this;
      r(b, function (b) {
        a.push("var " + b.name + "=" + d.generateFunction(b.name, "s"));
        b.isPure && a.push(b.name, ".isPure=" + JSON.stringify(b.isPure) + ";");
      });
      b.length && a.push("fn.inputs=[" + b.map(function (a) {
        return a.name;
      }).join(",") + "];");
      return a.join("");
    },
    generateFunction: function generateFunction(a, b) {
      return "function(" + b + "){" + this.varsPrefix(a) + this.body(a) + "};";
    },
    filterPrefix: function filterPrefix() {
      var a = [],
          b = this;
      r(this.state.filters, function (d, c) {
        a.push(d + "=$filter(" + b.escape(c) + ")");
      });
      return a.length ? "var " + a.join(",") + ";" : "";
    },
    varsPrefix: function varsPrefix(a) {
      return this.state[a].vars.length ? "var " + this.state[a].vars.join(",") + ";" : "";
    },
    body: function body(a) {
      return this.state[a].body.join("");
    },
    recurse: function recurse(a, b, d, c, e, f) {
      var g,
          k,
          h = this,
          l,
          m,
          p;
      c = c || E;
      if (!f && w(a.watchId)) b = b || this.nextId(), this.if_("i", this.lazyAssign(b, this.computedMember("i", a.watchId)), this.lazyRecurse(a, b, d, c, e, !0));else switch (a.type) {
        case q.Program:
          r(a.body, function (b, c) {
            h.recurse(b.expression, void 0, void 0, function (a) {
              k = a;
            });
            c !== a.body.length - 1 ? h.current().body.push(k, ";") : h.return_(k);
          });
          break;

        case q.Literal:
          m = this.escape(a.value);
          this.assign(b, m);
          c(b || m);
          break;

        case q.UnaryExpression:
          this.recurse(a.argument, void 0, void 0, function (a) {
            k = a;
          });
          m = a.operator + "(" + this.ifDefined(k, 0) + ")";
          this.assign(b, m);
          c(m);
          break;

        case q.BinaryExpression:
          this.recurse(a.left, void 0, void 0, function (a) {
            g = a;
          });
          this.recurse(a.right, void 0, void 0, function (a) {
            k = a;
          });
          m = "+" === a.operator ? this.plus(g, k) : "-" === a.operator ? this.ifDefined(g, 0) + a.operator + this.ifDefined(k, 0) : "(" + g + ")" + a.operator + "(" + k + ")";
          this.assign(b, m);
          c(m);
          break;

        case q.LogicalExpression:
          b = b || this.nextId();
          h.recurse(a.left, b);
          h.if_("&&" === a.operator ? b : h.not(b), h.lazyRecurse(a.right, b));
          c(b);
          break;

        case q.ConditionalExpression:
          b = b || this.nextId();
          h.recurse(a.test, b);
          h.if_(b, h.lazyRecurse(a.alternate, b), h.lazyRecurse(a.consequent, b));
          c(b);
          break;

        case q.Identifier:
          b = b || this.nextId();
          d && (d.context = "inputs" === h.stage ? "s" : this.assign(this.nextId(), this.getHasOwnProperty("l", a.name) + "?l:s"), d.computed = !1, d.name = a.name);
          h.if_("inputs" === h.stage || h.not(h.getHasOwnProperty("l", a.name)), function () {
            h.if_("inputs" === h.stage || "s", function () {
              e && 1 !== e && h.if_(h.isNull(h.nonComputedMember("s", a.name)), h.lazyAssign(h.nonComputedMember("s", a.name), "{}"));
              h.assign(b, h.nonComputedMember("s", a.name));
            });
          }, b && h.lazyAssign(b, h.nonComputedMember("l", a.name)));
          c(b);
          break;

        case q.MemberExpression:
          g = d && (d.context = this.nextId()) || this.nextId();
          b = b || this.nextId();
          h.recurse(a.object, g, void 0, function () {
            h.if_(h.notNull(g), function () {
              a.computed ? (k = h.nextId(), h.recurse(a.property, k), h.getStringValue(k), e && 1 !== e && h.if_(h.not(h.computedMember(g, k)), h.lazyAssign(h.computedMember(g, k), "{}")), m = h.computedMember(g, k), h.assign(b, m), d && (d.computed = !0, d.name = k)) : (e && 1 !== e && h.if_(h.isNull(h.nonComputedMember(g, a.property.name)), h.lazyAssign(h.nonComputedMember(g, a.property.name), "{}")), m = h.nonComputedMember(g, a.property.name), h.assign(b, m), d && (d.computed = !1, d.name = a.property.name));
            }, function () {
              h.assign(b, "undefined");
            });
            c(b);
          }, !!e);
          break;

        case q.CallExpression:
          b = b || this.nextId();
          a.filter ? (k = h.filter(a.callee.name), l = [], r(a.arguments, function (a) {
            var b = h.nextId();
            h.recurse(a, b);
            l.push(b);
          }), m = k + "(" + l.join(",") + ")", h.assign(b, m), c(b)) : (k = h.nextId(), g = {}, l = [], h.recurse(a.callee, k, g, function () {
            h.if_(h.notNull(k), function () {
              r(a.arguments, function (b) {
                h.recurse(b, a.constant ? void 0 : h.nextId(), void 0, function (a) {
                  l.push(a);
                });
              });
              m = g.name ? h.member(g.context, g.name, g.computed) + "(" + l.join(",") + ")" : k + "(" + l.join(",") + ")";
              h.assign(b, m);
            }, function () {
              h.assign(b, "undefined");
            });
            c(b);
          }));
          break;

        case q.AssignmentExpression:
          k = this.nextId();
          g = {};
          this.recurse(a.left, void 0, g, function () {
            h.if_(h.notNull(g.context), function () {
              h.recurse(a.right, k);
              m = h.member(g.context, g.name, g.computed) + a.operator + k;
              h.assign(b, m);
              c(b || m);
            });
          }, 1);
          break;

        case q.ArrayExpression:
          l = [];
          r(a.elements, function (b) {
            h.recurse(b, a.constant ? void 0 : h.nextId(), void 0, function (a) {
              l.push(a);
            });
          });
          m = "[" + l.join(",") + "]";
          this.assign(b, m);
          c(b || m);
          break;

        case q.ObjectExpression:
          l = [];
          p = !1;
          r(a.properties, function (a) {
            a.computed && (p = !0);
          });
          p ? (b = b || this.nextId(), this.assign(b, "{}"), r(a.properties, function (a) {
            a.computed ? (g = h.nextId(), h.recurse(a.key, g)) : g = a.key.type === q.Identifier ? a.key.name : "" + a.key.value;
            k = h.nextId();
            h.recurse(a.value, k);
            h.assign(h.member(b, g, a.computed), k);
          })) : (r(a.properties, function (b) {
            h.recurse(b.value, a.constant ? void 0 : h.nextId(), void 0, function (a) {
              l.push(h.escape(b.key.type === q.Identifier ? b.key.name : "" + b.key.value) + ":" + a);
            });
          }), m = "{" + l.join(",") + "}", this.assign(b, m));
          c(b || m);
          break;

        case q.ThisExpression:
          this.assign(b, "s");
          c(b || "s");
          break;

        case q.LocalsExpression:
          this.assign(b, "l");
          c(b || "l");
          break;

        case q.NGValueParameter:
          this.assign(b, "v"), c(b || "v");
      }
    },
    getHasOwnProperty: function getHasOwnProperty(a, b) {
      var d = a + "." + b,
          c = this.current().own;
      c.hasOwnProperty(d) || (c[d] = this.nextId(!1, a + "&&(" + this.escape(b) + " in " + a + ")"));
      return c[d];
    },
    assign: function assign(a, b) {
      if (a) return this.current().body.push(a, "=", b, ";"), a;
    },
    filter: function filter(a) {
      this.state.filters.hasOwnProperty(a) || (this.state.filters[a] = this.nextId(!0));
      return this.state.filters[a];
    },
    ifDefined: function ifDefined(a, b) {
      return "ifDefined(" + a + "," + this.escape(b) + ")";
    },
    plus: function plus(a, b) {
      return "plus(" + a + "," + b + ")";
    },
    return_: function return_(a) {
      this.current().body.push("return ", a, ";");
    },
    if_: function if_(a, b, d) {
      if (!0 === a) b();else {
        var c = this.current().body;
        c.push("if(", a, "){");
        b();
        c.push("}");
        d && (c.push("else{"), d(), c.push("}"));
      }
    },
    not: function not(a) {
      return "!(" + a + ")";
    },
    isNull: function isNull(a) {
      return a + "==null";
    },
    notNull: function notNull(a) {
      return a + "!=null";
    },
    nonComputedMember: function nonComputedMember(a, b) {
      var d = /[^$_a-zA-Z0-9]/g;
      return /^[$_a-zA-Z][$_a-zA-Z0-9]*$/.test(b) ? a + "." + b : a + '["' + b.replace(d, this.stringEscapeFn) + '"]';
    },
    computedMember: function computedMember(a, b) {
      return a + "[" + b + "]";
    },
    member: function member(a, b, d) {
      return d ? this.computedMember(a, b) : this.nonComputedMember(a, b);
    },
    getStringValue: function getStringValue(a) {
      this.assign(a, "getStringValue(" + a + ")");
    },
    lazyRecurse: function lazyRecurse(a, b, d, c, e, f) {
      var g = this;
      return function () {
        g.recurse(a, b, d, c, e, f);
      };
    },
    lazyAssign: function lazyAssign(a, b) {
      var d = this;
      return function () {
        d.assign(a, b);
      };
    },
    stringEscapeRegex: /[^ a-zA-Z0-9]/g,
    stringEscapeFn: function stringEscapeFn(a) {
      return "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4);
    },
    escape: function escape(a) {
      if (A(a)) return "'" + a.replace(this.stringEscapeRegex, this.stringEscapeFn) + "'";
      if (W(a)) return a.toString();
      if (!0 === a) return "true";
      if (!1 === a) return "false";
      if (null === a) return "null";
      if ("undefined" === typeof a) return "undefined";
      throw Ya("esc");
    },
    nextId: function nextId(a, b) {
      var d = "v" + this.state.nextId++;
      a || this.current().vars.push(d + (b ? "=" + b : ""));
      return d;
    },
    current: function current() {
      return this.state[this.state.computing];
    }
  };
  Kd.prototype = {
    compile: function compile(a) {
      var b = this;
      Z(a, b.$filter);
      var d, c;
      if (d = Id(a)) c = this.recurse(d);
      d = Gd(a.body);
      var e;
      d && (e = [], r(d, function (a, c) {
        var d = b.recurse(a);
        d.isPure = a.isPure;
        a.input = d;
        e.push(d);
        a.watchId = c;
      }));
      var f = [];
      r(a.body, function (a) {
        f.push(b.recurse(a.expression));
      });
      a = 0 === a.body.length ? E : 1 === a.body.length ? f[0] : function (a, b) {
        var c;
        r(f, function (d) {
          c = d(a, b);
        });
        return c;
      };
      c && (a.assign = function (a, b, d) {
        return c(a, d, b);
      });
      e && (a.inputs = e);
      return a;
    },
    recurse: function recurse(a, b, d) {
      var c,
          e,
          f = this,
          g;
      if (a.input) return this.inputs(a.input, a.watchId);

      switch (a.type) {
        case q.Literal:
          return this.value(a.value, b);

        case q.UnaryExpression:
          return e = this.recurse(a.argument), this["unary" + a.operator](e, b);

        case q.BinaryExpression:
          return c = this.recurse(a.left), e = this.recurse(a.right), this["binary" + a.operator](c, e, b);

        case q.LogicalExpression:
          return c = this.recurse(a.left), e = this.recurse(a.right), this["binary" + a.operator](c, e, b);

        case q.ConditionalExpression:
          return this["ternary?:"](this.recurse(a.test), this.recurse(a.alternate), this.recurse(a.consequent), b);

        case q.Identifier:
          return f.identifier(a.name, b, d);

        case q.MemberExpression:
          return c = this.recurse(a.object, !1, !!d), a.computed || (e = a.property.name), a.computed && (e = this.recurse(a.property)), a.computed ? this.computedMember(c, e, b, d) : this.nonComputedMember(c, e, b, d);

        case q.CallExpression:
          return g = [], r(a.arguments, function (a) {
            g.push(f.recurse(a));
          }), a.filter && (e = this.$filter(a.callee.name)), a.filter || (e = this.recurse(a.callee, !0)), a.filter ? function (a, c, d, f) {
            for (var p = [], n = 0; n < g.length; ++n) {
              p.push(g[n](a, c, d, f));
            }

            a = e.apply(void 0, p, f);
            return b ? {
              context: void 0,
              name: void 0,
              value: a
            } : a;
          } : function (a, c, d, f) {
            var p = e(a, c, d, f),
                n;

            if (null != p.value) {
              n = [];

              for (var s = 0; s < g.length; ++s) {
                n.push(g[s](a, c, d, f));
              }

              n = p.value.apply(p.context, n);
            }

            return b ? {
              value: n
            } : n;
          };

        case q.AssignmentExpression:
          return c = this.recurse(a.left, !0, 1), e = this.recurse(a.right), function (a, d, f, g) {
            var p = c(a, d, f, g);
            a = e(a, d, f, g);
            p.context[p.name] = a;
            return b ? {
              value: a
            } : a;
          };

        case q.ArrayExpression:
          return g = [], r(a.elements, function (a) {
            g.push(f.recurse(a));
          }), function (a, c, d, e) {
            for (var f = [], n = 0; n < g.length; ++n) {
              f.push(g[n](a, c, d, e));
            }

            return b ? {
              value: f
            } : f;
          };

        case q.ObjectExpression:
          return g = [], r(a.properties, function (a) {
            a.computed ? g.push({
              key: f.recurse(a.key),
              computed: !0,
              value: f.recurse(a.value)
            }) : g.push({
              key: a.key.type === q.Identifier ? a.key.name : "" + a.key.value,
              computed: !1,
              value: f.recurse(a.value)
            });
          }), function (a, c, d, e) {
            for (var f = {}, n = 0; n < g.length; ++n) {
              g[n].computed ? f[g[n].key(a, c, d, e)] = g[n].value(a, c, d, e) : f[g[n].key] = g[n].value(a, c, d, e);
            }

            return b ? {
              value: f
            } : f;
          };

        case q.ThisExpression:
          return function (a) {
            return b ? {
              value: a
            } : a;
          };

        case q.LocalsExpression:
          return function (a, c) {
            return b ? {
              value: c
            } : c;
          };

        case q.NGValueParameter:
          return function (a, c, d) {
            return b ? {
              value: d
            } : d;
          };
      }
    },
    "unary+": function unary(a, b) {
      return function (d, c, e, f) {
        d = a(d, c, e, f);
        d = w(d) ? +d : 0;
        return b ? {
          value: d
        } : d;
      };
    },
    "unary-": function unary(a, b) {
      return function (d, c, e, f) {
        d = a(d, c, e, f);
        d = w(d) ? -d : -0;
        return b ? {
          value: d
        } : d;
      };
    },
    "unary!": function unary(a, b) {
      return function (d, c, e, f) {
        d = !a(d, c, e, f);
        return b ? {
          value: d
        } : d;
      };
    },
    "binary+": function binary(a, b, d) {
      return function (c, e, f, g) {
        var k = a(c, e, f, g);
        c = b(c, e, f, g);
        k = Ed(k, c);
        return d ? {
          value: k
        } : k;
      };
    },
    "binary-": function binary(a, b, d) {
      return function (c, e, f, g) {
        var k = a(c, e, f, g);
        c = b(c, e, f, g);
        k = (w(k) ? k : 0) - (w(c) ? c : 0);
        return d ? {
          value: k
        } : k;
      };
    },
    "binary*": function binary(a, b, d) {
      return function (c, e, f, g) {
        c = a(c, e, f, g) * b(c, e, f, g);
        return d ? {
          value: c
        } : c;
      };
    },
    "binary/": function binary(a, b, d) {
      return function (c, e, f, g) {
        c = a(c, e, f, g) / b(c, e, f, g);
        return d ? {
          value: c
        } : c;
      };
    },
    "binary%": function binary(a, b, d) {
      return function (c, e, f, g) {
        c = a(c, e, f, g) % b(c, e, f, g);
        return d ? {
          value: c
        } : c;
      };
    },
    "binary===": function binary(a, b, d) {
      return function (c, e, f, g) {
        c = a(c, e, f, g) === b(c, e, f, g);
        return d ? {
          value: c
        } : c;
      };
    },
    "binary!==": function binary(a, b, d) {
      return function (c, e, f, g) {
        c = a(c, e, f, g) !== b(c, e, f, g);
        return d ? {
          value: c
        } : c;
      };
    },
    "binary==": function binary(a, b, d) {
      return function (c, e, f, g) {
        c = a(c, e, f, g) == b(c, e, f, g);
        return d ? {
          value: c
        } : c;
      };
    },
    "binary!=": function binary(a, b, d) {
      return function (c, e, f, g) {
        c = a(c, e, f, g) != b(c, e, f, g);
        return d ? {
          value: c
        } : c;
      };
    },
    "binary<": function binary(a, b, d) {
      return function (c, e, f, g) {
        c = a(c, e, f, g) < b(c, e, f, g);
        return d ? {
          value: c
        } : c;
      };
    },
    "binary>": function binary(a, b, d) {
      return function (c, e, f, g) {
        c = a(c, e, f, g) > b(c, e, f, g);
        return d ? {
          value: c
        } : c;
      };
    },
    "binary<=": function binary(a, b, d) {
      return function (c, e, f, g) {
        c = a(c, e, f, g) <= b(c, e, f, g);
        return d ? {
          value: c
        } : c;
      };
    },
    "binary>=": function binary(a, b, d) {
      return function (c, e, f, g) {
        c = a(c, e, f, g) >= b(c, e, f, g);
        return d ? {
          value: c
        } : c;
      };
    },
    "binary&&": function binary(a, b, d) {
      return function (c, e, f, g) {
        c = a(c, e, f, g) && b(c, e, f, g);
        return d ? {
          value: c
        } : c;
      };
    },
    "binary||": function binary(a, b, d) {
      return function (c, e, f, g) {
        c = a(c, e, f, g) || b(c, e, f, g);
        return d ? {
          value: c
        } : c;
      };
    },
    "ternary?:": function ternary(a, b, d, c) {
      return function (e, f, g, k) {
        e = a(e, f, g, k) ? b(e, f, g, k) : d(e, f, g, k);
        return c ? {
          value: e
        } : e;
      };
    },
    value: function value(a, b) {
      return function () {
        return b ? {
          context: void 0,
          name: void 0,
          value: a
        } : a;
      };
    },
    identifier: function identifier(a, b, d) {
      return function (c, e, f, g) {
        c = e && a in e ? e : c;
        d && 1 !== d && c && null == c[a] && (c[a] = {});
        e = c ? c[a] : void 0;
        return b ? {
          context: c,
          name: a,
          value: e
        } : e;
      };
    },
    computedMember: function computedMember(a, b, d, c) {
      return function (e, f, g, k) {
        var h = a(e, f, g, k),
            l,
            m;
        null != h && (l = b(e, f, g, k), l += "", c && 1 !== c && h && !h[l] && (h[l] = {}), m = h[l]);
        return d ? {
          context: h,
          name: l,
          value: m
        } : m;
      };
    },
    nonComputedMember: function nonComputedMember(a, b, d, c) {
      return function (e, f, g, k) {
        e = a(e, f, g, k);
        c && 1 !== c && e && null == e[b] && (e[b] = {});
        f = null != e ? e[b] : void 0;
        return d ? {
          context: e,
          name: b,
          value: f
        } : f;
      };
    },
    inputs: function inputs(a, b) {
      return function (d, c, e, f) {
        return f ? f[b] : a(d, c, e);
      };
    }
  };
  Mb.prototype = {
    constructor: Mb,
    parse: function parse(a) {
      a = this.getAst(a);
      var b = this.astCompiler.compile(a.ast),
          d = a.ast;
      b.literal = 0 === d.body.length || 1 === d.body.length && (d.body[0].expression.type === q.Literal || d.body[0].expression.type === q.ArrayExpression || d.body[0].expression.type === q.ObjectExpression);
      b.constant = a.ast.constant;
      b.oneTime = a.oneTime;
      return b;
    },
    getAst: function getAst(a) {
      var b = !1;
      a = a.trim();
      ":" === a.charAt(0) && ":" === a.charAt(1) && (b = !0, a = a.substring(2));
      return {
        ast: this.ast.ast(a),
        oneTime: b
      };
    }
  };
  var Ea = F("$sce"),
      V = {
    HTML: "html",
    CSS: "css",
    MEDIA_URL: "mediaUrl",
    URL: "url",
    RESOURCE_URL: "resourceUrl",
    JS: "js"
  },
      Cc = /_([a-z])/g,
      Ug = F("$templateRequest"),
      Vg = F("$timeout"),
      aa = C.document.createElement("a"),
      Od = ga(C.location.href),
      Na;
  aa.href = "http://[::1]";
  var Wg = "[::1]" === aa.hostname;
  Pd.$inject = ["$document"];
  dd.$inject = ["$provide"];
  var Wd = 22,
      Vd = ".",
      Ec = "0";
  Qd.$inject = ["$locale"];
  Sd.$inject = ["$locale"];
  var gh = {
    yyyy: ea("FullYear", 4, 0, !1, !0),
    yy: ea("FullYear", 2, 0, !0, !0),
    y: ea("FullYear", 1, 0, !1, !0),
    MMMM: kb("Month"),
    MMM: kb("Month", !0),
    MM: ea("Month", 2, 1),
    M: ea("Month", 1, 1),
    LLLL: kb("Month", !1, !0),
    dd: ea("Date", 2),
    d: ea("Date", 1),
    HH: ea("Hours", 2),
    H: ea("Hours", 1),
    hh: ea("Hours", 2, -12),
    h: ea("Hours", 1, -12),
    mm: ea("Minutes", 2),
    m: ea("Minutes", 1),
    ss: ea("Seconds", 2),
    s: ea("Seconds", 1),
    sss: ea("Milliseconds", 3),
    EEEE: kb("Day"),
    EEE: kb("Day", !0),
    a: function a(_a, b) {
      return 12 > _a.getHours() ? b.AMPMS[0] : b.AMPMS[1];
    },
    Z: function Z(a, b, d) {
      a = -1 * d;
      return a = (0 <= a ? "+" : "") + (Ob(Math[0 < a ? "floor" : "ceil"](a / 60), 2) + Ob(Math.abs(a % 60), 2));
    },
    ww: Yd(2),
    w: Yd(1),
    G: Fc,
    GG: Fc,
    GGG: Fc,
    GGGG: function GGGG(a, b) {
      return 0 >= a.getFullYear() ? b.ERANAMES[0] : b.ERANAMES[1];
    }
  },
      fh = /((?:[^yMLdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|m+|s+|a|Z|G+|w+))([\s\S]*)/,
      eh = /^-?\d+$/;
  Rd.$inject = ["$locale"];
  var $g = ia(K),
      ah = ia(ub);
  Td.$inject = ["$parse"];
  var Me = ia({
    restrict: "E",
    compile: function compile(a, b) {
      if (!b.href && !b.xlinkHref) return function (a, b) {
        if ("a" === b[0].nodeName.toLowerCase()) {
          var e = "[object SVGAnimatedString]" === la.call(b.prop("href")) ? "xlink:href" : "href";
          b.on("click", function (a) {
            b.attr(e) || a.preventDefault();
          });
        }
      };
    }
  }),
      vb = {};
  r(Gb, function (a, b) {
    function d(a, d, e) {
      a.$watch(e[c], function (a) {
        e.$set(b, !!a);
      });
    }

    if ("multiple" !== a) {
      var c = wa("ng-" + b),
          e = d;
      "checked" === a && (e = function e(a, b, _e) {
        _e.ngModel !== _e[c] && d(a, b, _e);
      });

      vb[c] = function () {
        return {
          restrict: "A",
          priority: 100,
          link: e
        };
      };
    }
  });
  r(td, function (a, b) {
    vb[b] = function () {
      return {
        priority: 100,
        link: function link(a, c, e) {
          if ("ngPattern" === b && "/" === e.ngPattern.charAt(0) && (c = e.ngPattern.match(ie))) {
            e.$set("ngPattern", new RegExp(c[1], c[2]));
            return;
          }

          a.$watch(e[b], function (a) {
            e.$set(b, a);
          });
        }
      };
    };
  });
  r(["src", "srcset", "href"], function (a) {
    var b = wa("ng-" + a);
    vb[b] = ["$sce", function (d) {
      return {
        priority: 99,
        link: function link(c, e, f) {
          var g = a,
              k = a;
          "href" === a && "[object SVGAnimatedString]" === la.call(e.prop("href")) && (k = "xlinkHref", f.$attr[k] = "xlink:href", g = null);
          f.$set(b, d.getTrustedMediaUrl(f[b]));
          f.$observe(b, function (b) {
            b ? (f.$set(k, b), Ca && g && e.prop(g, f[k])) : "href" === a && f.$set(k, null);
          });
        }
      };
    }];
  });
  var lb = {
    $addControl: E,
    $getControls: ia([]),
    $$renameControl: function $$renameControl(a, b) {
      a.$name = b;
    },
    $removeControl: E,
    $setValidity: E,
    $setDirty: E,
    $setPristine: E,
    $setSubmitted: E,
    $$setSubmitted: E
  };
  Pb.$inject = ["$element", "$attrs", "$scope", "$animate", "$interpolate"];
  Pb.prototype = {
    $rollbackViewValue: function $rollbackViewValue() {
      r(this.$$controls, function (a) {
        a.$rollbackViewValue();
      });
    },
    $commitViewValue: function $commitViewValue() {
      r(this.$$controls, function (a) {
        a.$commitViewValue();
      });
    },
    $addControl: function $addControl(a) {
      Ja(a.$name, "input");
      this.$$controls.push(a);
      a.$name && (this[a.$name] = a);
      a.$$parentForm = this;
    },
    $getControls: function $getControls() {
      return ja(this.$$controls);
    },
    $$renameControl: function $$renameControl(a, b) {
      var d = a.$name;
      this[d] === a && delete this[d];
      this[b] = a;
      a.$name = b;
    },
    $removeControl: function $removeControl(a) {
      a.$name && this[a.$name] === a && delete this[a.$name];
      r(this.$pending, function (b, d) {
        this.$setValidity(d, null, a);
      }, this);
      r(this.$error, function (b, d) {
        this.$setValidity(d, null, a);
      }, this);
      r(this.$$success, function (b, d) {
        this.$setValidity(d, null, a);
      }, this);
      cb(this.$$controls, a);
      a.$$parentForm = lb;
    },
    $setDirty: function $setDirty() {
      this.$$animate.removeClass(this.$$element, Za);
      this.$$animate.addClass(this.$$element, Vb);
      this.$dirty = !0;
      this.$pristine = !1;
      this.$$parentForm.$setDirty();
    },
    $setPristine: function $setPristine() {
      this.$$animate.setClass(this.$$element, Za, Vb + " ng-submitted");
      this.$dirty = !1;
      this.$pristine = !0;
      this.$submitted = !1;
      r(this.$$controls, function (a) {
        a.$setPristine();
      });
    },
    $setUntouched: function $setUntouched() {
      r(this.$$controls, function (a) {
        a.$setUntouched();
      });
    },
    $setSubmitted: function $setSubmitted() {
      for (var a = this; a.$$parentForm && a.$$parentForm !== lb;) {
        a = a.$$parentForm;
      }

      a.$$setSubmitted();
    },
    $$setSubmitted: function $$setSubmitted() {
      this.$$animate.addClass(this.$$element, "ng-submitted");
      this.$submitted = !0;
      r(this.$$controls, function (a) {
        a.$$setSubmitted && a.$$setSubmitted();
      });
    }
  };
  ae({
    clazz: Pb,
    set: function set(a, b, d) {
      var c = a[b];
      c ? -1 === c.indexOf(d) && c.push(d) : a[b] = [d];
    },
    unset: function unset(a, b, d) {
      var c = a[b];
      c && (cb(c, d), 0 === c.length && delete a[b]);
    }
  });

  var ke = function ke(a) {
    return ["$timeout", "$parse", function (b, d) {
      function c(a) {
        return "" === a ? d('this[""]').assign : d(a).assign || E;
      }

      return {
        name: "form",
        restrict: a ? "EAC" : "E",
        require: ["form", "^^?form"],
        controller: Pb,
        compile: function compile(d, f) {
          d.addClass(Za).addClass(mb);
          var g = f.name ? "name" : a && f.ngForm ? "ngForm" : !1;
          return {
            pre: function pre(a, d, e, f) {
              var p = f[0];

              if (!("action" in e)) {
                var n = function n(b) {
                  a.$apply(function () {
                    p.$commitViewValue();
                    p.$setSubmitted();
                  });
                  b.preventDefault();
                };

                d[0].addEventListener("submit", n);
                d.on("$destroy", function () {
                  b(function () {
                    d[0].removeEventListener("submit", n);
                  }, 0, !1);
                });
              }

              (f[1] || p.$$parentForm).$addControl(p);
              var s = g ? c(p.$name) : E;
              g && (s(a, p), e.$observe(g, function (b) {
                p.$name !== b && (s(a, void 0), p.$$parentForm.$$renameControl(p, b), s = c(p.$name), s(a, p));
              }));
              d.on("$destroy", function () {
                p.$$parentForm.$removeControl(p);
                s(a, void 0);
                S(p, lb);
              });
            }
          };
        }
      };
    }];
  },
      Ne = ke(),
      Ze = ke(!0),
      hh = /^\d{4,}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+(?:[+-][0-2]\d:[0-5]\d|Z)$/,
      sh = /^[a-z][a-z\d.+-]*:\/*(?:[^:@]+(?::[^@]+)?@)?(?:[^\s:/?#]+|\[[a-f\d:]+])(?::\d+)?(?:\/[^?#]*)?(?:\?[^#]*)?(?:#.*)?$/i,
      th = /^(?=.{1,254}$)(?=.{1,64}@)[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+(\.[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+)*@[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$/,
      ih = /^\s*(-|\+)?(\d+|(\d*(\.\d*)))([eE][+-]?\d+)?\s*$/,
      le = /^(\d{4,})-(\d{2})-(\d{2})$/,
      me = /^(\d{4,})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,
      Mc = /^(\d{4,})-W(\d\d)$/,
      ne = /^(\d{4,})-(\d\d)$/,
      oe = /^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,
      ce = T();

  r(["date", "datetime-local", "month", "time", "week"], function (a) {
    ce[a] = !0;
  });

  var pe = {
    text: function text(a, b, d, c, e, f) {
      Sa(a, b, d, c, e, f);
      Hc(c);
    },
    date: nb("date", le, Qb(le, ["yyyy", "MM", "dd"]), "yyyy-MM-dd"),
    "datetime-local": nb("datetimelocal", me, Qb(me, "yyyy MM dd HH mm ss sss".split(" ")), "yyyy-MM-ddTHH:mm:ss.sss"),
    time: nb("time", oe, Qb(oe, ["HH", "mm", "ss", "sss"]), "HH:mm:ss.sss"),
    week: nb("week", Mc, function (a, b) {
      if (ha(a)) return a;

      if (A(a)) {
        Mc.lastIndex = 0;
        var d = Mc.exec(a);

        if (d) {
          var c = +d[1],
              e = +d[2],
              f = d = 0,
              g = 0,
              k = 0,
              h = Xd(c),
              e = 7 * (e - 1);
          b && (d = b.getHours(), f = b.getMinutes(), g = b.getSeconds(), k = b.getMilliseconds());
          return new Date(c, 0, h.getDate() + e, d, f, g, k);
        }
      }

      return NaN;
    }, "yyyy-Www"),
    month: nb("month", ne, Qb(ne, ["yyyy", "MM"]), "yyyy-MM"),
    number: function number(a, b, d, c, e, f, g, k) {
      Ic(a, b, d, c, "number");
      de(c);
      Sa(a, b, d, c, e, f);
      var h;

      if (w(d.min) || d.ngMin) {
        var l = d.min || k(d.ngMin)(a);
        h = na(l);

        c.$validators.min = function (a, b) {
          return c.$isEmpty(b) || z(h) || b >= h;
        };

        d.$observe("min", function (a) {
          a !== l && (h = na(a), l = a, c.$validate());
        });
      }

      if (w(d.max) || d.ngMax) {
        var m = d.max || k(d.ngMax)(a),
            p = na(m);

        c.$validators.max = function (a, b) {
          return c.$isEmpty(b) || z(p) || b <= p;
        };

        d.$observe("max", function (a) {
          a !== m && (p = na(a), m = a, c.$validate());
        });
      }

      if (w(d.step) || d.ngStep) {
        var n = d.step || k(d.ngStep)(a),
            s = na(n);

        c.$validators.step = function (a, b) {
          return c.$isEmpty(b) || z(s) || ee(b, h || 0, s);
        };

        d.$observe("step", function (a) {
          a !== n && (s = na(a), n = a, c.$validate());
        });
      }
    },
    url: function url(a, b, d, c, e, f) {
      Sa(a, b, d, c, e, f);
      Hc(c);

      c.$validators.url = function (a, b) {
        var d = a || b;
        return c.$isEmpty(d) || sh.test(d);
      };
    },
    email: function email(a, b, d, c, e, f) {
      Sa(a, b, d, c, e, f);
      Hc(c);

      c.$validators.email = function (a, b) {
        var d = a || b;
        return c.$isEmpty(d) || th.test(d);
      };
    },
    radio: function radio(a, b, d, c) {
      var e = !d.ngTrim || "false" !== U(d.ngTrim);
      z(d.name) && b.attr("name", ++pb);
      b.on("change", function (a) {
        var g;
        b[0].checked && (g = d.value, e && (g = U(g)), c.$setViewValue(g, a && a.type));
      });

      c.$render = function () {
        var a = d.value;
        e && (a = U(a));
        b[0].checked = a === c.$viewValue;
      };

      d.$observe("value", c.$render);
    },
    range: function range(a, b, d, c, e, f) {
      function g(a, c) {
        b.attr(a, d[a]);
        var e = d[a];
        d.$observe(a, function (a) {
          a !== e && (e = a, c(a));
        });
      }

      function k(a) {
        p = na(a);
        X(c.$modelValue) || (m ? (a = b.val(), p > a && (a = p, b.val(a)), c.$setViewValue(a)) : c.$validate());
      }

      function h(a) {
        n = na(a);
        X(c.$modelValue) || (m ? (a = b.val(), n < a && (b.val(n), a = n < p ? p : n), c.$setViewValue(a)) : c.$validate());
      }

      function l(a) {
        s = na(a);
        X(c.$modelValue) || (m ? c.$viewValue !== b.val() && c.$setViewValue(b.val()) : c.$validate());
      }

      Ic(a, b, d, c, "range");
      de(c);
      Sa(a, b, d, c, e, f);
      var m = c.$$hasNativeValidators && "range" === b[0].type,
          p = m ? 0 : void 0,
          n = m ? 100 : void 0,
          s = m ? 1 : void 0,
          r = b[0].validity;
      a = w(d.min);
      e = w(d.max);
      f = w(d.step);
      var q = c.$render;
      c.$render = m && w(r.rangeUnderflow) && w(r.rangeOverflow) ? function () {
        q();
        c.$setViewValue(b.val());
      } : q;
      a && (p = na(d.min), c.$validators.min = m ? function () {
        return !0;
      } : function (a, b) {
        return c.$isEmpty(b) || z(p) || b >= p;
      }, g("min", k));
      e && (n = na(d.max), c.$validators.max = m ? function () {
        return !0;
      } : function (a, b) {
        return c.$isEmpty(b) || z(n) || b <= n;
      }, g("max", h));
      f && (s = na(d.step), c.$validators.step = m ? function () {
        return !r.stepMismatch;
      } : function (a, b) {
        return c.$isEmpty(b) || z(s) || ee(b, p || 0, s);
      }, g("step", l));
    },
    checkbox: function checkbox(a, b, d, c, e, f, g, k) {
      var h = fe(k, a, "ngTrueValue", d.ngTrueValue, !0),
          l = fe(k, a, "ngFalseValue", d.ngFalseValue, !1);
      b.on("change", function (a) {
        c.$setViewValue(b[0].checked, a && a.type);
      });

      c.$render = function () {
        b[0].checked = c.$viewValue;
      };

      c.$isEmpty = function (a) {
        return !1 === a;
      };

      c.$formatters.push(function (a) {
        return va(a, h);
      });
      c.$parsers.push(function (a) {
        return a ? h : l;
      });
    },
    hidden: E,
    button: E,
    submit: E,
    reset: E,
    file: E
  },
      Yc = ["$browser", "$sniffer", "$filter", "$parse", function (a, b, d, c) {
    return {
      restrict: "E",
      require: ["?ngModel"],
      link: {
        pre: function pre(e, f, g, k) {
          k[0] && (pe[K(g.type)] || pe.text)(e, f, g, k[0], b, a, d, c);
        }
      }
    };
  }],
      vf = function vf() {
    var a = {
      configurable: !0,
      enumerable: !1,
      get: function get() {
        return this.getAttribute("value") || "";
      },
      set: function set(a) {
        this.setAttribute("value", a);
      }
    };
    return {
      restrict: "E",
      priority: 200,
      compile: function compile(b, d) {
        if ("hidden" === K(d.type)) return {
          pre: function pre(b, d, f, g) {
            b = d[0];
            b.parentNode && b.parentNode.insertBefore(b, b.nextSibling);
            Object.defineProperty && Object.defineProperty(b, "value", a);
          }
        };
      }
    };
  },
      uh = /^(true|false|\d+)$/,
      sf = function sf() {
    function a(a, d, c) {
      var e = w(c) ? c : 9 === Ca ? "" : null;
      a.prop("value", e);
      d.$set("value", c);
    }

    return {
      restrict: "A",
      priority: 100,
      compile: function compile(b, d) {
        return uh.test(d.ngValue) ? function (b, d, f) {
          b = b.$eval(f.ngValue);
          a(d, f, b);
        } : function (b, d, f) {
          b.$watch(f.ngValue, function (b) {
            a(d, f, b);
          });
        };
      }
    };
  },
      Re = ["$compile", function (a) {
    return {
      restrict: "AC",
      compile: function compile(b) {
        a.$$addBindingClass(b);
        return function (b, c, e) {
          a.$$addBindingInfo(c, e.ngBind);
          c = c[0];
          b.$watch(e.ngBind, function (a) {
            c.textContent = ic(a);
          });
        };
      }
    };
  }],
      Te = ["$interpolate", "$compile", function (a, b) {
    return {
      compile: function compile(d) {
        b.$$addBindingClass(d);
        return function (c, d, f) {
          c = a(d.attr(f.$attr.ngBindTemplate));
          b.$$addBindingInfo(d, c.expressions);
          d = d[0];
          f.$observe("ngBindTemplate", function (a) {
            d.textContent = z(a) ? "" : a;
          });
        };
      }
    };
  }],
      Se = ["$sce", "$parse", "$compile", function (a, b, d) {
    return {
      restrict: "A",
      compile: function compile(c, e) {
        var f = b(e.ngBindHtml),
            g = b(e.ngBindHtml, function (b) {
          return a.valueOf(b);
        });
        d.$$addBindingClass(c);
        return function (b, c, e) {
          d.$$addBindingInfo(c, e.ngBindHtml);
          b.$watch(g, function () {
            var d = f(b);
            c.html(a.getTrustedHtml(d) || "");
          });
        };
      }
    };
  }],
      rf = ia({
    restrict: "A",
    require: "ngModel",
    link: function link(a, b, d, c) {
      c.$viewChangeListeners.push(function () {
        a.$eval(d.ngChange);
      });
    }
  }),
      Ue = Kc("", !0),
      We = Kc("Odd", 0),
      Ve = Kc("Even", 1),
      Xe = Ra({
    compile: function compile(a, b) {
      b.$set("ngCloak", void 0);
      a.removeClass("ng-cloak");
    }
  }),
      Ye = [function () {
    return {
      restrict: "A",
      scope: !0,
      controller: "@",
      priority: 500
    };
  }],
      cd = {},
      vh = {
    blur: !0,
    focus: !0
  };

  r("click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste".split(" "), function (a) {
    var b = wa("ng-" + a);
    cd[b] = ["$parse", "$rootScope", "$exceptionHandler", function (d, c, e) {
      return qd(d, c, e, b, a, vh[a]);
    }];
  });

  var af = ["$animate", "$compile", function (a, b) {
    return {
      multiElement: !0,
      transclude: "element",
      priority: 600,
      terminal: !0,
      restrict: "A",
      $$tlb: !0,
      link: function link(d, c, e, f, g) {
        var k, h, l;
        d.$watch(e.ngIf, function (d) {
          d ? h || g(function (d, f) {
            h = f;
            d[d.length++] = b.$$createComment("end ngIf", e.ngIf);
            k = {
              clone: d
            };
            a.enter(d, c.parent(), c);
          }) : (l && (l.remove(), l = null), h && (h.$destroy(), h = null), k && (l = tb(k.clone), a.leave(l).done(function (a) {
            !1 !== a && (l = null);
          }), k = null));
        });
      }
    };
  }],
      bf = ["$templateRequest", "$anchorScroll", "$animate", function (a, b, d) {
    return {
      restrict: "ECA",
      priority: 400,
      terminal: !0,
      transclude: "element",
      controller: ca.noop,
      compile: function compile(c, e) {
        var f = e.ngInclude || e.src,
            g = e.onload || "",
            k = e.autoscroll;
        return function (c, e, m, p, n) {
          var r = 0,
              q,
              t,
              x,
              v = function v() {
            t && (t.remove(), t = null);
            q && (q.$destroy(), q = null);
            x && (d.leave(x).done(function (a) {
              !1 !== a && (t = null);
            }), t = x, x = null);
          };

          c.$watch(f, function (f) {
            var m = function m(a) {
              !1 === a || !w(k) || k && !c.$eval(k) || b();
            },
                t = ++r;

            f ? (a(f, !0).then(function (a) {
              if (!c.$$destroyed && t === r) {
                var b = c.$new();
                p.template = a;
                a = n(b, function (a) {
                  v();
                  d.enter(a, null, e).done(m);
                });
                q = b;
                x = a;
                q.$emit("$includeContentLoaded", f);
                c.$eval(g);
              }
            }, function () {
              c.$$destroyed || t !== r || (v(), c.$emit("$includeContentError", f));
            }), c.$emit("$includeContentRequested", f)) : (v(), p.template = null);
          });
        };
      }
    };
  }],
      uf = ["$compile", function (a) {
    return {
      restrict: "ECA",
      priority: -400,
      require: "ngInclude",
      link: function link(b, d, c, e) {
        la.call(d[0]).match(/SVG/) ? (d.empty(), a(ed(e.template, C.document).childNodes)(b, function (a) {
          d.append(a);
        }, {
          futureParentElement: d
        })) : (d.html(e.template), a(d.contents())(b));
      }
    };
  }],
      cf = Ra({
    priority: 450,
    compile: function compile() {
      return {
        pre: function pre(a, b, d) {
          a.$eval(d.ngInit);
        }
      };
    }
  }),
      qf = function qf() {
    return {
      restrict: "A",
      priority: 100,
      require: "ngModel",
      link: function link(a, b, d, c) {
        var e = d.ngList || ", ",
            f = "false" !== d.ngTrim,
            g = f ? U(e) : e;
        c.$parsers.push(function (a) {
          if (!z(a)) {
            var b = [];
            a && r(a.split(g), function (a) {
              a && b.push(f ? U(a) : a);
            });
            return b;
          }
        });
        c.$formatters.push(function (a) {
          if (H(a)) return a.join(e);
        });

        c.$isEmpty = function (a) {
          return !a || !a.length;
        };
      }
    };
  },
      mb = "ng-valid",
      $d = "ng-invalid",
      Za = "ng-pristine",
      Vb = "ng-dirty",
      ob = F("ngModel");

  Rb.$inject = "$scope $exceptionHandler $attrs $element $parse $animate $timeout $q $interpolate".split(" ");
  Rb.prototype = {
    $$initGetterSetters: function $$initGetterSetters() {
      if (this.$options.getOption("getterSetter")) {
        var a = this.$$parse(this.$$attr.ngModel + "()"),
            b = this.$$parse(this.$$attr.ngModel + "($$$p)");

        this.$$ngModelGet = function (b) {
          var c = this.$$parsedNgModel(b);
          B(c) && (c = a(b));
          return c;
        };

        this.$$ngModelSet = function (a, c) {
          B(this.$$parsedNgModel(a)) ? b(a, {
            $$$p: c
          }) : this.$$parsedNgModelAssign(a, c);
        };
      } else if (!this.$$parsedNgModel.assign) throw ob("nonassign", this.$$attr.ngModel, za(this.$$element));
    },
    $render: E,
    $isEmpty: function $isEmpty(a) {
      return z(a) || "" === a || null === a || a !== a;
    },
    $$updateEmptyClasses: function $$updateEmptyClasses(a) {
      this.$isEmpty(a) ? (this.$$animate.removeClass(this.$$element, "ng-not-empty"), this.$$animate.addClass(this.$$element, "ng-empty")) : (this.$$animate.removeClass(this.$$element, "ng-empty"), this.$$animate.addClass(this.$$element, "ng-not-empty"));
    },
    $setPristine: function $setPristine() {
      this.$dirty = !1;
      this.$pristine = !0;
      this.$$animate.removeClass(this.$$element, Vb);
      this.$$animate.addClass(this.$$element, Za);
    },
    $setDirty: function $setDirty() {
      this.$dirty = !0;
      this.$pristine = !1;
      this.$$animate.removeClass(this.$$element, Za);
      this.$$animate.addClass(this.$$element, Vb);
      this.$$parentForm.$setDirty();
    },
    $setUntouched: function $setUntouched() {
      this.$touched = !1;
      this.$untouched = !0;
      this.$$animate.setClass(this.$$element, "ng-untouched", "ng-touched");
    },
    $setTouched: function $setTouched() {
      this.$touched = !0;
      this.$untouched = !1;
      this.$$animate.setClass(this.$$element, "ng-touched", "ng-untouched");
    },
    $rollbackViewValue: function $rollbackViewValue() {
      this.$$timeout.cancel(this.$$pendingDebounce);
      this.$viewValue = this.$$lastCommittedViewValue;
      this.$render();
    },
    $validate: function $validate() {
      if (!X(this.$modelValue)) {
        var a = this.$$lastCommittedViewValue,
            b = this.$$rawModelValue,
            d = this.$valid,
            c = this.$modelValue,
            e = this.$options.getOption("allowInvalid"),
            f = this;
        this.$$runValidators(b, a, function (a) {
          e || d === a || (f.$modelValue = a ? b : void 0, f.$modelValue !== c && f.$$writeModelToScope());
        });
      }
    },
    $$runValidators: function $$runValidators(a, b, d) {
      function c() {
        var c = !0;
        r(h.$validators, function (d, e) {
          var g = Boolean(d(a, b));
          c = c && g;
          f(e, g);
        });
        return c ? !0 : (r(h.$asyncValidators, function (a, b) {
          f(b, null);
        }), !1);
      }

      function e() {
        var c = [],
            d = !0;
        r(h.$asyncValidators, function (e, g) {
          var h = e(a, b);
          if (!h || !B(h.then)) throw ob("nopromise", h);
          f(g, void 0);
          c.push(h.then(function () {
            f(g, !0);
          }, function () {
            d = !1;
            f(g, !1);
          }));
        });
        c.length ? h.$$q.all(c).then(function () {
          g(d);
        }, E) : g(!0);
      }

      function f(a, b) {
        k === h.$$currentValidationRunId && h.$setValidity(a, b);
      }

      function g(a) {
        k === h.$$currentValidationRunId && d(a);
      }

      this.$$currentValidationRunId++;
      var k = this.$$currentValidationRunId,
          h = this;
      (function () {
        var a = h.$$parserName;
        if (z(h.$$parserValid)) f(a, null);else return h.$$parserValid || (r(h.$validators, function (a, b) {
          f(b, null);
        }), r(h.$asyncValidators, function (a, b) {
          f(b, null);
        })), f(a, h.$$parserValid), h.$$parserValid;
        return !0;
      })() ? c() ? e() : g(!1) : g(!1);
    },
    $commitViewValue: function $commitViewValue() {
      var a = this.$viewValue;
      this.$$timeout.cancel(this.$$pendingDebounce);
      if (this.$$lastCommittedViewValue !== a || "" === a && this.$$hasNativeValidators) this.$$updateEmptyClasses(a), this.$$lastCommittedViewValue = a, this.$pristine && this.$setDirty(), this.$$parseAndValidate();
    },
    $$parseAndValidate: function $$parseAndValidate() {
      var a = this.$$lastCommittedViewValue,
          b = this;
      this.$$parserValid = z(a) ? void 0 : !0;
      this.$setValidity(this.$$parserName, null);
      this.$$parserName = "parse";
      if (this.$$parserValid) for (var d = 0; d < this.$parsers.length; d++) {
        if (a = this.$parsers[d](a), z(a)) {
          this.$$parserValid = !1;
          break;
        }
      }
      X(this.$modelValue) && (this.$modelValue = this.$$ngModelGet(this.$$scope));
      var c = this.$modelValue,
          e = this.$options.getOption("allowInvalid");
      this.$$rawModelValue = a;
      e && (this.$modelValue = a, b.$modelValue !== c && b.$$writeModelToScope());
      this.$$runValidators(a, this.$$lastCommittedViewValue, function (d) {
        e || (b.$modelValue = d ? a : void 0, b.$modelValue !== c && b.$$writeModelToScope());
      });
    },
    $$writeModelToScope: function $$writeModelToScope() {
      this.$$ngModelSet(this.$$scope, this.$modelValue);
      r(this.$viewChangeListeners, function (a) {
        try {
          a();
        } catch (b) {
          this.$$exceptionHandler(b);
        }
      }, this);
    },
    $setViewValue: function $setViewValue(a, b) {
      this.$viewValue = a;
      this.$options.getOption("updateOnDefault") && this.$$debounceViewValueCommit(b);
    },
    $$debounceViewValueCommit: function $$debounceViewValueCommit(a) {
      var b = this.$options.getOption("debounce");
      W(b[a]) ? b = b[a] : W(b["default"]) && -1 === this.$options.getOption("updateOn").indexOf(a) ? b = b["default"] : W(b["*"]) && (b = b["*"]);
      this.$$timeout.cancel(this.$$pendingDebounce);
      var d = this;
      0 < b ? this.$$pendingDebounce = this.$$timeout(function () {
        d.$commitViewValue();
      }, b) : this.$$rootScope.$$phase ? this.$commitViewValue() : this.$$scope.$apply(function () {
        d.$commitViewValue();
      });
    },
    $overrideModelOptions: function $overrideModelOptions(a) {
      this.$options = this.$options.createChild(a);
      this.$$setUpdateOnEvents();
    },
    $processModelValue: function $processModelValue() {
      var a = this.$$format();
      this.$viewValue !== a && (this.$$updateEmptyClasses(a), this.$viewValue = this.$$lastCommittedViewValue = a, this.$render(), this.$$runValidators(this.$modelValue, this.$viewValue, E));
    },
    $$format: function $$format() {
      for (var a = this.$formatters, b = a.length, d = this.$modelValue; b--;) {
        d = a[b](d);
      }

      return d;
    },
    $$setModelValue: function $$setModelValue(a) {
      this.$modelValue = this.$$rawModelValue = a;
      this.$$parserValid = void 0;
      this.$processModelValue();
    },
    $$setUpdateOnEvents: function $$setUpdateOnEvents() {
      this.$$updateEvents && this.$$element.off(this.$$updateEvents, this.$$updateEventHandler);
      if (this.$$updateEvents = this.$options.getOption("updateOn")) this.$$element.on(this.$$updateEvents, this.$$updateEventHandler);
    },
    $$updateEventHandler: function $$updateEventHandler(a) {
      this.$$debounceViewValueCommit(a && a.type);
    }
  };
  ae({
    clazz: Rb,
    set: function set(a, b) {
      a[b] = !0;
    },
    unset: function unset(a, b) {
      delete a[b];
    }
  });
  var pf = ["$rootScope", function (a) {
    return {
      restrict: "A",
      require: ["ngModel", "^?form", "^?ngModelOptions"],
      controller: Rb,
      priority: 1,
      compile: function compile(b) {
        b.addClass(Za).addClass("ng-untouched").addClass(mb);
        return {
          pre: function pre(a, b, e, f) {
            var g = f[0];
            b = f[1] || g.$$parentForm;
            if (f = f[2]) g.$options = f.$options;
            g.$$initGetterSetters();
            b.$addControl(g);
            e.$observe("name", function (a) {
              g.$name !== a && g.$$parentForm.$$renameControl(g, a);
            });
            a.$on("$destroy", function () {
              g.$$parentForm.$removeControl(g);
            });
          },
          post: function post(b, c, e, f) {
            function g() {
              k.$setTouched();
            }

            var k = f[0];
            k.$$setUpdateOnEvents();
            c.on("blur", function () {
              k.$touched || (a.$$phase ? b.$evalAsync(g) : b.$apply(g));
            });
          }
        };
      }
    };
  }],
      Sb,
      wh = /(\s+|^)default(\s+|$)/;
  Lc.prototype = {
    getOption: function getOption(a) {
      return this.$$options[a];
    },
    createChild: function createChild(a) {
      var b = !1;
      a = S({}, a);
      r(a, function (d, c) {
        "$inherit" === d ? "*" === c ? b = !0 : (a[c] = this.$$options[c], "updateOn" === c && (a.updateOnDefault = this.$$options.updateOnDefault)) : "updateOn" === c && (a.updateOnDefault = !1, a[c] = U(d.replace(wh, function () {
          a.updateOnDefault = !0;
          return " ";
        })));
      }, this);
      b && (delete a["*"], ge(a, this.$$options));
      ge(a, Sb.$$options);
      return new Lc(a);
    }
  };
  Sb = new Lc({
    updateOn: "",
    updateOnDefault: !0,
    debounce: 0,
    getterSetter: !1,
    allowInvalid: !1,
    timezone: null
  });

  var tf = function tf() {
    function a(a, d) {
      this.$$attrs = a;
      this.$$scope = d;
    }

    a.$inject = ["$attrs", "$scope"];
    a.prototype = {
      $onInit: function $onInit() {
        var a = this.parentCtrl ? this.parentCtrl.$options : Sb,
            d = this.$$scope.$eval(this.$$attrs.ngModelOptions);
        this.$options = a.createChild(d);
      }
    };
    return {
      restrict: "A",
      priority: 10,
      require: {
        parentCtrl: "?^^ngModelOptions"
      },
      bindToController: !0,
      controller: a
    };
  },
      df = Ra({
    terminal: !0,
    priority: 1E3
  }),
      xh = F("ngOptions"),
      yh = /^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?(?:\s+disable\s+when\s+([\s\S]+?))?\s+for\s+(?:([$\w][$\w]*)|(?:\(\s*([$\w][$\w]*)\s*,\s*([$\w][$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/,
      nf = ["$compile", "$document", "$parse", function (a, b, d) {
    function c(a, b, c) {
      function e(a, b, c, d, f) {
        this.selectValue = a;
        this.viewValue = b;
        this.label = c;
        this.group = d;
        this.disabled = f;
      }

      function f(a) {
        var b;
        if (!r && ya(a)) b = a;else {
          b = [];

          for (var c in a) {
            a.hasOwnProperty(c) && "$" !== c.charAt(0) && b.push(c);
          }
        }
        return b;
      }

      var p = a.match(yh);
      if (!p) throw xh("iexp", a, za(b));
      var n = p[5] || p[7],
          r = p[6];
      a = / as /.test(p[0]) && p[1];
      var q = p[9];
      b = d(p[2] ? p[1] : n);

      var t = a && d(a) || b,
          w = q && d(q),
          v = q ? function (a, b) {
        return w(c, b);
      } : function (a) {
        return La(a);
      },
          x = function x(a, b) {
        return v(a, A(a, b));
      },
          z = d(p[2] || p[1]),
          y = d(p[3] || ""),
          J = d(p[4] || ""),
          I = d(p[8]),
          B = {},
          A = r ? function (a, b) {
        B[r] = b;
        B[n] = a;
        return B;
      } : function (a) {
        B[n] = a;
        return B;
      };

      return {
        trackBy: q,
        getTrackByValue: x,
        getWatchables: d(I, function (a) {
          var b = [];
          a = a || [];

          for (var d = f(a), e = d.length, g = 0; g < e; g++) {
            var k = a === d ? g : d[g],
                l = a[k],
                k = A(l, k),
                l = v(l, k);
            b.push(l);
            if (p[2] || p[1]) l = z(c, k), b.push(l);
            p[4] && (k = J(c, k), b.push(k));
          }

          return b;
        }),
        getOptions: function getOptions() {
          for (var a = [], b = {}, d = I(c) || [], g = f(d), k = g.length, n = 0; n < k; n++) {
            var p = d === g ? n : g[n],
                r = A(d[p], p),
                s = t(c, r),
                p = v(s, r),
                w = z(c, r),
                B = y(c, r),
                r = J(c, r),
                s = new e(p, s, w, B, r);
            a.push(s);
            b[p] = s;
          }

          return {
            items: a,
            selectValueMap: b,
            getOptionFromViewValue: function getOptionFromViewValue(a) {
              return b[x(a)];
            },
            getViewValueFromOption: function getViewValueFromOption(a) {
              return q ? Ia(a.viewValue) : a.viewValue;
            }
          };
        }
      };
    }

    var e = C.document.createElement("option"),
        f = C.document.createElement("optgroup");
    return {
      restrict: "A",
      terminal: !0,
      require: ["select", "ngModel"],
      link: {
        pre: function pre(a, b, c, d) {
          d[0].registerOption = E;
        },
        post: function post(d, k, h, l) {
          function m(a) {
            var b = (a = v.getOptionFromViewValue(a)) && a.element;
            b && !b.selected && (b.selected = !0);
            return a;
          }

          function p(a, b) {
            a.element = b;
            b.disabled = a.disabled;
            a.label !== b.label && (b.label = a.label, b.textContent = a.label);
            b.value = a.selectValue;
          }

          var n = l[0],
              q = l[1],
              z = h.multiple;
          l = 0;

          for (var t = k.children(), B = t.length; l < B; l++) {
            if ("" === t[l].value) {
              n.hasEmptyOption = !0;
              n.emptyOption = t.eq(l);
              break;
            }
          }

          k.empty();
          l = !!n.emptyOption;
          x(e.cloneNode(!1)).val("?");
          var v,
              A = c(h.ngOptions, k, d),
              C = b[0].createDocumentFragment();

          n.generateUnknownOptionValue = function (a) {
            return "?";
          };

          z ? (n.writeValue = function (a) {
            if (v) {
              var b = a && a.map(m) || [];
              v.items.forEach(function (a) {
                a.element.selected && -1 === Array.prototype.indexOf.call(b, a) && (a.element.selected = !1);
              });
            }
          }, n.readValue = function () {
            var a = k.val() || [],
                b = [];
            r(a, function (a) {
              (a = v.selectValueMap[a]) && !a.disabled && b.push(v.getViewValueFromOption(a));
            });
            return b;
          }, A.trackBy && d.$watchCollection(function () {
            if (H(q.$viewValue)) return q.$viewValue.map(function (a) {
              return A.getTrackByValue(a);
            });
          }, function () {
            q.$render();
          })) : (n.writeValue = function (a) {
            if (v) {
              var b = k[0].options[k[0].selectedIndex],
                  c = v.getOptionFromViewValue(a);
              b && b.removeAttribute("selected");
              c ? (k[0].value !== c.selectValue && (n.removeUnknownOption(), k[0].value = c.selectValue, c.element.selected = !0), c.element.setAttribute("selected", "selected")) : n.selectUnknownOrEmptyOption(a);
            }
          }, n.readValue = function () {
            var a = v.selectValueMap[k.val()];
            return a && !a.disabled ? (n.unselectEmptyOption(), n.removeUnknownOption(), v.getViewValueFromOption(a)) : null;
          }, A.trackBy && d.$watch(function () {
            return A.getTrackByValue(q.$viewValue);
          }, function () {
            q.$render();
          }));
          l && (a(n.emptyOption)(d), k.prepend(n.emptyOption), 8 === n.emptyOption[0].nodeType ? (n.hasEmptyOption = !1, n.registerOption = function (a, b) {
            "" === b.val() && (n.hasEmptyOption = !0, n.emptyOption = b, n.emptyOption.removeClass("ng-scope"), q.$render(), b.on("$destroy", function () {
              var a = n.$isEmptyOptionSelected();
              n.hasEmptyOption = !1;
              n.emptyOption = void 0;
              a && q.$render();
            }));
          }) : n.emptyOption.removeClass("ng-scope"));
          d.$watchCollection(A.getWatchables, function () {
            var a = v && n.readValue();
            if (v) for (var b = v.items.length - 1; 0 <= b; b--) {
              var c = v.items[b];
              w(c.group) ? Fb(c.element.parentNode) : Fb(c.element);
            }
            v = A.getOptions();
            var d = {};
            v.items.forEach(function (a) {
              var b;

              if (w(a.group)) {
                b = d[a.group];
                b || (b = f.cloneNode(!1), C.appendChild(b), b.label = null === a.group ? "null" : a.group, d[a.group] = b);
                var c = e.cloneNode(!1);
                b.appendChild(c);
                p(a, c);
              } else b = e.cloneNode(!1), C.appendChild(b), p(a, b);
            });
            k[0].appendChild(C);
            q.$render();
            q.$isEmpty(a) || (b = n.readValue(), (A.trackBy || z ? va(a, b) : a === b) || (q.$setViewValue(b), q.$render()));
          });
        }
      }
    };
  }],
      ef = ["$locale", "$interpolate", "$log", function (a, b, d) {
    var c = /{}/g,
        e = /^when(Minus)?(.+)$/;
    return {
      link: function link(f, g, k) {
        function h(a) {
          g.text(a || "");
        }

        var l = k.count,
            m = k.$attr.when && g.attr(k.$attr.when),
            p = k.offset || 0,
            n = f.$eval(m) || {},
            q = {},
            w = b.startSymbol(),
            t = b.endSymbol(),
            x = w + l + "-" + p + t,
            v = ca.noop,
            A;
        r(k, function (a, b) {
          var c = e.exec(b);
          c && (c = (c[1] ? "-" : "") + K(c[2]), n[c] = g.attr(k.$attr[b]));
        });
        r(n, function (a, d) {
          q[d] = b(a.replace(c, x));
        });
        f.$watch(l, function (b) {
          var c = parseFloat(b),
              e = X(c);
          e || c in n || (c = a.pluralCat(c - p));
          c === A || e && X(A) || (v(), e = q[c], z(e) ? (null != b && d.debug("ngPluralize: no rule defined for '" + c + "' in " + m), v = E, h()) : v = f.$watch(e, h), A = c);
        });
      }
    };
  }],
      qe = F("ngRef"),
      ff = ["$parse", function (a) {
    return {
      priority: -1,
      restrict: "A",
      compile: function compile(b, d) {
        var c = wa(ua(b)),
            e = a(d.ngRef),
            f = e.assign || function () {
          throw qe("nonassign", d.ngRef);
        };

        return function (a, b, h) {
          var l;
          if (h.hasOwnProperty("ngRefRead")) {
            if ("$element" === h.ngRefRead) l = b;else {
              if (l = b.data("$" + h.ngRefRead + "Controller"), !l) throw qe("noctrl", h.ngRefRead, d.ngRef);
            }
          } else l = b.data("$" + c + "Controller");
          l = l || b;
          f(a, l);
          b.on("$destroy", function () {
            e(a) === l && f(a, null);
          });
        };
      }
    };
  }],
      gf = ["$parse", "$animate", "$compile", function (a, b, d) {
    var c = F("ngRepeat"),
        e = function e(a, b, c, d, _e2, f, g) {
      a[c] = d;
      _e2 && (a[_e2] = f);
      a.$index = b;
      a.$first = 0 === b;
      a.$last = b === g - 1;
      a.$middle = !(a.$first || a.$last);
      a.$odd = !(a.$even = 0 === (b & 1));
    },
        f = function f(a, b, c) {
      return La(c);
    },
        g = function g(a, b) {
      return b;
    };

    return {
      restrict: "A",
      multiElement: !0,
      transclude: "element",
      priority: 1E3,
      terminal: !0,
      $$tlb: !0,
      compile: function compile(k, h) {
        var l = h.ngRepeat,
            m = d.$$createComment("end ngRepeat", l),
            p = l.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);
        if (!p) throw c("iexp", l);
        var n = p[1],
            q = p[2],
            w = p[3],
            t = p[4],
            p = n.match(/^(?:(\s*[$\w]+)|\(\s*([$\w]+)\s*,\s*([$\w]+)\s*\))$/);
        if (!p) throw c("iidexp", n);
        var x = p[3] || p[1],
            v = p[2];
        if (w && (!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(w) || /^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test(w))) throw c("badident", w);
        var z;

        if (t) {
          var A = {
            $id: La
          },
              y = a(t);

          z = function z(a, b, c, d) {
            v && (A[v] = b);
            A[x] = c;
            A.$index = d;
            return y(a, A);
          };
        }

        return function (a, d, h, k, n) {
          var p = T();
          a.$watchCollection(q, function (h) {
            var k,
                q,
                t = d[0],
                s,
                y = T(),
                B,
                C,
                E,
                D,
                H,
                F,
                K;
            w && (a[w] = h);
            if (ya(h)) H = h, q = z || f;else for (K in q = z || g, H = [], h) {
              ta.call(h, K) && "$" !== K.charAt(0) && H.push(K);
            }
            B = H.length;
            K = Array(B);

            for (k = 0; k < B; k++) {
              if (C = h === H ? k : H[k], E = h[C], D = q(a, C, E, k), p[D]) F = p[D], delete p[D], y[D] = F, K[k] = F;else {
                if (y[D]) throw r(K, function (a) {
                  a && a.scope && (p[a.id] = a);
                }), c("dupes", l, D, E);
                K[k] = {
                  id: D,
                  scope: void 0,
                  clone: void 0
                };
                y[D] = !0;
              }
            }

            A && (A[x] = void 0);

            for (s in p) {
              F = p[s];
              D = tb(F.clone);
              b.leave(D);
              if (D[0].parentNode) for (k = 0, q = D.length; k < q; k++) {
                D[k].$$NG_REMOVED = !0;
              }
              F.scope.$destroy();
            }

            for (k = 0; k < B; k++) {
              if (C = h === H ? k : H[k], E = h[C], F = K[k], F.scope) {
                s = t;

                do {
                  s = s.nextSibling;
                } while (s && s.$$NG_REMOVED);

                F.clone[0] !== s && b.move(tb(F.clone), null, t);
                t = F.clone[F.clone.length - 1];
                e(F.scope, k, x, E, v, C, B);
              } else n(function (a, c) {
                F.scope = c;
                var d = m.cloneNode(!1);
                a[a.length++] = d;
                b.enter(a, null, t);
                t = d;
                F.clone = a;
                y[F.id] = F;
                e(F.scope, k, x, E, v, C, B);
              });
            }

            p = y;
          });
        };
      }
    };
  }],
      hf = ["$animate", function (a) {
    return {
      restrict: "A",
      multiElement: !0,
      link: function link(b, d, c) {
        b.$watch(c.ngShow, function (b) {
          a[b ? "removeClass" : "addClass"](d, "ng-hide", {
            tempClasses: "ng-hide-animate"
          });
        });
      }
    };
  }],
      $e = ["$animate", function (a) {
    return {
      restrict: "A",
      multiElement: !0,
      link: function link(b, d, c) {
        b.$watch(c.ngHide, function (b) {
          a[b ? "addClass" : "removeClass"](d, "ng-hide", {
            tempClasses: "ng-hide-animate"
          });
        });
      }
    };
  }],
      jf = Ra(function (a, b, d) {
    a.$watchCollection(d.ngStyle, function (a, d) {
      d && a !== d && (a || (a = {}), r(d, function (b, d) {
        null == a[d] && (a[d] = "");
      }));
      a && b.css(a);
    });
  }),
      kf = ["$animate", "$compile", function (a, b) {
    return {
      require: "ngSwitch",
      controller: ["$scope", function () {
        this.cases = {};
      }],
      link: function link(d, c, e, f) {
        var g = [],
            k = [],
            h = [],
            l = [],
            m = function m(a, b) {
          return function (c) {
            !1 !== c && a.splice(b, 1);
          };
        };

        d.$watch(e.ngSwitch || e.on, function (c) {
          for (var d, e; h.length;) {
            a.cancel(h.pop());
          }

          d = 0;

          for (e = l.length; d < e; ++d) {
            var q = tb(k[d].clone);
            l[d].$destroy();
            (h[d] = a.leave(q)).done(m(h, d));
          }

          k.length = 0;
          l.length = 0;
          (g = f.cases["!" + c] || f.cases["?"]) && r(g, function (c) {
            c.transclude(function (d, e) {
              l.push(e);
              var f = c.element;
              d[d.length++] = b.$$createComment("end ngSwitchWhen");
              k.push({
                clone: d
              });
              a.enter(d, f.parent(), f);
            });
          });
        });
      }
    };
  }],
      lf = Ra({
    transclude: "element",
    priority: 1200,
    require: "^ngSwitch",
    multiElement: !0,
    link: function link(a, b, d, c, e) {
      a = d.ngSwitchWhen.split(d.ngSwitchWhenSeparator).sort().filter(function (a, b, c) {
        return c[b - 1] !== a;
      });
      r(a, function (a) {
        c.cases["!" + a] = c.cases["!" + a] || [];
        c.cases["!" + a].push({
          transclude: e,
          element: b
        });
      });
    }
  }),
      mf = Ra({
    transclude: "element",
    priority: 1200,
    require: "^ngSwitch",
    multiElement: !0,
    link: function link(a, b, d, c, e) {
      c.cases["?"] = c.cases["?"] || [];
      c.cases["?"].push({
        transclude: e,
        element: b
      });
    }
  }),
      zh = F("ngTransclude"),
      of = ["$compile", function (a) {
    return {
      restrict: "EAC",
      compile: function compile(b) {
        var d = a(b.contents());
        b.empty();
        return function (a, b, f, g, k) {
          function h() {
            d(a, function (a) {
              b.append(a);
            });
          }

          if (!k) throw zh("orphan", za(b));
          f.ngTransclude === f.$attr.ngTransclude && (f.ngTransclude = "");
          f = f.ngTransclude || f.ngTranscludeSlot;
          k(function (a, c) {
            var d;
            if (d = a.length) a: {
              d = 0;

              for (var f = a.length; d < f; d++) {
                var g = a[d];

                if (g.nodeType !== Pa || g.nodeValue.trim()) {
                  d = !0;
                  break a;
                }
              }

              d = void 0;
            }
            d ? b.append(a) : (h(), c.$destroy());
          }, null, f);
          f && !k.isSlotFilled(f) && h();
        };
      }
    };
  }],
      Oe = ["$templateCache", function (a) {
    return {
      restrict: "E",
      terminal: !0,
      compile: function compile(b, d) {
        "text/ng-template" === d.type && a.put(d.id, b[0].text);
      }
    };
  }],
      Ah = {
    $setViewValue: E,
    $render: E
  },
      Bh = ["$element", "$scope", function (a, b) {
    function d() {
      g || (g = !0, b.$$postDigest(function () {
        g = !1;
        e.ngModelCtrl.$render();
      }));
    }

    function c(a) {
      k || (k = !0, b.$$postDigest(function () {
        b.$$destroyed || (k = !1, e.ngModelCtrl.$setViewValue(e.readValue()), a && e.ngModelCtrl.$render());
      }));
    }

    var e = this,
        f = new Hb();
    e.selectValueMap = {};
    e.ngModelCtrl = Ah;
    e.multiple = !1;
    e.unknownOption = x(C.document.createElement("option"));
    e.hasEmptyOption = !1;
    e.emptyOption = void 0;

    e.renderUnknownOption = function (b) {
      b = e.generateUnknownOptionValue(b);
      e.unknownOption.val(b);
      a.prepend(e.unknownOption);
      Oa(e.unknownOption, !0);
      a.val(b);
    };

    e.updateUnknownOption = function (b) {
      b = e.generateUnknownOptionValue(b);
      e.unknownOption.val(b);
      Oa(e.unknownOption, !0);
      a.val(b);
    };

    e.generateUnknownOptionValue = function (a) {
      return "? " + La(a) + " ?";
    };

    e.removeUnknownOption = function () {
      e.unknownOption.parent() && e.unknownOption.remove();
    };

    e.selectEmptyOption = function () {
      e.emptyOption && (a.val(""), Oa(e.emptyOption, !0));
    };

    e.unselectEmptyOption = function () {
      e.hasEmptyOption && Oa(e.emptyOption, !1);
    };

    b.$on("$destroy", function () {
      e.renderUnknownOption = E;
    });

    e.readValue = function () {
      var b = a.val(),
          b = b in e.selectValueMap ? e.selectValueMap[b] : b;
      return e.hasOption(b) ? b : null;
    };

    e.writeValue = function (b) {
      var c = a[0].options[a[0].selectedIndex];
      c && Oa(x(c), !1);
      e.hasOption(b) ? (e.removeUnknownOption(), c = La(b), a.val(c in e.selectValueMap ? c : b), Oa(x(a[0].options[a[0].selectedIndex]), !0)) : e.selectUnknownOrEmptyOption(b);
    };

    e.addOption = function (a, b) {
      if (8 !== b[0].nodeType) {
        Ja(a, '"option value"');
        "" === a && (e.hasEmptyOption = !0, e.emptyOption = b);
        var c = f.get(a) || 0;
        f.set(a, c + 1);
        d();
      }
    };

    e.removeOption = function (a) {
      var b = f.get(a);
      b && (1 === b ? (f["delete"](a), "" === a && (e.hasEmptyOption = !1, e.emptyOption = void 0)) : f.set(a, b - 1));
    };

    e.hasOption = function (a) {
      return !!f.get(a);
    };

    e.$hasEmptyOption = function () {
      return e.hasEmptyOption;
    };

    e.$isUnknownOptionSelected = function () {
      return a[0].options[0] === e.unknownOption[0];
    };

    e.$isEmptyOptionSelected = function () {
      return e.hasEmptyOption && a[0].options[a[0].selectedIndex] === e.emptyOption[0];
    };

    e.selectUnknownOrEmptyOption = function (a) {
      null == a && e.emptyOption ? (e.removeUnknownOption(), e.selectEmptyOption()) : e.unknownOption.parent().length ? e.updateUnknownOption(a) : e.renderUnknownOption(a);
    };

    var g = !1,
        k = !1;

    e.registerOption = function (a, b, f, g, k) {
      if (f.$attr.ngValue) {
        var q, r;
        f.$observe("value", function (a) {
          var d,
              f = b.prop("selected");
          w(r) && (e.removeOption(q), delete e.selectValueMap[r], d = !0);
          r = La(a);
          q = a;
          e.selectValueMap[r] = a;
          e.addOption(a, b);
          b.attr("value", r);
          d && f && c();
        });
      } else g ? f.$observe("value", function (a) {
        e.readValue();
        var d,
            f = b.prop("selected");
        w(q) && (e.removeOption(q), d = !0);
        q = a;
        e.addOption(a, b);
        d && f && c();
      }) : k ? a.$watch(k, function (a, d) {
        f.$set("value", a);
        var g = b.prop("selected");
        d !== a && e.removeOption(d);
        e.addOption(a, b);
        d && g && c();
      }) : e.addOption(f.value, b);

      f.$observe("disabled", function (a) {
        if ("true" === a || a && b.prop("selected")) e.multiple ? c(!0) : (e.ngModelCtrl.$setViewValue(null), e.ngModelCtrl.$render());
      });
      b.on("$destroy", function () {
        var a = e.readValue(),
            b = f.value;
        e.removeOption(b);
        d();
        (e.multiple && a && -1 !== a.indexOf(b) || a === b) && c(!0);
      });
    };
  }],
      Pe = function Pe() {
    return {
      restrict: "E",
      require: ["select", "?ngModel"],
      controller: Bh,
      priority: 1,
      link: {
        pre: function pre(a, b, d, c) {
          var e = c[0],
              f = c[1];

          if (f) {
            if (e.ngModelCtrl = f, b.on("change", function () {
              e.removeUnknownOption();
              a.$apply(function () {
                f.$setViewValue(e.readValue());
              });
            }), d.multiple) {
              e.multiple = !0;

              e.readValue = function () {
                var a = [];
                r(b.find("option"), function (b) {
                  b.selected && !b.disabled && (b = b.value, a.push(b in e.selectValueMap ? e.selectValueMap[b] : b));
                });
                return a;
              };

              e.writeValue = function (a) {
                r(b.find("option"), function (b) {
                  var c = !!a && (-1 !== Array.prototype.indexOf.call(a, b.value) || -1 !== Array.prototype.indexOf.call(a, e.selectValueMap[b.value]));
                  c !== b.selected && Oa(x(b), c);
                });
              };

              var g,
                  k = NaN;
              a.$watch(function () {
                k !== f.$viewValue || va(g, f.$viewValue) || (g = ja(f.$viewValue), f.$render());
                k = f.$viewValue;
              });

              f.$isEmpty = function (a) {
                return !a || 0 === a.length;
              };
            }
          } else e.registerOption = E;
        },
        post: function post(a, b, d, c) {
          var e = c[1];

          if (e) {
            var f = c[0];

            e.$render = function () {
              f.writeValue(e.$viewValue);
            };
          }
        }
      }
    };
  },
      Qe = ["$interpolate", function (a) {
    return {
      restrict: "E",
      priority: 100,
      compile: function compile(b, d) {
        var c, e;
        w(d.ngValue) || (w(d.value) ? c = a(d.value, !0) : (e = a(b.text(), !0)) || d.$set("value", b.text()));
        return function (a, b, d) {
          var h = b.parent();
          (h = h.data("$selectController") || h.parent().data("$selectController")) && h.registerOption(a, b, d, c, e);
        };
      }
    };
  }],
      $c = ["$parse", function (a) {
    return {
      restrict: "A",
      require: "?ngModel",
      link: function link(b, d, c, e) {
        if (e) {
          var f = c.hasOwnProperty("required") || a(c.ngRequired)(b);
          c.ngRequired || (c.required = !0);

          e.$validators.required = function (a, b) {
            return !f || !e.$isEmpty(b);
          };

          c.$observe("required", function (a) {
            f !== a && (f = a, e.$validate());
          });
        }
      }
    };
  }],
      Zc = ["$parse", function (a) {
    return {
      restrict: "A",
      require: "?ngModel",
      compile: function compile(b, d) {
        var c, e;
        d.ngPattern && (c = d.ngPattern, e = "/" === d.ngPattern.charAt(0) && ie.test(d.ngPattern) ? function () {
          return d.ngPattern;
        } : a(d.ngPattern));
        return function (a, b, d, h) {
          if (h) {
            var l = d.pattern;
            d.ngPattern ? l = e(a) : c = d.pattern;
            var m = he(l, c, b);
            d.$observe("pattern", function (a) {
              var d = m;
              m = he(a, c, b);
              (d && d.toString()) !== (m && m.toString()) && h.$validate();
            });

            h.$validators.pattern = function (a, b) {
              return h.$isEmpty(b) || z(m) || m.test(b);
            };
          }
        };
      }
    };
  }],
      bd = ["$parse", function (a) {
    return {
      restrict: "A",
      require: "?ngModel",
      link: function link(b, d, c, e) {
        if (e) {
          var f = c.maxlength || a(c.ngMaxlength)(b),
              g = Tb(f);
          c.$observe("maxlength", function (a) {
            f !== a && (g = Tb(a), f = a, e.$validate());
          });

          e.$validators.maxlength = function (a, b) {
            return 0 > g || e.$isEmpty(b) || b.length <= g;
          };
        }
      }
    };
  }],
      ad = ["$parse", function (a) {
    return {
      restrict: "A",
      require: "?ngModel",
      link: function link(b, d, c, e) {
        if (e) {
          var f = c.minlength || a(c.ngMinlength)(b),
              g = Tb(f) || -1;
          c.$observe("minlength", function (a) {
            f !== a && (g = Tb(a) || -1, f = a, e.$validate());
          });

          e.$validators.minlength = function (a, b) {
            return e.$isEmpty(b) || b.length >= g;
          };
        }
      }
    };
  }];

  C.angular.bootstrap ? C.console && console.log("WARNING: Tried to load AngularJS more than once.") : (Fe(), Je(ca), ca.module("ngLocale", [], ["$provide", function (a) {
    function b(a) {
      a += "";
      var b = a.indexOf(".");
      return -1 == b ? 0 : a.length - b - 1;
    }

    a.value("$locale", {
      DATETIME_FORMATS: {
        AMPMS: ["AM", "PM"],
        DAY: "Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),
        ERANAMES: ["Before Christ", "Anno Domini"],
        ERAS: ["BC", "AD"],
        FIRSTDAYOFWEEK: 6,
        MONTH: "January February March April May June July August September October November December".split(" "),
        SHORTDAY: "Sun Mon Tue Wed Thu Fri Sat".split(" "),
        SHORTMONTH: "Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec".split(" "),
        STANDALONEMONTH: "January February March April May June July August September October November December".split(" "),
        WEEKENDRANGE: [5, 6],
        fullDate: "EEEE, MMMM d, y",
        longDate: "MMMM d, y",
        medium: "MMM d, y h:mm:ss a",
        mediumDate: "MMM d, y",
        mediumTime: "h:mm:ss a",
        "short": "M/d/yy h:mm a",
        shortDate: "M/d/yy",
        shortTime: "h:mm a"
      },
      NUMBER_FORMATS: {
        CURRENCY_SYM: "$",
        DECIMAL_SEP: ".",
        GROUP_SEP: ",",
        PATTERNS: [{
          gSize: 3,
          lgSize: 3,
          maxFrac: 3,
          minFrac: 0,
          minInt: 1,
          negPre: "-",
          negSuf: "",
          posPre: "",
          posSuf: ""
        }, {
          gSize: 3,
          lgSize: 3,
          maxFrac: 2,
          minFrac: 2,
          minInt: 1,
          negPre: "-\xA4",
          negSuf: "",
          posPre: "\xA4",
          posSuf: ""
        }]
      },
      id: "en-us",
      localeID: "en_US",
      pluralCat: function pluralCat(a, c) {
        var e = a | 0,
            f = c;
        void 0 === f && (f = Math.min(b(a), 3));
        Math.pow(10, f);
        return 1 == e && 0 == f ? "one" : "other";
      }
    });
  }]), x(function () {
    Ae(C.document, Uc);
  }));
})(window);

!window.angular.$$csp().noInlineStyle && window.angular.element(document.head).prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>');
/*!
 * ui-select
 * http://github.com/angular-ui/ui-select
 * Version: 0.19.8 - 2017-04-18T05:43:43.673Z
 * License: MIT
 */

!function () {
  "use strict";

  function e(e) {
    return angular.isUndefined(e) || null === e;
  }

  var t = {
    TAB: 9,
    ENTER: 13,
    ESC: 27,
    SPACE: 32,
    LEFT: 37,
    UP: 38,
    RIGHT: 39,
    DOWN: 40,
    SHIFT: 16,
    CTRL: 17,
    ALT: 18,
    PAGE_UP: 33,
    PAGE_DOWN: 34,
    HOME: 36,
    END: 35,
    BACKSPACE: 8,
    DELETE: 46,
    COMMAND: 91,
    MAP: {
      91: "COMMAND",
      8: "BACKSPACE",
      9: "TAB",
      13: "ENTER",
      16: "SHIFT",
      17: "CTRL",
      18: "ALT",
      19: "PAUSEBREAK",
      20: "CAPSLOCK",
      27: "ESC",
      32: "SPACE",
      33: "PAGE_UP",
      34: "PAGE_DOWN",
      35: "END",
      36: "HOME",
      37: "LEFT",
      38: "UP",
      39: "RIGHT",
      40: "DOWN",
      43: "+",
      44: "PRINTSCREEN",
      45: "INSERT",
      46: "DELETE",
      48: "0",
      49: "1",
      50: "2",
      51: "3",
      52: "4",
      53: "5",
      54: "6",
      55: "7",
      56: "8",
      57: "9",
      59: ";",
      61: "=",
      65: "A",
      66: "B",
      67: "C",
      68: "D",
      69: "E",
      70: "F",
      71: "G",
      72: "H",
      73: "I",
      74: "J",
      75: "K",
      76: "L",
      77: "M",
      78: "N",
      79: "O",
      80: "P",
      81: "Q",
      82: "R",
      83: "S",
      84: "T",
      85: "U",
      86: "V",
      87: "W",
      88: "X",
      89: "Y",
      90: "Z",
      96: "0",
      97: "1",
      98: "2",
      99: "3",
      100: "4",
      101: "5",
      102: "6",
      103: "7",
      104: "8",
      105: "9",
      106: "*",
      107: "+",
      109: "-",
      110: ".",
      111: "/",
      112: "F1",
      113: "F2",
      114: "F3",
      115: "F4",
      116: "F5",
      117: "F6",
      118: "F7",
      119: "F8",
      120: "F9",
      121: "F10",
      122: "F11",
      123: "F12",
      144: "NUMLOCK",
      145: "SCROLLLOCK",
      186: ";",
      187: "=",
      188: ",",
      189: "-",
      190: ".",
      191: "/",
      192: "`",
      219: "[",
      220: "\\",
      221: "]",
      222: "'"
    },
    isControl: function isControl(e) {
      var s = e.which;

      switch (s) {
        case t.COMMAND:
        case t.SHIFT:
        case t.CTRL:
        case t.ALT:
          return !0;
      }

      return !!(e.metaKey || e.ctrlKey || e.altKey);
    },
    isFunctionKey: function isFunctionKey(e) {
      return e = e.which ? e.which : e, e >= 112 && e <= 123;
    },
    isVerticalMovement: function isVerticalMovement(e) {
      return ~[t.UP, t.DOWN].indexOf(e);
    },
    isHorizontalMovement: function isHorizontalMovement(e) {
      return ~[t.LEFT, t.RIGHT, t.BACKSPACE, t.DELETE].indexOf(e);
    },
    toSeparator: function toSeparator(e) {
      var s = {
        ENTER: "\n",
        TAB: "\t",
        SPACE: " "
      }[e];
      return s ? s : t[e] ? void 0 : e;
    }
  };
  void 0 === angular.element.prototype.querySelectorAll && (angular.element.prototype.querySelectorAll = function (e) {
    return angular.element(this[0].querySelectorAll(e));
  }), void 0 === angular.element.prototype.closest && (angular.element.prototype.closest = function (e) {
    for (var t = this[0], s = t.matches || t.webkitMatchesSelector || t.mozMatchesSelector || t.msMatchesSelector; t;) {
      if (s.bind(t)(e)) return t;
      t = t.parentElement;
    }

    return !1;
  });
  var s = 0,
      i = angular.module("ui.select", []).constant("uiSelectConfig", {
    theme: "bootstrap",
    searchEnabled: !0,
    sortable: !1,
    placeholder: "",
    refreshDelay: 1e3,
    closeOnSelect: !0,
    skipFocusser: !1,
    dropdownPosition: "auto",
    removeSelected: !0,
    resetSearchInput: !0,
    generateId: function generateId() {
      return s++;
    },
    appendToBody: !1,
    spinnerEnabled: !1,
    spinnerClass: "glyphicon glyphicon-refresh ui-select-spin",
    backspaceReset: !0
  }).service("uiSelectMinErr", function () {
    var e = angular.$$minErr("ui.select");
    return function () {
      var t = e.apply(this, arguments),
          s = t.message.replace(new RegExp("\nhttp://errors.angularjs.org/.*"), "");
      return new Error(s);
    };
  }).directive("uisTranscludeAppend", function () {
    return {
      link: function link(e, t, s, i, c) {
        c(e, function (e) {
          t.append(e);
        });
      }
    };
  }).filter("highlight", function () {
    function e(e) {
      return ("" + e).replace(/([.?*+^$[\]\\(){}|-])/g, "\\$1");
    }

    return function (t, s) {
      return s && t ? ("" + t).replace(new RegExp(e(s), "gi"), '<span class="ui-select-highlight">$&</span>') : t;
    };
  }).factory("uisOffset", ["$document", "$window", function (e, t) {
    return function (s) {
      var i = s[0].getBoundingClientRect();
      return {
        width: i.width || s.prop("offsetWidth"),
        height: i.height || s.prop("offsetHeight"),
        top: i.top + (t.pageYOffset || e[0].documentElement.scrollTop),
        left: i.left + (t.pageXOffset || e[0].documentElement.scrollLeft)
      };
    };
  }]);
  i.directive("uiSelectChoices", ["uiSelectConfig", "uisRepeatParser", "uiSelectMinErr", "$compile", "$window", function (e, t, s, i, c) {
    return {
      restrict: "EA",
      require: "^uiSelect",
      replace: !0,
      transclude: !0,
      templateUrl: function templateUrl(t) {
        t.addClass("ui-select-choices");
        var s = t.parent().attr("theme") || e.theme;
        return s + "/choices.tpl.html";
      },
      compile: function compile(i, n) {
        if (!n.repeat) throw s("repeat", "Expected 'repeat' expression.");
        var l = n.groupBy,
            a = n.groupFilter;

        if (l) {
          var r = i.querySelectorAll(".ui-select-choices-group");
          if (1 !== r.length) throw s("rows", "Expected 1 .ui-select-choices-group but got '{0}'.", r.length);
          r.attr("ng-repeat", t.getGroupNgRepeatExpression());
        }

        var o = t.parse(n.repeat),
            u = i.querySelectorAll(".ui-select-choices-row");
        if (1 !== u.length) throw s("rows", "Expected 1 .ui-select-choices-row but got '{0}'.", u.length);
        u.attr("ng-repeat", o.repeatExpression(l)).attr("ng-if", "$select.open");
        var d = i.querySelectorAll(".ui-select-choices-row-inner");
        if (1 !== d.length) throw s("rows", "Expected 1 .ui-select-choices-row-inner but got '{0}'.", d.length);
        d.attr("uis-transclude-append", "");
        var p = c.document.addEventListener ? u : d;
        return p.attr("ng-click", "$select.select(" + o.itemName + ",$select.skipFocusser,$event)"), function (t, s, c, n) {
          n.parseRepeatAttr(c.repeat, l, a), n.disableChoiceExpression = c.uiDisableChoice, n.onHighlightCallback = c.onHighlight, n.minimumInputLength = parseInt(c.minimumInputLength) || 0, n.dropdownPosition = c.position ? c.position.toLowerCase() : e.dropdownPosition, t.$watch("$select.search", function (e) {
            e && !n.open && n.multiple && n.activate(!1, !0), n.activeIndex = n.tagging.isActivated ? -1 : 0, !c.minimumInputLength || n.search.length >= c.minimumInputLength ? n.refresh(c.refresh) : n.items = [];
          }), c.$observe("refreshDelay", function () {
            var s = t.$eval(c.refreshDelay);
            n.refreshDelay = void 0 !== s ? s : e.refreshDelay;
          }), t.$watch("$select.open", function (e) {
            e ? (i.attr("role", "listbox"), n.refresh(c.refresh)) : s.removeAttr("role");
          });
        };
      }
    };
  }]), i.controller("uiSelectCtrl", ["$scope", "$element", "$timeout", "$filter", "$$uisDebounce", "uisRepeatParser", "uiSelectMinErr", "uiSelectConfig", "$parse", "$injector", "$window", function (s, i, c, n, l, a, r, o, u, d, p) {
    function h(e, t, s) {
      if (e.findIndex) return e.findIndex(t, s);

      for (var i, c = Object(e), n = c.length >>> 0, l = 0; l < n; l++) {
        if (i = c[l], t.call(s, i, l, c)) return l;
      }

      return -1;
    }

    function g() {
      y.resetSearchInput && (y.search = x, y.selected && y.items.length && !y.multiple && (y.activeIndex = h(y.items, function (e) {
        return angular.equals(this, e);
      }, y.selected)));
    }

    function f(e, t) {
      var s,
          i,
          c = [];

      for (s = 0; s < t.length; s++) {
        for (i = 0; i < e.length; i++) {
          e[i].name == [t[s]] && c.push(e[i]);
        }
      }

      return c;
    }

    function v(e, t) {
      var s = I.indexOf(e);
      t && s === -1 && I.push(e), !t && s > -1 && I.splice(s, 1);
    }

    function m(e) {
      return I.indexOf(e) > -1;
    }

    function $(e) {
      function t(e, t) {
        var s = i.indexOf(e);
        t && s === -1 && i.push(e), !t && s > -1 && i.splice(s, 1);
      }

      function s(e) {
        return i.indexOf(e) > -1;
      }

      if (e) {
        var i = [];

        y.isLocked = function (e, i) {
          var c = !1,
              n = y.selected[i];
          return n && (e ? (c = !!e.$eval(y.lockChoiceExpression), t(n, c)) : c = s(n)), c;
        };
      }
    }

    function b(e) {
      var s = !0;

      switch (e) {
        case t.DOWN:
          if (!y.open && y.multiple) y.activate(!1, !0);else if (y.activeIndex < y.items.length - 1) for (var i = ++y.activeIndex; m(y.items[i]) && i < y.items.length;) {
            y.activeIndex = ++i;
          }
          break;

        case t.UP:
          var c = 0 === y.search.length && y.tagging.isActivated ? -1 : 0;
          if (!y.open && y.multiple) y.activate(!1, !0);else if (y.activeIndex > c) for (var n = --y.activeIndex; m(y.items[n]) && n > c;) {
            y.activeIndex = --n;
          }
          break;

        case t.TAB:
          y.multiple && !y.open || y.select(y.items[y.activeIndex], !0);
          break;

        case t.ENTER:
          y.open && (y.tagging.isActivated || y.activeIndex >= 0) ? y.select(y.items[y.activeIndex], y.skipFocusser) : y.activate(!1, !0);
          break;

        case t.ESC:
          y.close();
          break;

        default:
          s = !1;
      }

      return s;
    }

    function w() {
      var e = i.querySelectorAll(".ui-select-choices-content"),
          t = e.querySelectorAll(".ui-select-choices-row");
      if (t.length < 1) throw r("choices", "Expected multiple .ui-select-choices-row but got '{0}'.", t.length);

      if (!(y.activeIndex < 0)) {
        var s = t[y.activeIndex],
            c = s.offsetTop + s.clientHeight - e[0].scrollTop,
            n = e[0].offsetHeight;
        c > n ? e[0].scrollTop += c - n : c < s.clientHeight && (y.isGrouped && 0 === y.activeIndex ? e[0].scrollTop = 0 : e[0].scrollTop -= s.clientHeight - c);
      }
    }

    var y = this,
        x = "";
    if (y.placeholder = o.placeholder, y.searchEnabled = o.searchEnabled, y.sortable = o.sortable, y.refreshDelay = o.refreshDelay, y.paste = o.paste, y.resetSearchInput = o.resetSearchInput, y.refreshing = !1, y.spinnerEnabled = o.spinnerEnabled, y.spinnerClass = o.spinnerClass, y.removeSelected = o.removeSelected, y.closeOnSelect = !0, y.skipFocusser = !1, y.search = x, y.activeIndex = 0, y.items = [], y.open = !1, y.focus = !1, y.disabled = !1, y.selected = void 0, y.dropdownPosition = "auto", y.focusser = void 0, y.multiple = void 0, y.disableChoiceExpression = void 0, y.tagging = {
      isActivated: !1,
      fct: void 0
    }, y.taggingTokens = {
      isActivated: !1,
      tokens: void 0
    }, y.lockChoiceExpression = void 0, y.clickTriggeredSelect = !1, y.$filter = n, y.$element = i, y.$animate = function () {
      try {
        return d.get("$animate");
      } catch (e) {
        return null;
      }
    }(), y.searchInput = i.querySelectorAll("input.ui-select-search"), 1 !== y.searchInput.length) throw r("searchInput", "Expected 1 input.ui-select-search but got '{0}'.", y.searchInput.length);
    y.isEmpty = function () {
      return e(y.selected) || "" === y.selected || y.multiple && 0 === y.selected.length;
    }, y.activate = function (e, t) {
      if (y.disabled || y.open) y.open && !y.searchEnabled && y.close();else {
        t || g(), s.$broadcast("uis:activate"), y.open = !0, y.activeIndex = y.activeIndex >= y.items.length ? 0 : y.activeIndex, y.activeIndex === -1 && y.taggingLabel !== !1 && (y.activeIndex = 0);
        var n = i.querySelectorAll(".ui-select-choices-content"),
            l = i.querySelectorAll(".ui-select-search");

        if (y.$animate && y.$animate.on && y.$animate.enabled(n[0])) {
          var a = function a(t, s) {
            "start" === s && 0 === y.items.length ? (y.$animate.off("removeClass", l[0], a), c(function () {
              y.focusSearchInput(e);
            })) : "close" === s && (y.$animate.off("enter", n[0], a), c(function () {
              y.focusSearchInput(e);
            }));
          };

          y.items.length > 0 ? y.$animate.on("enter", n[0], a) : y.$animate.on("removeClass", l[0], a);
        } else c(function () {
          y.focusSearchInput(e), !y.tagging.isActivated && y.items.length > 1 && w();
        });
      }
    }, y.focusSearchInput = function (e) {
      y.search = e || y.search, y.searchInput[0].focus();
    }, y.findGroupByName = function (e) {
      return y.groups && y.groups.filter(function (t) {
        return t.name === e;
      })[0];
    }, y.parseRepeatAttr = function (e, t, i) {
      function c(e) {
        var c = s.$eval(t);

        if (y.groups = [], angular.forEach(e, function (e) {
          var t = angular.isFunction(c) ? c(e) : e[c],
              s = y.findGroupByName(t);
          s ? s.items.push(e) : y.groups.push({
            name: t,
            items: [e]
          });
        }), i) {
          var n = s.$eval(i);
          angular.isFunction(n) ? y.groups = n(y.groups) : angular.isArray(n) && (y.groups = f(y.groups, n));
        }

        y.items = [], y.groups.forEach(function (e) {
          y.items = y.items.concat(e.items);
        });
      }

      function n(e) {
        y.items = e || [];
      }

      y.setItemsFn = t ? c : n, y.parserResult = a.parse(e), y.isGrouped = !!t, y.itemProperty = y.parserResult.itemName;

      var l = y.parserResult.source,
          o = function o() {
        var e = l(s);
        s.$uisSource = Object.keys(e).map(function (t) {
          var s = {};
          return s[y.parserResult.keyName] = t, s.value = e[t], s;
        });
      };

      y.parserResult.keyName && (o(), y.parserResult.source = u("$uisSource" + y.parserResult.filters), s.$watch(l, function (e, t) {
        e !== t && o();
      }, !0)), y.refreshItems = function (e) {
        e = e || y.parserResult.source(s);
        var t = y.selected;
        if (y.isEmpty() || angular.isArray(t) && !t.length || !y.multiple || !y.removeSelected) y.setItemsFn(e);else if (void 0 !== e && null !== e) {
          var i = e.filter(function (e) {
            return angular.isArray(t) ? t.every(function (t) {
              return !angular.equals(e, t);
            }) : !angular.equals(e, t);
          });
          y.setItemsFn(i);
        }
        "auto" !== y.dropdownPosition && "up" !== y.dropdownPosition || s.calculateDropdownPos(), s.$broadcast("uis:refresh");
      }, s.$watchCollection(y.parserResult.source, function (e) {
        if (void 0 === e || null === e) y.items = [];else {
          if (!angular.isArray(e)) throw r("items", "Expected an array but got '{0}'.", e);
          y.refreshItems(e), angular.isDefined(y.ngModel.$modelValue) && (y.ngModel.$modelValue = null);
        }
      });
    };
    var E;
    y.refresh = function (e) {
      void 0 !== e && (E && c.cancel(E), E = c(function () {
        if (s.$select.search.length >= s.$select.minimumInputLength) {
          var t = s.$eval(e);
          t && angular.isFunction(t.then) && !y.refreshing && (y.refreshing = !0, t["finally"](function () {
            y.refreshing = !1;
          }));
        }
      }, y.refreshDelay));
    }, y.isActive = function (e) {
      if (!y.open) return !1;
      var t = y.items.indexOf(e[y.itemProperty]),
          s = t == y.activeIndex;
      return !(!s || t < 0) && (s && !angular.isUndefined(y.onHighlightCallback) && e.$eval(y.onHighlightCallback), s);
    };

    var S = function S(e) {
      return y.selected && angular.isArray(y.selected) && y.selected.filter(function (t) {
        return angular.equals(t, e);
      }).length > 0;
    },
        I = [];

    y.isDisabled = function (e) {
      if (y.open) {
        var t = e[y.itemProperty],
            s = y.items.indexOf(t),
            i = !1;

        if (s >= 0 && (angular.isDefined(y.disableChoiceExpression) || y.multiple)) {
          if (t.isTag) return !1;
          y.multiple && (i = S(t)), !i && angular.isDefined(y.disableChoiceExpression) && (i = !!e.$eval(y.disableChoiceExpression)), v(t, i);
        }

        return i;
      }
    }, y.select = function (t, i, c) {
      if (e(t) || !m(t)) {
        if (!y.items && !y.search && !y.tagging.isActivated) return;

        if (!t || !m(t)) {
          if (y.clickTriggeredSelect = !1, c && ("click" === c.type || "touchend" === c.type) && t && (y.clickTriggeredSelect = !0), y.tagging.isActivated && y.clickTriggeredSelect === !1) {
            if (y.taggingLabel === !1) {
              if (y.activeIndex < 0) {
                if (void 0 === t && (t = void 0 !== y.tagging.fct ? y.tagging.fct(y.search) : y.search), !t || angular.equals(y.items[0], t)) return;
              } else t = y.items[y.activeIndex];
            } else if (0 === y.activeIndex) {
              if (void 0 === t) return;

              if (void 0 !== y.tagging.fct && "string" == typeof t) {
                if (t = y.tagging.fct(t), !t) return;
              } else "string" == typeof t && (t = t.replace(y.taggingLabel, "").trim());
            }
            if (S(t)) return void y.close(i);
          }

          g(), s.$broadcast("uis:select", t), y.closeOnSelect && y.close(i);
        }
      }
    }, y.close = function (e) {
      y.open && (y.ngModel && y.ngModel.$setTouched && y.ngModel.$setTouched(), y.open = !1, g(), s.$broadcast("uis:close", e));
    }, y.setFocus = function () {
      y.focus || y.focusInput[0].focus();
    }, y.clear = function (e) {
      y.select(null), e.stopPropagation(), c(function () {
        y.focusser[0].focus();
      }, 0, !1);
    }, y.toggle = function (e) {
      y.open ? (y.close(), e.preventDefault(), e.stopPropagation()) : y.activate();
    }, y.isLocked = function () {
      return !1;
    }, s.$watch(function () {
      return angular.isDefined(y.lockChoiceExpression) && "" !== y.lockChoiceExpression;
    }, $);
    var C = null,
        k = !1;
    y.sizeSearchInput = function () {
      var e = y.searchInput[0],
          t = y.$element[0],
          i = function i() {
        return t.clientWidth * !!e.offsetParent;
      },
          n = function n(t) {
        if (0 === t) return !1;
        var s = t - e.offsetLeft;
        return s < 50 && (s = t), y.searchInput.css("width", s + "px"), !0;
      };

      y.searchInput.css("width", "10px"), c(function () {
        null !== C || n(i()) || (C = s.$watch(function () {
          k || (k = !0, s.$$postDigest(function () {
            k = !1, n(i()) && (C(), C = null);
          }));
        }, angular.noop));
      });
    }, y.searchInput.on("keydown", function (e) {
      var i = e.which;
      ~[t.ENTER, t.ESC].indexOf(i) && (e.preventDefault(), e.stopPropagation()), s.$apply(function () {
        var s = !1;

        if ((y.items.length > 0 || y.tagging.isActivated) && (b(i) || y.searchEnabled || (e.preventDefault(), e.stopPropagation()), y.taggingTokens.isActivated)) {
          for (var n = 0; n < y.taggingTokens.tokens.length; n++) {
            y.taggingTokens.tokens[n] === t.MAP[e.keyCode] && y.search.length > 0 && (s = !0);
          }

          s && c(function () {
            y.searchInput.triggerHandler("tagged");
            var s = y.search.replace(t.MAP[e.keyCode], "").trim();
            y.tagging.fct && (s = y.tagging.fct(s)), s && y.select(s, !0);
          });
        }
      }), t.isVerticalMovement(i) && y.items.length > 0 && w(), i !== t.ENTER && i !== t.ESC || (e.preventDefault(), e.stopPropagation());
    }), y.searchInput.on("paste", function (e) {
      var s;
      if (s = window.clipboardData && window.clipboardData.getData ? window.clipboardData.getData("Text") : (e.originalEvent || e).clipboardData.getData("text/plain"), s = y.search + s, s && s.length > 0) if (y.taggingTokens.isActivated) {
        for (var i = [], c = 0; c < y.taggingTokens.tokens.length; c++) {
          var n = t.toSeparator(y.taggingTokens.tokens[c]) || y.taggingTokens.tokens[c];

          if (s.indexOf(n) > -1) {
            i = s.split(n);
            break;
          }
        }

        0 === i.length && (i = [s]);
        var l = y.search;
        angular.forEach(i, function (e) {
          var t = y.tagging.fct ? y.tagging.fct(e) : e;
          t && y.select(t, !0);
        }), y.search = l || x, e.preventDefault(), e.stopPropagation();
      } else y.paste && (y.paste(s), y.search = x, e.preventDefault(), e.stopPropagation());
    }), y.searchInput.on("tagged", function () {
      c(function () {
        g();
      });
    });
    var A = l(function () {
      y.sizeSearchInput();
    }, 50);
    angular.element(p).bind("resize", A), s.$on("$destroy", function () {
      y.searchInput.off("keyup keydown tagged blur paste"), angular.element(p).off("resize", A);
    }), s.$watch("$select.activeIndex", function (e) {
      e && i.find("input").attr("aria-activedescendant", "ui-select-choices-row-" + y.generatedId + "-" + e);
    }), s.$watch("$select.open", function (e) {
      e || i.find("input").removeAttr("aria-activedescendant");
    });
  }]), i.directive("uiSelect", ["$document", "uiSelectConfig", "uiSelectMinErr", "uisOffset", "$compile", "$parse", "$timeout", function (e, t, s, i, c, n, l) {
    return {
      restrict: "EA",
      templateUrl: function templateUrl(e, s) {
        var i = s.theme || t.theme;
        return i + (angular.isDefined(s.multiple) ? "/select-multiple.tpl.html" : "/select.tpl.html");
      },
      replace: !0,
      transclude: !0,
      require: ["uiSelect", "^ngModel"],
      scope: !0,
      controller: "uiSelectCtrl",
      controllerAs: "$select",
      compile: function compile(c, a) {
        var r = /{(.*)}\s*{(.*)}/.exec(a.ngClass);

        if (r) {
          var o = "{" + r[1] + ", " + r[2] + "}";
          a.ngClass = o, c.attr("ng-class", o);
        }

        return angular.isDefined(a.multiple) ? c.append("<ui-select-multiple/>").removeAttr("multiple") : c.append("<ui-select-single/>"), a.inputId && (c.querySelectorAll("input.ui-select-search")[0].id = a.inputId), function (c, a, r, o, u) {
          function d(e) {
            if (g.open) {
              var t = !1;

              if (t = window.jQuery ? window.jQuery.contains(a[0], e.target) : a[0].contains(e.target), !t && !g.clickTriggeredSelect) {
                var s;
                if (g.skipFocusser) s = !0;else {
                  var i = ["input", "button", "textarea", "select"],
                      n = angular.element(e.target).controller("uiSelect");
                  s = n && n !== g, s || (s = ~i.indexOf(e.target.tagName.toLowerCase()));
                }
                g.close(s), c.$digest();
              }

              g.clickTriggeredSelect = !1;
            }
          }

          function p() {
            var t = i(a);
            m = angular.element('<div class="ui-select-placeholder"></div>'), m[0].style.width = t.width + "px", m[0].style.height = t.height + "px", a.after(m), $ = a[0].style.width, e.find("body").append(a), a[0].style.position = "absolute", a[0].style.left = t.left + "px", a[0].style.top = t.top + "px", a[0].style.width = t.width + "px";
          }

          function h() {
            null !== m && (m.replaceWith(a), m = null, a[0].style.position = "", a[0].style.left = "", a[0].style.top = "", a[0].style.width = $, g.setFocus());
          }

          var g = o[0],
              f = o[1];
          g.generatedId = t.generateId(), g.baseTitle = r.title || "Select box", g.focusserTitle = g.baseTitle + " focus", g.focusserId = "focusser-" + g.generatedId, g.closeOnSelect = function () {
            return angular.isDefined(r.closeOnSelect) ? n(r.closeOnSelect)() : t.closeOnSelect;
          }(), c.$watch("skipFocusser", function () {
            var e = c.$eval(r.skipFocusser);
            g.skipFocusser = void 0 !== e ? e : t.skipFocusser;
          }), g.onSelectCallback = n(r.onSelect), g.onRemoveCallback = n(r.onRemove), g.ngModel = f, g.choiceGrouped = function (e) {
            return g.isGrouped && e && e.name;
          }, r.tabindex && r.$observe("tabindex", function (e) {
            g.focusInput.attr("tabindex", e), a.removeAttr("tabindex");
          }), c.$watch(function () {
            return c.$eval(r.searchEnabled);
          }, function (e) {
            g.searchEnabled = void 0 !== e ? e : t.searchEnabled;
          }), c.$watch("sortable", function () {
            var e = c.$eval(r.sortable);
            g.sortable = void 0 !== e ? e : t.sortable;
          }), r.$observe("backspaceReset", function () {
            var e = c.$eval(r.backspaceReset);
            g.backspaceReset = void 0 === e || e;
          }), r.$observe("limit", function () {
            g.limit = angular.isDefined(r.limit) ? parseInt(r.limit, 10) : void 0;
          }), c.$watch("removeSelected", function () {
            var e = c.$eval(r.removeSelected);
            g.removeSelected = void 0 !== e ? e : t.removeSelected;
          }), r.$observe("disabled", function () {
            g.disabled = void 0 !== r.disabled && r.disabled;
          }), r.$observe("resetSearchInput", function () {
            var e = c.$eval(r.resetSearchInput);
            g.resetSearchInput = void 0 === e || e;
          }), r.$observe("paste", function () {
            g.paste = c.$eval(r.paste);
          }), r.$observe("tagging", function () {
            if (void 0 !== r.tagging) {
              var e = c.$eval(r.tagging);
              g.tagging = {
                isActivated: !0,
                fct: e !== !0 ? e : void 0
              };
            } else g.tagging = {
              isActivated: !1,
              fct: void 0
            };
          }), r.$observe("taggingLabel", function () {
            void 0 !== r.tagging && ("false" === r.taggingLabel ? g.taggingLabel = !1 : g.taggingLabel = void 0 !== r.taggingLabel ? r.taggingLabel : "(new)");
          }), r.$observe("taggingTokens", function () {
            if (void 0 !== r.tagging) {
              var e = void 0 !== r.taggingTokens ? r.taggingTokens.split("|") : [",", "ENTER"];
              g.taggingTokens = {
                isActivated: !0,
                tokens: e
              };
            }
          }), r.$observe("spinnerEnabled", function () {
            var e = c.$eval(r.spinnerEnabled);
            g.spinnerEnabled = void 0 !== e ? e : t.spinnerEnabled;
          }), r.$observe("spinnerClass", function () {
            var e = r.spinnerClass;
            g.spinnerClass = void 0 !== e ? r.spinnerClass : t.spinnerClass;
          }), angular.isDefined(r.autofocus) && l(function () {
            g.setFocus();
          }), angular.isDefined(r.focusOn) && c.$on(r.focusOn, function () {
            l(function () {
              g.setFocus();
            });
          }), e.on("click", d), c.$on("$destroy", function () {
            e.off("click", d);
          }), u(c, function (e) {
            var t = angular.element("<div>").append(e),
                i = t.querySelectorAll(".ui-select-match");
            if (i.removeAttr("ui-select-match"), i.removeAttr("data-ui-select-match"), 1 !== i.length) throw s("transcluded", "Expected 1 .ui-select-match but got '{0}'.", i.length);
            a.querySelectorAll(".ui-select-match").replaceWith(i);
            var c = t.querySelectorAll(".ui-select-choices");
            if (c.removeAttr("ui-select-choices"), c.removeAttr("data-ui-select-choices"), 1 !== c.length) throw s("transcluded", "Expected 1 .ui-select-choices but got '{0}'.", c.length);
            a.querySelectorAll(".ui-select-choices").replaceWith(c);
            var n = t.querySelectorAll(".ui-select-no-choice");
            n.removeAttr("ui-select-no-choice"), n.removeAttr("data-ui-select-no-choice"), 1 == n.length && a.querySelectorAll(".ui-select-no-choice").replaceWith(n);
          });
          var v = c.$eval(r.appendToBody);
          (void 0 !== v ? v : t.appendToBody) && (c.$watch("$select.open", function (e) {
            e ? p() : h();
          }), c.$on("$destroy", function () {
            h();
          }));
          var m = null,
              $ = "",
              b = null,
              w = "direction-up";
          c.$watch("$select.open", function () {
            "auto" !== g.dropdownPosition && "up" !== g.dropdownPosition || c.calculateDropdownPos();
          });

          var y = function y(e, t) {
            e = e || i(a), t = t || i(b), b[0].style.position = "absolute", b[0].style.top = t.height * -1 + "px", a.addClass(w);
          },
              x = function x(e, t) {
            a.removeClass(w), e = e || i(a), t = t || i(b), b[0].style.position = "", b[0].style.top = "";
          },
              E = function E() {
            l(function () {
              if ("up" === g.dropdownPosition) y();else {
                a.removeClass(w);
                var t = i(a),
                    s = i(b),
                    c = e[0].documentElement.scrollTop || e[0].body.scrollTop;
                t.top + t.height + s.height > c + e[0].documentElement.clientHeight ? y(t, s) : x(t, s);
              }
              b[0].style.opacity = 1;
            });
          },
              S = !1;

          c.calculateDropdownPos = function () {
            if (g.open) {
              if (b = angular.element(a).querySelectorAll(".ui-select-dropdown"), 0 === b.length) return;

              if ("" !== g.search || S || (b[0].style.opacity = 0, S = !0), !i(b).height && g.$animate && g.$animate.on && g.$animate.enabled(b)) {
                var e = !0;
                g.$animate.on("enter", b, function (t, s) {
                  "close" === s && e && (E(), e = !1);
                });
              } else E();
            } else {
              if (null === b || 0 === b.length) return;
              b[0].style.opacity = 0, b[0].style.position = "", b[0].style.top = "", a.removeClass(w);
            }
          };
        };
      }
    };
  }]), i.directive("uiSelectMatch", ["uiSelectConfig", function (e) {
    function t(e, t) {
      return e[0].hasAttribute(t) ? e.attr(t) : e[0].hasAttribute("data-" + t) ? e.attr("data-" + t) : e[0].hasAttribute("x-" + t) ? e.attr("x-" + t) : void 0;
    }

    return {
      restrict: "EA",
      require: "^uiSelect",
      replace: !0,
      transclude: !0,
      templateUrl: function templateUrl(s) {
        s.addClass("ui-select-match");
        var i = s.parent(),
            c = t(i, "theme") || e.theme,
            n = angular.isDefined(t(i, "multiple"));
        return c + (n ? "/match-multiple.tpl.html" : "/match.tpl.html");
      },
      link: function link(t, s, i, c) {
        function n(e) {
          c.allowClear = !!angular.isDefined(e) && ("" === e || "true" === e.toLowerCase());
        }

        c.lockChoiceExpression = i.uiLockChoice, i.$observe("placeholder", function (t) {
          c.placeholder = void 0 !== t ? t : e.placeholder;
        }), i.$observe("allowClear", n), n(i.allowClear), c.multiple && c.sizeSearchInput();
      }
    };
  }]), i.directive("uiSelectMultiple", ["uiSelectMinErr", "$timeout", function (s, i) {
    return {
      restrict: "EA",
      require: ["^uiSelect", "^ngModel"],
      controller: ["$scope", "$timeout", function (e, t) {
        var s,
            i = this,
            c = e.$select;
        angular.isUndefined(c.selected) && (c.selected = []), e.$evalAsync(function () {
          s = e.ngModel;
        }), i.activeMatchIndex = -1, i.updateModel = function () {
          s.$setViewValue(Date.now()), i.refreshComponent();
        }, i.refreshComponent = function () {
          c.refreshItems && c.refreshItems(), c.sizeSearchInput && c.sizeSearchInput();
        }, i.removeChoice = function (s) {
          if (c.isLocked(null, s)) return !1;
          var n = c.selected[s],
              l = {};
          return l[c.parserResult.itemName] = n, c.selected.splice(s, 1), i.activeMatchIndex = -1, c.sizeSearchInput(), t(function () {
            c.onRemoveCallback(e, {
              $item: n,
              $model: c.parserResult.modelMapper(e, l)
            });
          }), i.updateModel(), !0;
        }, i.getPlaceholder = function () {
          if (!c.selected || !c.selected.length) return c.placeholder;
        };
      }],
      controllerAs: "$selectMultiple",
      link: function link(c, n, l, a) {
        function r(e) {
          return angular.isNumber(e.selectionStart) ? e.selectionStart : e.value.length;
        }

        function o(e) {
          function s() {
            switch (e) {
              case t.LEFT:
                return ~g.activeMatchIndex ? u : l;

              case t.RIGHT:
                return ~g.activeMatchIndex && a !== l ? o : (p.activate(), !1);

              case t.BACKSPACE:
                return ~g.activeMatchIndex ? g.removeChoice(a) ? u : a : l;

              case t.DELETE:
                return !!~g.activeMatchIndex && (g.removeChoice(g.activeMatchIndex), a);
            }
          }

          var i = r(p.searchInput[0]),
              c = p.selected.length,
              n = 0,
              l = c - 1,
              a = g.activeMatchIndex,
              o = g.activeMatchIndex + 1,
              u = g.activeMatchIndex - 1,
              d = a;
          return !(i > 0 || p.search.length && e == t.RIGHT) && (p.close(), d = s(), p.selected.length && d !== !1 ? g.activeMatchIndex = Math.min(l, Math.max(n, d)) : g.activeMatchIndex = -1, !0);
        }

        function u(e) {
          if (void 0 === e || void 0 === p.search) return !1;
          var t = e.filter(function (e) {
            return void 0 !== p.search.toUpperCase() && void 0 !== e && e.toUpperCase() === p.search.toUpperCase();
          }).length > 0;
          return t;
        }

        function d(e, t) {
          var s = -1;
          if (angular.isArray(e)) for (var i = angular.copy(e), c = 0; c < i.length; c++) {
            if (void 0 === p.tagging.fct) i[c] + " " + p.taggingLabel === t && (s = c);else {
              var n = i[c];
              angular.isObject(n) && (n.isTag = !0), angular.equals(n, t) && (s = c);
            }
          }
          return s;
        }

        var p = a[0],
            h = c.ngModel = a[1],
            g = c.$selectMultiple;
        p.multiple = !0, p.focusInput = p.searchInput, h.$isEmpty = function (e) {
          return !e || 0 === e.length;
        }, h.$parsers.unshift(function () {
          for (var e, t = {}, s = [], i = p.selected.length - 1; i >= 0; i--) {
            t = {}, t[p.parserResult.itemName] = p.selected[i], e = p.parserResult.modelMapper(c, t), s.unshift(e);
          }

          return s;
        }), h.$formatters.unshift(function (e) {
          var t,
              s = p.parserResult && p.parserResult.source(c, {
            $select: {
              search: ""
            }
          }),
              i = {};
          if (!s) return e;

          var n = [],
              l = function l(e, s) {
            if (e && e.length) {
              for (var l = e.length - 1; l >= 0; l--) {
                if (i[p.parserResult.itemName] = e[l], t = p.parserResult.modelMapper(c, i), p.parserResult.trackByExp) {
                  var a = /(\w*)\./.exec(p.parserResult.trackByExp),
                      r = /\.([^\s]+)/.exec(p.parserResult.trackByExp);
                  if (a && a.length > 0 && a[1] == p.parserResult.itemName && r && r.length > 0 && t[r[1]] == s[r[1]]) return n.unshift(e[l]), !0;
                }

                if (angular.equals(t, s)) return n.unshift(e[l]), !0;
              }

              return !1;
            }
          };

          if (!e) return n;

          for (var a = e.length - 1; a >= 0; a--) {
            l(p.selected, e[a]) || l(s, e[a]) || n.unshift(e[a]);
          }

          return n;
        }), c.$watchCollection(function () {
          return h.$modelValue;
        }, function (e, t) {
          t != e && (angular.isDefined(h.$modelValue) && (h.$modelValue = null), g.refreshComponent());
        }), h.$render = function () {
          if (!angular.isArray(h.$viewValue)) {
            if (!e(h.$viewValue)) throw s("multiarr", "Expected model value to be array but got '{0}'", h.$viewValue);
            h.$viewValue = [];
          }

          p.selected = h.$viewValue, g.refreshComponent(), c.$evalAsync();
        }, c.$on("uis:select", function (e, t) {
          if (!(p.selected.length >= p.limit)) {
            p.selected.push(t);
            var s = {};
            s[p.parserResult.itemName] = t, i(function () {
              p.onSelectCallback(c, {
                $item: t,
                $model: p.parserResult.modelMapper(c, s)
              });
            }), g.updateModel();
          }
        }), c.$on("uis:activate", function () {
          g.activeMatchIndex = -1;
        }), c.$watch("$select.disabled", function (e, t) {
          t && !e && p.sizeSearchInput();
        }), p.searchInput.on("keydown", function (e) {
          var s = e.which;
          c.$apply(function () {
            var i = !1;
            t.isHorizontalMovement(s) && (i = o(s)), i && s != t.TAB && (e.preventDefault(), e.stopPropagation());
          });
        }), p.searchInput.on("keyup", function (e) {
          if (t.isVerticalMovement(e.which) || c.$evalAsync(function () {
            p.activeIndex = p.taggingLabel === !1 ? -1 : 0;
          }), p.tagging.isActivated && p.search.length > 0) {
            if (e.which === t.TAB || t.isControl(e) || t.isFunctionKey(e) || e.which === t.ESC || t.isVerticalMovement(e.which)) return;
            if (p.activeIndex = p.taggingLabel === !1 ? -1 : 0, p.taggingLabel === !1) return;
            var s,
                i,
                n,
                l,
                a = angular.copy(p.items),
                r = angular.copy(p.items),
                o = !1,
                h = -1;

            if (void 0 !== p.tagging.fct) {
              if (n = p.$filter("filter")(a, {
                isTag: !0
              }), n.length > 0 && (l = n[0]), a.length > 0 && l && (o = !0, a = a.slice(1, a.length), r = r.slice(1, r.length)), s = p.tagging.fct(p.search), r.some(function (e) {
                return angular.equals(e, s);
              }) || p.selected.some(function (e) {
                return angular.equals(e, s);
              })) return void c.$evalAsync(function () {
                p.activeIndex = 0, p.items = a;
              });
              s && (s.isTag = !0);
            } else {
              if (n = p.$filter("filter")(a, function (e) {
                return e.match(p.taggingLabel);
              }), n.length > 0 && (l = n[0]), i = a[0], void 0 !== i && a.length > 0 && l && (o = !0, a = a.slice(1, a.length), r = r.slice(1, r.length)), s = p.search + " " + p.taggingLabel, d(p.selected, p.search) > -1) return;
              if (u(r.concat(p.selected))) return void (o && (a = r, c.$evalAsync(function () {
                p.activeIndex = 0, p.items = a;
              })));
              if (u(r)) return void (o && (p.items = r.slice(1, r.length)));
            }

            o && (h = d(p.selected, s)), h > -1 ? a = a.slice(h + 1, a.length - 1) : (a = [], s && a.push(s), a = a.concat(r)), c.$evalAsync(function () {
              if (p.activeIndex = 0, p.items = a, p.isGrouped) {
                var e = s ? a.slice(1) : a;
                p.setItemsFn(e), s && (p.items.unshift(s), p.groups.unshift({
                  name: "",
                  items: [s],
                  tagging: !0
                }));
              }
            });
          }
        }), p.searchInput.on("blur", function () {
          i(function () {
            g.activeMatchIndex = -1;
          });
        });
      }
    };
  }]), i.directive("uiSelectNoChoice", ["uiSelectConfig", function (e) {
    return {
      restrict: "EA",
      require: "^uiSelect",
      replace: !0,
      transclude: !0,
      templateUrl: function templateUrl(t) {
        t.addClass("ui-select-no-choice");
        var s = t.parent().attr("theme") || e.theme;
        return s + "/no-choice.tpl.html";
      }
    };
  }]), i.directive("uiSelectSingle", ["$timeout", "$compile", function (s, i) {
    return {
      restrict: "EA",
      require: ["^uiSelect", "^ngModel"],
      link: function link(c, n, l, a) {
        var r = a[0],
            o = a[1];
        o.$parsers.unshift(function (t) {
          if (e(t)) return t;
          var s,
              i = {};
          return i[r.parserResult.itemName] = t, s = r.parserResult.modelMapper(c, i);
        }), o.$formatters.unshift(function (t) {
          if (e(t)) return t;
          var s,
              i = r.parserResult && r.parserResult.source(c, {
            $select: {
              search: ""
            }
          }),
              n = {};

          if (i) {
            var l = function l(e) {
              return n[r.parserResult.itemName] = e, s = r.parserResult.modelMapper(c, n), s === t;
            };

            if (r.selected && l(r.selected)) return r.selected;

            for (var a = i.length - 1; a >= 0; a--) {
              if (l(i[a])) return i[a];
            }
          }

          return t;
        }), c.$watch("$select.selected", function (e) {
          o.$viewValue !== e && o.$setViewValue(e);
        }), o.$render = function () {
          r.selected = o.$viewValue;
        }, c.$on("uis:select", function (t, i) {
          r.selected = i;
          var n = {};
          n[r.parserResult.itemName] = i, s(function () {
            r.onSelectCallback(c, {
              $item: i,
              $model: e(i) ? i : r.parserResult.modelMapper(c, n)
            });
          });
        }), c.$on("uis:close", function (e, t) {
          s(function () {
            r.focusser.prop("disabled", !1), t || r.focusser[0].focus();
          }, 0, !1);
        }), c.$on("uis:activate", function () {
          u.prop("disabled", !0);
        });
        var u = angular.element("<input ng-disabled='$select.disabled' class='ui-select-focusser ui-select-offscreen' type='text' id='{{ $select.focusserId }}' aria-label='{{ $select.focusserTitle }}' aria-haspopup='true' role='button' />");
        i(u)(c), r.focusser = u, r.focusInput = u, n.parent().append(u), u.bind("focus", function () {
          c.$evalAsync(function () {
            r.focus = !0;
          });
        }), u.bind("blur", function () {
          c.$evalAsync(function () {
            r.focus = !1;
          });
        }), u.bind("keydown", function (e) {
          return e.which === t.BACKSPACE && r.backspaceReset !== !1 ? (e.preventDefault(), e.stopPropagation(), r.select(void 0), void c.$apply()) : void (e.which === t.TAB || t.isControl(e) || t.isFunctionKey(e) || e.which === t.ESC || (e.which != t.DOWN && e.which != t.UP && e.which != t.ENTER && e.which != t.SPACE || (e.preventDefault(), e.stopPropagation(), r.activate()), c.$digest()));
        }), u.bind("keyup input", function (e) {
          e.which === t.TAB || t.isControl(e) || t.isFunctionKey(e) || e.which === t.ESC || e.which == t.ENTER || e.which === t.BACKSPACE || (r.activate(u.val()), u.val(""), c.$digest());
        });
      }
    };
  }]), i.directive("uiSelectSort", ["$timeout", "uiSelectConfig", "uiSelectMinErr", function (e, t, s) {
    return {
      require: ["^^uiSelect", "^ngModel"],
      link: function link(t, i, c, n) {
        if (null === t[c.uiSelectSort]) throw s("sort", "Expected a list to sort");
        var l = n[0],
            a = n[1],
            r = angular.extend({
          axis: "horizontal"
        }, t.$eval(c.uiSelectSortOptions)),
            o = r.axis,
            u = "dragging",
            d = "dropping",
            p = "dropping-before",
            h = "dropping-after";
        t.$watch(function () {
          return l.sortable;
        }, function (e) {
          e ? i.attr("draggable", !0) : i.removeAttr("draggable");
        }), i.on("dragstart", function (e) {
          i.addClass(u), (e.dataTransfer || e.originalEvent.dataTransfer).setData("text", t.$index.toString());
        }), i.on("dragend", function () {
          v(u);
        });

        var g,
            f = function f(e, t) {
          this.splice(t, 0, this.splice(e, 1)[0]);
        },
            v = function v(e) {
          angular.forEach(l.$element.querySelectorAll("." + e), function (t) {
            angular.element(t).removeClass(e);
          });
        },
            m = function m(e) {
          e.preventDefault();
          var t = "vertical" === o ? e.offsetY || e.layerY || (e.originalEvent ? e.originalEvent.offsetY : 0) : e.offsetX || e.layerX || (e.originalEvent ? e.originalEvent.offsetX : 0);
          t < this["vertical" === o ? "offsetHeight" : "offsetWidth"] / 2 ? (v(h), i.addClass(p)) : (v(p), i.addClass(h));
        },
            $ = function $(t) {
          t.preventDefault();
          var s = parseInt((t.dataTransfer || t.originalEvent.dataTransfer).getData("text"), 10);
          e.cancel(g), g = e(function () {
            b(s);
          }, 20);
        },
            b = function b(e) {
          var s = t.$eval(c.uiSelectSort),
              n = s[e],
              l = null;
          l = i.hasClass(p) ? e < t.$index ? t.$index - 1 : t.$index : e < t.$index ? t.$index : t.$index + 1, f.apply(s, [e, l]), a.$setViewValue(Date.now()), t.$apply(function () {
            t.$emit("uiSelectSort:change", {
              array: s,
              item: n,
              from: e,
              to: l
            });
          }), v(d), v(p), v(h), i.off("drop", $);
        };

        i.on("dragenter", function () {
          i.hasClass(u) || (i.addClass(d), i.on("dragover", m), i.on("drop", $));
        }), i.on("dragleave", function (e) {
          e.target == i && (v(d), v(p), v(h), i.off("dragover", m), i.off("drop", $));
        });
      }
    };
  }]), i.factory("$$uisDebounce", ["$timeout", function (e) {
    return function (t, s) {
      var i;
      return function () {
        var c = this,
            n = Array.prototype.slice.call(arguments);
        i && e.cancel(i), i = e(function () {
          t.apply(c, n);
        }, s);
      };
    };
  }]), i.directive("uisOpenClose", ["$parse", "$timeout", function (e, t) {
    return {
      restrict: "A",
      require: "uiSelect",
      link: function link(s, i, c, n) {
        n.onOpenCloseCallback = e(c.uisOpenClose), s.$watch("$select.open", function (e, i) {
          e !== i && t(function () {
            n.onOpenCloseCallback(s, {
              isOpen: e
            });
          });
        });
      }
    };
  }]), i.service("uisRepeatParser", ["uiSelectMinErr", "$parse", function (e, t) {
    var s = this;
    s.parse = function (s) {
      var i;
      if (i = s.match(/^\s*(?:([\s\S]+?)\s+as\s+)?(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+(\s*[\s\S]+?)?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/), !i) throw e("iexp", "Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.", s);
      var c = i[5],
          n = "";

      if (i[3]) {
        c = i[5].replace(/(^\()|(\)$)/g, "");
        var l = i[5].match(/^\s*(?:[\s\S]+?)(?:[^\|]|\|\|)+([\s\S]*)\s*$/);
        l && l[1].trim() && (n = l[1], c = c.replace(n, ""));
      }

      return {
        itemName: i[4] || i[2],
        keyName: i[3],
        source: t(c),
        filters: n,
        trackByExp: i[6],
        modelMapper: t(i[1] || i[4] || i[2]),
        repeatExpression: function repeatExpression(e) {
          var t = this.itemName + " in " + (e ? "$group.items" : "$select.items");
          return this.trackByExp && (t += " track by " + this.trackByExp), t;
        }
      };
    }, s.getGroupNgRepeatExpression = function () {
      return "$group in $select.groups track by $group.name";
    };
  }]);
}(), angular.module("ui.select").run(["$templateCache", function (e) {
  e.put("bootstrap/choices.tpl.html", '<ul class="ui-select-choices ui-select-choices-content ui-select-dropdown dropdown-menu" ng-show="$select.open && $select.items.length > 0"><li class="ui-select-choices-group" id="ui-select-choices-{{ $select.generatedId }}"><div class="divider" ng-show="$select.isGrouped && $index > 0"></div><div ng-show="$select.isGrouped" class="ui-select-choices-group-label dropdown-header" ng-bind="$group.name"></div><div ng-attr-id="ui-select-choices-row-{{ $select.generatedId }}-{{$index}}" class="ui-select-choices-row" ng-class="{active: $select.isActive(this), disabled: $select.isDisabled(this)}" role="option"><span class="ui-select-choices-row-inner"></span></div></li></ul>'), e.put("bootstrap/match-multiple.tpl.html", '<span class="ui-select-match"><span ng-repeat="$item in $select.selected track by $index"><span class="ui-select-match-item btn btn-default btn-xs" tabindex="-1" type="button" ng-disabled="$select.disabled" ng-click="$selectMultiple.activeMatchIndex = $index;" ng-class="{\'btn-primary\':$selectMultiple.activeMatchIndex === $index, \'select-locked\':$select.isLocked(this, $index)}" ui-select-sort="$select.selected"><span class="close ui-select-match-close" ng-hide="$select.disabled" ng-click="$selectMultiple.removeChoice($index)">&nbsp;&times;</span> <span uis-transclude-append=""></span></span></span></span>'), e.put("bootstrap/match.tpl.html", '<div class="ui-select-match" ng-hide="$select.open && $select.searchEnabled" ng-disabled="$select.disabled" ng-class="{\'btn-default-focus\':$select.focus}"><span tabindex="-1" class="btn btn-default form-control ui-select-toggle" aria-label="{{ $select.baseTitle }} activate" ng-disabled="$select.disabled" ng-click="$select.activate()" style="outline: 0;"><span ng-show="$select.isEmpty()" class="ui-select-placeholder text-muted">{{$select.placeholder}}</span> <span ng-hide="$select.isEmpty()" class="ui-select-match-text pull-left" ng-class="{\'ui-select-allow-clear\': $select.allowClear && !$select.isEmpty()}" ng-transclude=""></span> <i class="caret pull-right" ng-click="$select.toggle($event)"></i> <a ng-show="$select.allowClear && !$select.isEmpty() && ($select.disabled !== true)" aria-label="{{ $select.baseTitle }} clear" style="margin-right: 10px" ng-click="$select.clear($event)" class="btn btn-xs btn-link pull-right"><i class="glyphicon glyphicon-remove" aria-hidden="true"></i></a></span></div>'), e.put("bootstrap/no-choice.tpl.html", '<ul class="ui-select-no-choice dropdown-menu" ng-show="$select.items.length == 0"><li ng-transclude=""></li></ul>'), e.put("bootstrap/select-multiple.tpl.html", '<div class="ui-select-container ui-select-multiple ui-select-bootstrap dropdown form-control" ng-class="{open: $select.open}"><div><div class="ui-select-match"></div><input type="search" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" class="ui-select-search input-xs" placeholder="{{$selectMultiple.getPlaceholder()}}" ng-disabled="$select.disabled" ng-click="$select.activate()" ng-model="$select.search" role="combobox" aria-expanded="{{$select.open}}" aria-label="{{$select.baseTitle}}" ng-class="{\'spinner\': $select.refreshing}" ondrop="return false;"></div><div class="ui-select-choices"></div><div class="ui-select-no-choice"></div></div>'), e.put("bootstrap/select.tpl.html", '<div class="ui-select-container ui-select-bootstrap dropdown" ng-class="{open: $select.open}"><div class="ui-select-match"></div><span ng-show="$select.open && $select.refreshing && $select.spinnerEnabled" class="ui-select-refreshing {{$select.spinnerClass}}"></span> <input type="search" autocomplete="off" tabindex="-1" aria-expanded="true" aria-label="{{ $select.baseTitle }}" aria-owns="ui-select-choices-{{ $select.generatedId }}" class="form-control ui-select-search" ng-class="{ \'ui-select-search-hidden\' : !$select.searchEnabled }" placeholder="{{$select.placeholder}}" ng-model="$select.search" ng-show="$select.open"><div class="ui-select-choices"></div><div class="ui-select-no-choice"></div></div>'), e.put("select2/choices.tpl.html", '<ul tabindex="-1" class="ui-select-choices ui-select-choices-content select2-results"><li class="ui-select-choices-group" ng-class="{\'select2-result-with-children\': $select.choiceGrouped($group) }"><div ng-show="$select.choiceGrouped($group)" class="ui-select-choices-group-label select2-result-label" ng-bind="$group.name"></div><ul id="ui-select-choices-{{ $select.generatedId }}" ng-class="{\'select2-result-sub\': $select.choiceGrouped($group), \'select2-result-single\': !$select.choiceGrouped($group) }"><li role="option" ng-attr-id="ui-select-choices-row-{{ $select.generatedId }}-{{$index}}" class="ui-select-choices-row" ng-class="{\'select2-highlighted\': $select.isActive(this), \'select2-disabled\': $select.isDisabled(this)}"><div class="select2-result-label ui-select-choices-row-inner"></div></li></ul></li></ul>'), e.put("select2/match-multiple.tpl.html", '<span class="ui-select-match"><li class="ui-select-match-item select2-search-choice" ng-repeat="$item in $select.selected track by $index" ng-class="{\'select2-search-choice-focus\':$selectMultiple.activeMatchIndex === $index, \'select2-locked\':$select.isLocked(this, $index)}" ui-select-sort="$select.selected"><span uis-transclude-append=""></span> <a href="javascript:;" class="ui-select-match-close select2-search-choice-close" ng-click="$selectMultiple.removeChoice($index)" tabindex="-1"></a></li></span>'), e.put("select2/match.tpl.html", '<a class="select2-choice ui-select-match" ng-class="{\'select2-default\': $select.isEmpty()}" ng-click="$select.toggle($event)" aria-label="{{ $select.baseTitle }} select"><span ng-show="$select.isEmpty()" class="select2-chosen">{{$select.placeholder}}</span> <span ng-hide="$select.isEmpty()" class="select2-chosen" ng-transclude=""></span> <abbr ng-if="$select.allowClear && !$select.isEmpty()" class="select2-search-choice-close" ng-click="$select.clear($event)"></abbr> <span class="select2-arrow ui-select-toggle"><b></b></span></a>'), e.put("select2/no-choice.tpl.html", '<div class="ui-select-no-choice dropdown" ng-show="$select.items.length == 0"><div class="dropdown-content"><div data-selectable="" ng-transclude=""></div></div></div>'), e.put("select2/select-multiple.tpl.html", '<div class="ui-select-container ui-select-multiple select2 select2-container select2-container-multi" ng-class="{\'select2-container-active select2-dropdown-open open\': $select.open, \'select2-container-disabled\': $select.disabled}"><ul class="select2-choices"><span class="ui-select-match"></span><li class="select2-search-field"><input type="search" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" role="combobox" aria-expanded="true" aria-owns="ui-select-choices-{{ $select.generatedId }}" aria-label="{{ $select.baseTitle }}" aria-activedescendant="ui-select-choices-row-{{ $select.generatedId }}-{{ $select.activeIndex }}" class="select2-input ui-select-search" placeholder="{{$selectMultiple.getPlaceholder()}}" ng-disabled="$select.disabled" ng-hide="$select.disabled" ng-model="$select.search" ng-click="$select.activate()" style="width: 34px;" ondrop="return false;"></li></ul><div class="ui-select-dropdown select2-drop select2-with-searchbox select2-drop-active" ng-class="{\'select2-display-none\': !$select.open || $select.items.length === 0}"><div class="ui-select-choices"></div></div></div>'), e.put("select2/select.tpl.html", '<div class="ui-select-container select2 select2-container" ng-class="{\'select2-container-active select2-dropdown-open open\': $select.open, \'select2-container-disabled\': $select.disabled, \'select2-container-active\': $select.focus, \'select2-allowclear\': $select.allowClear && !$select.isEmpty()}"><div class="ui-select-match"></div><div class="ui-select-dropdown select2-drop select2-with-searchbox select2-drop-active" ng-class="{\'select2-display-none\': !$select.open}"><div class="search-container" ng-class="{\'ui-select-search-hidden\':!$select.searchEnabled, \'select2-search\':$select.searchEnabled}"><input type="search" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" ng-class="{\'select2-active\': $select.refreshing}" role="combobox" aria-expanded="true" aria-owns="ui-select-choices-{{ $select.generatedId }}" aria-label="{{ $select.baseTitle }}" class="ui-select-search select2-input" ng-model="$select.search"></div><div class="ui-select-choices"></div><div class="ui-select-no-choice"></div></div></div>'), e.put("selectize/choices.tpl.html", '<div ng-show="$select.open" class="ui-select-choices ui-select-dropdown selectize-dropdown" ng-class="{\'single\': !$select.multiple, \'multi\': $select.multiple}"><div class="ui-select-choices-content selectize-dropdown-content"><div class="ui-select-choices-group optgroup"><div ng-show="$select.isGrouped" class="ui-select-choices-group-label optgroup-header" ng-bind="$group.name"></div><div role="option" class="ui-select-choices-row" ng-class="{active: $select.isActive(this), disabled: $select.isDisabled(this)}"><div class="option ui-select-choices-row-inner" data-selectable=""></div></div></div></div></div>'), e.put("selectize/match-multiple.tpl.html", '<div class="ui-select-match" data-value="" ng-repeat="$item in $select.selected track by $index" ng-click="$selectMultiple.activeMatchIndex = $index;" ng-class="{\'active\':$selectMultiple.activeMatchIndex === $index}" ui-select-sort="$select.selected"><span class="ui-select-match-item" ng-class="{\'select-locked\':$select.isLocked(this, $index)}"><span uis-transclude-append=""></span> <span class="remove ui-select-match-close" ng-hide="$select.disabled" ng-click="$selectMultiple.removeChoice($index)">&times;</span></span></div>'), e.put("selectize/match.tpl.html", '<div ng-hide="$select.searchEnabled && ($select.open || $select.isEmpty())" class="ui-select-match"><span ng-show="!$select.searchEnabled && ($select.isEmpty() || $select.open)" class="ui-select-placeholder text-muted">{{$select.placeholder}}</span> <span ng-hide="$select.isEmpty() || $select.open" ng-transclude=""></span></div>'), e.put("selectize/no-choice.tpl.html", '<div class="ui-select-no-choice selectize-dropdown" ng-show="$select.items.length == 0"><div class="selectize-dropdown-content"><div data-selectable="" ng-transclude=""></div></div></div>'), e.put("selectize/select-multiple.tpl.html", '<div class="ui-select-container selectize-control multi plugin-remove_button" ng-class="{\'open\': $select.open}"><div class="selectize-input" ng-class="{\'focus\': $select.open, \'disabled\': $select.disabled, \'selectize-focus\' : $select.focus}" ng-click="$select.open && !$select.searchEnabled ? $select.toggle($event) : $select.activate()"><div class="ui-select-match"></div><input type="search" autocomplete="off" tabindex="-1" class="ui-select-search" ng-class="{\'ui-select-search-hidden\':!$select.searchEnabled}" placeholder="{{$selectMultiple.getPlaceholder()}}" ng-model="$select.search" ng-disabled="$select.disabled" aria-expanded="{{$select.open}}" aria-label="{{ $select.baseTitle }}" ondrop="return false;"></div><div class="ui-select-choices"></div><div class="ui-select-no-choice"></div></div>'), e.put("selectize/select.tpl.html", '<div class="ui-select-container selectize-control single" ng-class="{\'open\': $select.open}"><div class="selectize-input" ng-class="{\'focus\': $select.open, \'disabled\': $select.disabled, \'selectize-focus\' : $select.focus}" ng-click="$select.open && !$select.searchEnabled ? $select.toggle($event) : $select.activate()"><div class="ui-select-match"></div><input type="search" autocomplete="off" tabindex="-1" class="ui-select-search ui-select-toggle" ng-class="{\'ui-select-search-hidden\':!$select.searchEnabled}" ng-click="$select.toggle($event)" placeholder="{{$select.placeholder}}" ng-model="$select.search" ng-hide="!$select.isEmpty() && !$select.open" ng-disabled="$select.disabled" aria-label="{{ $select.baseTitle }}"></div><div class="ui-select-choices"></div><div class="ui-select-no-choice"></div></div>');
}]);
/**
 * @license AngularJS v1.7.8
 * (c) 2010-2018 Google, Inc. http://angularjs.org
 * License: MIT
 */

(function (window, angular) {
  'use strict';
  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   *     Any commits to this file should be reviewed with security in mind.  *
   *   Changes to this file can potentially create security vulnerabilities. *
   *          An approval from 2 Core members with history of modifying      *
   *                         this file is required.                          *
   *                                                                         *
   *  Does the change somehow allow for arbitrary javascript to be executed? *
   *    Or allows for someone to change the prototype of built-in objects?   *
   *     Or gives undesired access to variables likes document or window?    *
   * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  var $sanitizeMinErr = angular.$$minErr('$sanitize');
  var bind;
  var extend;
  var forEach;
  var isArray;
  var isDefined;
  var lowercase;
  var noop;
  var nodeContains;
  var htmlParser;
  var htmlSanitizeWriter;
  /**
   * @ngdoc module
   * @name ngSanitize
   * @description
   *
   * The `ngSanitize` module provides functionality to sanitize HTML.
   *
   * See {@link ngSanitize.$sanitize `$sanitize`} for usage.
   */

  /**
   * @ngdoc service
   * @name $sanitize
   * @kind function
   *
   * @description
   *   Sanitizes an html string by stripping all potentially dangerous tokens.
   *
   *   The input is sanitized by parsing the HTML into tokens. All safe tokens (from a whitelist) are
   *   then serialized back to a properly escaped HTML string. This means that no unsafe input can make
   *   it into the returned string.
   *
   *   The whitelist for URL sanitization of attribute values is configured using the functions
   *   `aHrefSanitizationWhitelist` and `imgSrcSanitizationWhitelist` of {@link $compileProvider}.
   *
   *   The input may also contain SVG markup if this is enabled via {@link $sanitizeProvider}.
   *
   * @param {string} html HTML input.
   * @returns {string} Sanitized HTML.
   *
   * @example
     <example module="sanitizeExample" deps="angular-sanitize.js" name="sanitize-service">
     <file name="index.html">
       <script>
           angular.module('sanitizeExample', ['ngSanitize'])
             .controller('ExampleController', ['$scope', '$sce', function($scope, $sce) {
               $scope.snippet =
                 '<p style="color:blue">an html\n' +
                 '<em onmouseover="this.textContent=\'PWN3D!\'">click here</em>\n' +
                 'snippet</p>';
               $scope.deliberatelyTrustDangerousSnippet = function() {
                 return $sce.trustAsHtml($scope.snippet);
               };
             }]);
       </script>
       <div ng-controller="ExampleController">
          Snippet: <textarea ng-model="snippet" cols="60" rows="3"></textarea>
         <table>
           <tr>
             <td>Directive</td>
             <td>How</td>
             <td>Source</td>
             <td>Rendered</td>
           </tr>
           <tr id="bind-html-with-sanitize">
             <td>ng-bind-html</td>
             <td>Automatically uses $sanitize</td>
             <td><pre>&lt;div ng-bind-html="snippet"&gt;<br/>&lt;/div&gt;</pre></td>
             <td><div ng-bind-html="snippet"></div></td>
           </tr>
           <tr id="bind-html-with-trust">
             <td>ng-bind-html</td>
             <td>Bypass $sanitize by explicitly trusting the dangerous value</td>
             <td>
             <pre>&lt;div ng-bind-html="deliberatelyTrustDangerousSnippet()"&gt;
  &lt;/div&gt;</pre>
             </td>
             <td><div ng-bind-html="deliberatelyTrustDangerousSnippet()"></div></td>
           </tr>
           <tr id="bind-default">
             <td>ng-bind</td>
             <td>Automatically escapes</td>
             <td><pre>&lt;div ng-bind="snippet"&gt;<br/>&lt;/div&gt;</pre></td>
             <td><div ng-bind="snippet"></div></td>
           </tr>
         </table>
         </div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should sanitize the html snippet by default', function() {
         expect(element(by.css('#bind-html-with-sanitize div')).getAttribute('innerHTML')).
           toBe('<p>an html\n<em>click here</em>\nsnippet</p>');
       });
  
       it('should inline raw snippet if bound to a trusted value', function() {
         expect(element(by.css('#bind-html-with-trust div')).getAttribute('innerHTML')).
           toBe("<p style=\"color:blue\">an html\n" +
                "<em onmouseover=\"this.textContent='PWN3D!'\">click here</em>\n" +
                "snippet</p>");
       });
  
       it('should escape snippet without any filter', function() {
         expect(element(by.css('#bind-default div')).getAttribute('innerHTML')).
           toBe("&lt;p style=\"color:blue\"&gt;an html\n" +
                "&lt;em onmouseover=\"this.textContent='PWN3D!'\"&gt;click here&lt;/em&gt;\n" +
                "snippet&lt;/p&gt;");
       });
  
       it('should update', function() {
         element(by.model('snippet')).clear();
         element(by.model('snippet')).sendKeys('new <b onclick="alert(1)">text</b>');
         expect(element(by.css('#bind-html-with-sanitize div')).getAttribute('innerHTML')).
           toBe('new <b>text</b>');
         expect(element(by.css('#bind-html-with-trust div')).getAttribute('innerHTML')).toBe(
           'new <b onclick="alert(1)">text</b>');
         expect(element(by.css('#bind-default div')).getAttribute('innerHTML')).toBe(
           "new &lt;b onclick=\"alert(1)\"&gt;text&lt;/b&gt;");
       });
     </file>
     </example>
   */

  /**
   * @ngdoc provider
   * @name $sanitizeProvider
   * @this
   *
   * @description
   * Creates and configures {@link $sanitize} instance.
   */

  function $SanitizeProvider() {
    var hasBeenInstantiated = false;
    var svgEnabled = false;
    this.$get = ['$$sanitizeUri', function ($$sanitizeUri) {
      hasBeenInstantiated = true;

      if (svgEnabled) {
        extend(validElements, svgElements);
      }

      return function (html) {
        var buf = [];
        htmlParser(html, htmlSanitizeWriter(buf, function (uri, isImage) {
          return !/^unsafe:/.test($$sanitizeUri(uri, isImage));
        }));
        return buf.join('');
      };
    }];
    /**
     * @ngdoc method
     * @name $sanitizeProvider#enableSvg
     * @kind function
     *
     * @description
     * Enables a subset of svg to be supported by the sanitizer.
     *
     * <div class="alert alert-warning">
     *   <p>By enabling this setting without taking other precautions, you might expose your
     *   application to click-hijacking attacks. In these attacks, sanitized svg elements could be positioned
     *   outside of the containing element and be rendered over other elements on the page (e.g. a login
     *   link). Such behavior can then result in phishing incidents.</p>
     *
     *   <p>To protect against these, explicitly setup `overflow: hidden` css rule for all potential svg
     *   tags within the sanitized content:</p>
     *
     *   <br>
     *
     *   <pre><code>
     *   .rootOfTheIncludedContent svg {
     *     overflow: hidden !important;
     *   }
     *   </code></pre>
     * </div>
     *
     * @param {boolean=} flag Enable or disable SVG support in the sanitizer.
     * @returns {boolean|$sanitizeProvider} Returns the currently configured value if called
     *    without an argument or self for chaining otherwise.
     */

    this.enableSvg = function (enableSvg) {
      if (isDefined(enableSvg)) {
        svgEnabled = enableSvg;
        return this;
      } else {
        return svgEnabled;
      }
    };
    /**
     * @ngdoc method
     * @name $sanitizeProvider#addValidElements
     * @kind function
     *
     * @description
     * Extends the built-in lists of valid HTML/SVG elements, i.e. elements that are considered safe
     * and are not stripped off during sanitization. You can extend the following lists of elements:
     *
     * - `htmlElements`: A list of elements (tag names) to extend the current list of safe HTML
     *   elements. HTML elements considered safe will not be removed during sanitization. All other
     *   elements will be stripped off.
     *
     * - `htmlVoidElements`: This is similar to `htmlElements`, but marks the elements as
     *   "void elements" (similar to HTML
     *   [void elements](https://rawgit.com/w3c/html/html5.1-2/single-page.html#void-elements)). These
     *   elements have no end tag and cannot have content.
     *
     * - `svgElements`: This is similar to `htmlElements`, but for SVG elements. This list is only
     *   taken into account if SVG is {@link ngSanitize.$sanitizeProvider#enableSvg enabled} for
     *   `$sanitize`.
     *
     * <div class="alert alert-info">
     *   This method must be called during the {@link angular.Module#config config} phase. Once the
     *   `$sanitize` service has been instantiated, this method has no effect.
     * </div>
     *
     * <div class="alert alert-warning">
     *   Keep in mind that extending the built-in lists of elements may expose your app to XSS or
     *   other vulnerabilities. Be very mindful of the elements you add.
     * </div>
     *
     * @param {Array<String>|Object} elements - A list of valid HTML elements or an object with one or
     *   more of the following properties:
     *   - **htmlElements** - `{Array<String>}` - A list of elements to extend the current list of
     *     HTML elements.
     *   - **htmlVoidElements** - `{Array<String>}` - A list of elements to extend the current list of
     *     void HTML elements; i.e. elements that do not have an end tag.
     *   - **svgElements** - `{Array<String>}` - A list of elements to extend the current list of SVG
     *     elements. The list of SVG elements is only taken into account if SVG is
     *     {@link ngSanitize.$sanitizeProvider#enableSvg enabled} for `$sanitize`.
     *
     * Passing an array (`[...]`) is equivalent to passing `{htmlElements: [...]}`.
     *
     * @return {$sanitizeProvider} Returns self for chaining.
     */


    this.addValidElements = function (elements) {
      if (!hasBeenInstantiated) {
        if (isArray(elements)) {
          elements = {
            htmlElements: elements
          };
        }

        addElementsTo(svgElements, elements.svgElements);
        addElementsTo(voidElements, elements.htmlVoidElements);
        addElementsTo(validElements, elements.htmlVoidElements);
        addElementsTo(validElements, elements.htmlElements);
      }

      return this;
    };
    /**
     * @ngdoc method
     * @name $sanitizeProvider#addValidAttrs
     * @kind function
     *
     * @description
     * Extends the built-in list of valid attributes, i.e. attributes that are considered safe and are
     * not stripped off during sanitization.
     *
     * **Note**:
     * The new attributes will not be treated as URI attributes, which means their values will not be
     * sanitized as URIs using `$compileProvider`'s
     * {@link ng.$compileProvider#aHrefSanitizationWhitelist aHrefSanitizationWhitelist} and
     * {@link ng.$compileProvider#imgSrcSanitizationWhitelist imgSrcSanitizationWhitelist}.
     *
     * <div class="alert alert-info">
     *   This method must be called during the {@link angular.Module#config config} phase. Once the
     *   `$sanitize` service has been instantiated, this method has no effect.
     * </div>
     *
     * <div class="alert alert-warning">
     *   Keep in mind that extending the built-in list of attributes may expose your app to XSS or
     *   other vulnerabilities. Be very mindful of the attributes you add.
     * </div>
     *
     * @param {Array<String>} attrs - A list of valid attributes.
     *
     * @returns {$sanitizeProvider} Returns self for chaining.
     */


    this.addValidAttrs = function (attrs) {
      if (!hasBeenInstantiated) {
        extend(validAttrs, arrayToMap(attrs, true));
      }

      return this;
    }; //////////////////////////////////////////////////////////////////////////////////////////////////
    // Private stuff
    //////////////////////////////////////////////////////////////////////////////////////////////////


    bind = angular.bind;
    extend = angular.extend;
    forEach = angular.forEach;
    isArray = angular.isArray;
    isDefined = angular.isDefined;
    lowercase = angular.$$lowercase;
    noop = angular.noop;
    htmlParser = htmlParserImpl;
    htmlSanitizeWriter = htmlSanitizeWriterImpl;

    nodeContains = window.Node.prototype.contains ||
    /** @this */
    function (arg) {
      // eslint-disable-next-line no-bitwise
      return !!(this.compareDocumentPosition(arg) & 16);
    }; // Regular Expressions for parsing tags and attributes


    var SURROGATE_PAIR_REGEXP = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g,
        // Match everything outside of normal chars and " (quote character)
    NON_ALPHANUMERIC_REGEXP = /([^#-~ |!])/g; // Good source of info about elements and attributes
    // http://dev.w3.org/html5/spec/Overview.html#semantics
    // http://simon.html5.org/html-elements
    // Safe Void Elements - HTML5
    // http://dev.w3.org/html5/spec/Overview.html#void-elements

    var voidElements = stringToMap('area,br,col,hr,img,wbr'); // Elements that you can, intentionally, leave open (and which close themselves)
    // http://dev.w3.org/html5/spec/Overview.html#optional-tags

    var optionalEndTagBlockElements = stringToMap('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr'),
        optionalEndTagInlineElements = stringToMap('rp,rt'),
        optionalEndTagElements = extend({}, optionalEndTagInlineElements, optionalEndTagBlockElements); // Safe Block Elements - HTML5

    var blockElements = extend({}, optionalEndTagBlockElements, stringToMap('address,article,' + 'aside,blockquote,caption,center,del,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' + 'h6,header,hgroup,hr,ins,map,menu,nav,ol,pre,section,table,ul')); // Inline Elements - HTML5

    var inlineElements = extend({}, optionalEndTagInlineElements, stringToMap('a,abbr,acronym,b,' + 'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,q,ruby,rp,rt,s,' + 'samp,small,span,strike,strong,sub,sup,time,tt,u,var')); // SVG Elements
    // https://wiki.whatwg.org/wiki/Sanitization_rules#svg_Elements
    // Note: the elements animate,animateColor,animateMotion,animateTransform,set are intentionally omitted.
    // They can potentially allow for arbitrary javascript to be executed. See #11290

    var svgElements = stringToMap('circle,defs,desc,ellipse,font-face,font-face-name,font-face-src,g,glyph,' + 'hkern,image,linearGradient,line,marker,metadata,missing-glyph,mpath,path,polygon,polyline,' + 'radialGradient,rect,stop,svg,switch,text,title,tspan'); // Blocked Elements (will be stripped)

    var blockedElements = stringToMap('script,style');
    var validElements = extend({}, voidElements, blockElements, inlineElements, optionalEndTagElements); //Attributes that have href and hence need to be sanitized

    var uriAttrs = stringToMap('background,cite,href,longdesc,src,xlink:href,xml:base');
    var htmlAttrs = stringToMap('abbr,align,alt,axis,bgcolor,border,cellpadding,cellspacing,class,clear,' + 'color,cols,colspan,compact,coords,dir,face,headers,height,hreflang,hspace,' + 'ismap,lang,language,nohref,nowrap,rel,rev,rows,rowspan,rules,' + 'scope,scrolling,shape,size,span,start,summary,tabindex,target,title,type,' + 'valign,value,vspace,width'); // SVG attributes (without "id" and "name" attributes)
    // https://wiki.whatwg.org/wiki/Sanitization_rules#svg_Attributes

    var svgAttrs = stringToMap('accent-height,accumulate,additive,alphabetic,arabic-form,ascent,' + 'baseProfile,bbox,begin,by,calcMode,cap-height,class,color,color-rendering,content,' + 'cx,cy,d,dx,dy,descent,display,dur,end,fill,fill-rule,font-family,font-size,font-stretch,' + 'font-style,font-variant,font-weight,from,fx,fy,g1,g2,glyph-name,gradientUnits,hanging,' + 'height,horiz-adv-x,horiz-origin-x,ideographic,k,keyPoints,keySplines,keyTimes,lang,' + 'marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mathematical,' + 'max,min,offset,opacity,orient,origin,overline-position,overline-thickness,panose-1,' + 'path,pathLength,points,preserveAspectRatio,r,refX,refY,repeatCount,repeatDur,' + 'requiredExtensions,requiredFeatures,restart,rotate,rx,ry,slope,stemh,stemv,stop-color,' + 'stop-opacity,strikethrough-position,strikethrough-thickness,stroke,stroke-dasharray,' + 'stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,' + 'stroke-width,systemLanguage,target,text-anchor,to,transform,type,u1,u2,underline-position,' + 'underline-thickness,unicode,unicode-range,units-per-em,values,version,viewBox,visibility,' + 'width,widths,x,x-height,x1,x2,xlink:actuate,xlink:arcrole,xlink:role,xlink:show,xlink:title,' + 'xlink:type,xml:base,xml:lang,xml:space,xmlns,xmlns:xlink,y,y1,y2,zoomAndPan', true);
    var validAttrs = extend({}, uriAttrs, svgAttrs, htmlAttrs);

    function stringToMap(str, lowercaseKeys) {
      return arrayToMap(str.split(','), lowercaseKeys);
    }

    function arrayToMap(items, lowercaseKeys) {
      var obj = {},
          i;

      for (i = 0; i < items.length; i++) {
        obj[lowercaseKeys ? lowercase(items[i]) : items[i]] = true;
      }

      return obj;
    }

    function addElementsTo(elementsMap, newElements) {
      if (newElements && newElements.length) {
        extend(elementsMap, arrayToMap(newElements));
      }
    }
    /**
     * Create an inert document that contains the dirty HTML that needs sanitizing
     * Depending upon browser support we use one of three strategies for doing this.
     * Support: Safari 10.x -> XHR strategy
     * Support: Firefox -> DomParser strategy
     */


    var getInertBodyElement
    /* function(html: string): HTMLBodyElement */
    = function (window, document) {
      var inertDocument;

      if (document && document.implementation) {
        inertDocument = document.implementation.createHTMLDocument('inert');
      } else {
        throw $sanitizeMinErr('noinert', 'Can\'t create an inert html document');
      }

      var inertBodyElement = (inertDocument.documentElement || inertDocument.getDocumentElement()).querySelector('body'); // Check for the Safari 10.1 bug - which allows JS to run inside the SVG G element

      inertBodyElement.innerHTML = '<svg><g onload="this.parentNode.remove()"></g></svg>';

      if (!inertBodyElement.querySelector('svg')) {
        return getInertBodyElement_XHR;
      } else {
        // Check for the Firefox bug - which prevents the inner img JS from being sanitized
        inertBodyElement.innerHTML = '<svg><p><style><img src="</style><img src=x onerror=alert(1)//">';

        if (inertBodyElement.querySelector('svg img')) {
          return getInertBodyElement_DOMParser;
        } else {
          return getInertBodyElement_InertDocument;
        }
      }

      function getInertBodyElement_XHR(html) {
        // We add this dummy element to ensure that the rest of the content is parsed as expected
        // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the `<head>` tag.
        html = '<remove></remove>' + html;

        try {
          html = encodeURI(html);
        } catch (e) {
          return undefined;
        }

        var xhr = new window.XMLHttpRequest();
        xhr.responseType = 'document';
        xhr.open('GET', 'data:text/html;charset=utf-8,' + html, false);
        xhr.send(null);
        var body = xhr.response.body;
        body.firstChild.remove();
        return body;
      }

      function getInertBodyElement_DOMParser(html) {
        // We add this dummy element to ensure that the rest of the content is parsed as expected
        // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the `<head>` tag.
        html = '<remove></remove>' + html;

        try {
          var body = new window.DOMParser().parseFromString(html, 'text/html').body;
          body.firstChild.remove();
          return body;
        } catch (e) {
          return undefined;
        }
      }

      function getInertBodyElement_InertDocument(html) {
        inertBodyElement.innerHTML = html; // Support: IE 9-11 only
        // strip custom-namespaced attributes on IE<=11

        if (document.documentMode) {
          stripCustomNsAttrs(inertBodyElement);
        }

        return inertBodyElement;
      }
    }(window, window.document);
    /**
     * @example
     * htmlParser(htmlString, {
     *     start: function(tag, attrs) {},
     *     end: function(tag) {},
     *     chars: function(text) {},
     *     comment: function(text) {}
     * });
     *
     * @param {string} html string
     * @param {object} handler
     */


    function htmlParserImpl(html, handler) {
      if (html === null || html === undefined) {
        html = '';
      } else if (typeof html !== 'string') {
        html = '' + html;
      }

      var inertBodyElement = getInertBodyElement(html);
      if (!inertBodyElement) return ''; //mXSS protection

      var mXSSAttempts = 5;

      do {
        if (mXSSAttempts === 0) {
          throw $sanitizeMinErr('uinput', 'Failed to sanitize html because the input is unstable');
        }

        mXSSAttempts--; // trigger mXSS if it is going to happen by reading and writing the innerHTML

        html = inertBodyElement.innerHTML;
        inertBodyElement = getInertBodyElement(html);
      } while (html !== inertBodyElement.innerHTML);

      var node = inertBodyElement.firstChild;

      while (node) {
        switch (node.nodeType) {
          case 1:
            // ELEMENT_NODE
            handler.start(node.nodeName.toLowerCase(), attrToMap(node.attributes));
            break;

          case 3:
            // TEXT NODE
            handler.chars(node.textContent);
            break;
        }

        var nextNode;

        if (!(nextNode = node.firstChild)) {
          if (node.nodeType === 1) {
            handler.end(node.nodeName.toLowerCase());
          }

          nextNode = getNonDescendant('nextSibling', node);

          if (!nextNode) {
            while (nextNode == null) {
              node = getNonDescendant('parentNode', node);
              if (node === inertBodyElement) break;
              nextNode = getNonDescendant('nextSibling', node);

              if (node.nodeType === 1) {
                handler.end(node.nodeName.toLowerCase());
              }
            }
          }
        }

        node = nextNode;
      }

      while (node = inertBodyElement.firstChild) {
        inertBodyElement.removeChild(node);
      }
    }

    function attrToMap(attrs) {
      var map = {};

      for (var i = 0, ii = attrs.length; i < ii; i++) {
        var attr = attrs[i];
        map[attr.name] = attr.value;
      }

      return map;
    }
    /**
     * Escapes all potentially dangerous characters, so that the
     * resulting string can be safely inserted into attribute or
     * element text.
     * @param value
     * @returns {string} escaped text
     */


    function encodeEntities(value) {
      return value.replace(/&/g, '&amp;').replace(SURROGATE_PAIR_REGEXP, function (value) {
        var hi = value.charCodeAt(0);
        var low = value.charCodeAt(1);
        return '&#' + ((hi - 0xD800) * 0x400 + (low - 0xDC00) + 0x10000) + ';';
      }).replace(NON_ALPHANUMERIC_REGEXP, function (value) {
        return '&#' + value.charCodeAt(0) + ';';
      }).replace(/</g, '&lt;').replace(/>/g, '&gt;');
    }
    /**
     * create an HTML/XML writer which writes to buffer
     * @param {Array} buf use buf.join('') to get out sanitized html string
     * @returns {object} in the form of {
     *     start: function(tag, attrs) {},
     *     end: function(tag) {},
     *     chars: function(text) {},
     *     comment: function(text) {}
     * }
     */


    function htmlSanitizeWriterImpl(buf, uriValidator) {
      var ignoreCurrentElement = false;
      var out = bind(buf, buf.push);
      return {
        start: function start(tag, attrs) {
          tag = lowercase(tag);

          if (!ignoreCurrentElement && blockedElements[tag]) {
            ignoreCurrentElement = tag;
          }

          if (!ignoreCurrentElement && validElements[tag] === true) {
            out('<');
            out(tag);
            forEach(attrs, function (value, key) {
              var lkey = lowercase(key);
              var isImage = tag === 'img' && lkey === 'src' || lkey === 'background';

              if (validAttrs[lkey] === true && (uriAttrs[lkey] !== true || uriValidator(value, isImage))) {
                out(' ');
                out(key);
                out('="');
                out(encodeEntities(value));
                out('"');
              }
            });
            out('>');
          }
        },
        end: function end(tag) {
          tag = lowercase(tag);

          if (!ignoreCurrentElement && validElements[tag] === true && voidElements[tag] !== true) {
            out('</');
            out(tag);
            out('>');
          } // eslint-disable-next-line eqeqeq


          if (tag == ignoreCurrentElement) {
            ignoreCurrentElement = false;
          }
        },
        chars: function chars(_chars) {
          if (!ignoreCurrentElement) {
            out(encodeEntities(_chars));
          }
        }
      };
    }
    /**
     * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1' attribute to declare
     * ns1 namespace and prefixes the attribute with 'ns1' (e.g. 'ns1:xlink:foo'). This is undesirable since we don't want
     * to allow any of these custom attributes. This method strips them all.
     *
     * @param node Root element to process
     */


    function stripCustomNsAttrs(node) {
      while (node) {
        if (node.nodeType === window.Node.ELEMENT_NODE) {
          var attrs = node.attributes;

          for (var i = 0, l = attrs.length; i < l; i++) {
            var attrNode = attrs[i];
            var attrName = attrNode.name.toLowerCase();

            if (attrName === 'xmlns:ns1' || attrName.lastIndexOf('ns1:', 0) === 0) {
              node.removeAttributeNode(attrNode);
              i--;
              l--;
            }
          }
        }

        var nextNode = node.firstChild;

        if (nextNode) {
          stripCustomNsAttrs(nextNode);
        }

        node = getNonDescendant('nextSibling', node);
      }
    }

    function getNonDescendant(propName, node) {
      // An element is clobbered if its `propName` property points to one of its descendants
      var nextNode = node[propName];

      if (nextNode && nodeContains.call(node, nextNode)) {
        throw $sanitizeMinErr('elclob', 'Failed to sanitize html because the element is clobbered: {0}', node.outerHTML || node.outerText);
      }

      return nextNode;
    }
  }

  function sanitizeText(chars) {
    var buf = [];
    var writer = htmlSanitizeWriter(buf, noop);
    writer.chars(chars);
    return buf.join('');
  } // define ngSanitize module and register $sanitize service


  angular.module('ngSanitize', []).provider('$sanitize', $SanitizeProvider).info({
    angularVersion: '1.7.8'
  });
  /**
   * @ngdoc filter
   * @name linky
   * @kind function
   *
   * @description
   * Finds links in text input and turns them into html links. Supports `http/https/ftp/sftp/mailto` and
   * plain email address links.
   *
   * Requires the {@link ngSanitize `ngSanitize`} module to be installed.
   *
   * @param {string} text Input text.
   * @param {string} [target] Window (`_blank|_self|_parent|_top`) or named frame to open links in.
   * @param {object|function(url)} [attributes] Add custom attributes to the link element.
   *
   *    Can be one of:
   *
   *    - `object`: A map of attributes
   *    - `function`: Takes the url as a parameter and returns a map of attributes
   *
   *    If the map of attributes contains a value for `target`, it overrides the value of
   *    the target parameter.
   *
   *
   * @returns {string} Html-linkified and {@link $sanitize sanitized} text.
   *
   * @usage
     <span ng-bind-html="linky_expression | linky"></span>
   *
   * @example
     <example module="linkyExample" deps="angular-sanitize.js" name="linky-filter">
       <file name="index.html">
         <div ng-controller="ExampleController">
         Snippet: <textarea ng-model="snippet" cols="60" rows="3"></textarea>
         <table>
           <tr>
             <th>Filter</th>
             <th>Source</th>
             <th>Rendered</th>
           </tr>
           <tr id="linky-filter">
             <td>linky filter</td>
             <td>
               <pre>&lt;div ng-bind-html="snippet | linky"&gt;<br>&lt;/div&gt;</pre>
             </td>
             <td>
               <div ng-bind-html="snippet | linky"></div>
             </td>
           </tr>
           <tr id="linky-target">
            <td>linky target</td>
            <td>
              <pre>&lt;div ng-bind-html="snippetWithSingleURL | linky:'_blank'"&gt;<br>&lt;/div&gt;</pre>
            </td>
            <td>
              <div ng-bind-html="snippetWithSingleURL | linky:'_blank'"></div>
            </td>
           </tr>
           <tr id="linky-custom-attributes">
            <td>linky custom attributes</td>
            <td>
              <pre>&lt;div ng-bind-html="snippetWithSingleURL | linky:'_self':{rel: 'nofollow'}"&gt;<br>&lt;/div&gt;</pre>
            </td>
            <td>
              <div ng-bind-html="snippetWithSingleURL | linky:'_self':{rel: 'nofollow'}"></div>
            </td>
           </tr>
           <tr id="escaped-html">
             <td>no filter</td>
             <td><pre>&lt;div ng-bind="snippet"&gt;<br>&lt;/div&gt;</pre></td>
             <td><div ng-bind="snippet"></div></td>
           </tr>
         </table>
       </file>
       <file name="script.js">
         angular.module('linkyExample', ['ngSanitize'])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.snippet =
               'Pretty text with some links:\n' +
               'http://angularjs.org/,\n' +
               'mailto:us@somewhere.org,\n' +
               'another@somewhere.org,\n' +
               'and one more: ftp://127.0.0.1/.';
             $scope.snippetWithSingleURL = 'http://angularjs.org/';
           }]);
       </file>
       <file name="protractor.js" type="protractor">
         it('should linkify the snippet with urls', function() {
           expect(element(by.id('linky-filter')).element(by.binding('snippet | linky')).getText()).
               toBe('Pretty text with some links: http://angularjs.org/, us@somewhere.org, ' +
                    'another@somewhere.org, and one more: ftp://127.0.0.1/.');
           expect(element.all(by.css('#linky-filter a')).count()).toEqual(4);
         });
  
         it('should not linkify snippet without the linky filter', function() {
           expect(element(by.id('escaped-html')).element(by.binding('snippet')).getText()).
               toBe('Pretty text with some links: http://angularjs.org/, mailto:us@somewhere.org, ' +
                    'another@somewhere.org, and one more: ftp://127.0.0.1/.');
           expect(element.all(by.css('#escaped-html a')).count()).toEqual(0);
         });
  
         it('should update', function() {
           element(by.model('snippet')).clear();
           element(by.model('snippet')).sendKeys('new http://link.');
           expect(element(by.id('linky-filter')).element(by.binding('snippet | linky')).getText()).
               toBe('new http://link.');
           expect(element.all(by.css('#linky-filter a')).count()).toEqual(1);
           expect(element(by.id('escaped-html')).element(by.binding('snippet')).getText())
               .toBe('new http://link.');
         });
  
         it('should work with the target property', function() {
          expect(element(by.id('linky-target')).
              element(by.binding("snippetWithSingleURL | linky:'_blank'")).getText()).
              toBe('http://angularjs.org/');
          expect(element(by.css('#linky-target a')).getAttribute('target')).toEqual('_blank');
         });
  
         it('should optionally add custom attributes', function() {
          expect(element(by.id('linky-custom-attributes')).
              element(by.binding("snippetWithSingleURL | linky:'_self':{rel: 'nofollow'}")).getText()).
              toBe('http://angularjs.org/');
          expect(element(by.css('#linky-custom-attributes a')).getAttribute('rel')).toEqual('nofollow');
         });
       </file>
     </example>
   */

  angular.module('ngSanitize').filter('linky', ['$sanitize', function ($sanitize) {
    var LINKY_URL_REGEXP = /((s?ftp|https?):\/\/|(www\.)|(mailto:)?[A-Za-z0-9._%+-]+@)\S*[^\s.;,(){}<>"\u201d\u2019]/i,
        MAILTO_REGEXP = /^mailto:/i;
    var linkyMinErr = angular.$$minErr('linky');
    var isDefined = angular.isDefined;
    var isFunction = angular.isFunction;
    var isObject = angular.isObject;
    var isString = angular.isString;
    return function (text, target, attributes) {
      if (text == null || text === '') return text;
      if (!isString(text)) throw linkyMinErr('notstring', 'Expected string but received: {0}', text);
      var attributesFn = isFunction(attributes) ? attributes : isObject(attributes) ? function getAttributesObject() {
        return attributes;
      } : function getEmptyAttributesObject() {
        return {};
      };
      var match;
      var raw = text;
      var html = [];
      var url;
      var i;

      while (match = raw.match(LINKY_URL_REGEXP)) {
        // We can not end in these as they are sometimes found at the end of the sentence
        url = match[0]; // if we did not match ftp/http/www/mailto then assume mailto

        if (!match[2] && !match[4]) {
          url = (match[3] ? 'http://' : 'mailto:') + url;
        }

        i = match.index;
        addText(raw.substr(0, i));
        addLink(url, match[0].replace(MAILTO_REGEXP, ''));
        raw = raw.substring(i + match[0].length);
      }

      addText(raw);
      return $sanitize(html.join(''));

      function addText(text) {
        if (!text) {
          return;
        }

        html.push(sanitizeText(text));
      }

      function addLink(url, text) {
        var key,
            linkAttributes = attributesFn(url);
        html.push('<a ');

        for (key in linkAttributes) {
          html.push(key + '="' + linkAttributes[key] + '" ');
        }

        if (isDefined(target) && !('target' in linkAttributes)) {
          html.push('target="', target, '" ');
        }

        html.push('href="', url.replace(/"/g, '&quot;'), '">');
        addText(text);
        html.push('</a>');
      }
    };
  }]);
})(window, window.angular);

(function () {
  var app = angular.module('autocomplete', ['ui.select', 'ngSanitize']);
  app.factory('apiHelper', ['$http', '$q', apiHelper]);

  function apiHelper($http, $q) {
    return {
      get: function get(url) {
        var defer = $q.defer();
        $http.get(url).then(function (response) {
          if (response.data) {
            defer.resolve(response.data);
          } else {
            defer.reject(error);
          }
        });
        return defer.promise;
      }
    };
  }

  app.factory('commonHelper', ['apiHelper', '$timeout', commonHelper]);

  function commonHelper(apiHelper, $timeout) {
    return {
      scrollUiSelect: function scrollUiSelect() {
        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            id = _ref.id,
            isOpen = _ref.isOpen,
            api = _ref.api,
            scope = _ref.scope;

        var timeout, onScrollUiSelectChoices;
        var uiSelectChoices = angular.element("#".concat(id)).controller('uiSelect').$element.find('.ui-select-choices');

        if (!isOpen) {
          uiSelectChoices[0].removeEventListener('scroll', onScrollUiSelectChoices);
          $timeout.cancel(timeout);
        } // const conditionHeight = (OffsetTopElement('load-next') - (ScrollY() + WindowHeight()) >= 200)


        if (isOpen) {
          var busyWithApi = false;

          onScrollUiSelectChoices = function onScrollUiSelectChoices(event) {
            var scrollTop = event.target.scrollTop;
            var offsetHeight = event.target.offsetHeight;
            var scrollHeight = event.target.scrollHeight;
            var isAllowedToCallApi = parseInt(offsetHeight) + parseInt(scrollTop) + 10 > parseInt(scrollHeight);

            if (isAllowedToCallApi && !busyWithApi) {
              busyWithApi = true;
              console.log(api);
              timeout = $timeout(function () {
                busyWithApi = false;
              }, 1000);
            }
          };

          uiSelectChoices[0].addEventListener('scroll', onScrollUiSelectChoices);
        }

        return scope;
      }
    };
  }

  app.controller('mainController', ['$scope', 'apiHelper', '$log', 'commonHelper', mainController]);

  function mainController($scope, apiHelper, $log, commonHelper) {
    $scope.form = {
      person: ""
    };
    $scope.people = [];
    $scope.peopeleSearch = [];
    $scope.suggestion = "";

    var updateSearchUiPlaceholder = function updateSearchUiPlaceholder(placeholder) {
      $scope.suggestion = placeholder;
    };

    var updatePlaceHolder = function updatePlaceHolder() {
      if ($scope.people.length == 1) {
        var _$scope$people$ = $scope.people[0],
            name = _$scope$people$.name,
            email = _$scope$people$.email,
            age = _$scope$people$.age,
            country = _$scope$people$.country;
        updateSearchUiPlaceholder("".concat(name, " - ").concat(email, " - ").concat(age, " - ").concat(country));
      } else {
        updateSearchUiPlaceholder('');
      }
    };

    $scope.refreshPeople = function (search) {
      if (search) {
        $scope.people = $scope.peopleSearch.filter(function (person) {
          var name = person.name,
              email = person.email,
              country = person.country;
          var filterCondition = name.toLowerCase().indexOf(search.toLowerCase()) > -1 || email.toLowerCase().indexOf(search.toLowerCase()) > -1 || country.toLowerCase().indexOf(search.toLowerCase()) > -1;

          if (filterCondition) {
            return person;
          }
        });
        updatePlaceHolder();
        return;
      }

      var onSuccessPeople = function onSuccessPeople(response) {
        $scope.people = angular.copy(response.people);
        $scope.peopleSearch = angular.copy(response.people);
        $scope.improvedPlaceholder = "";
      };

      var onErrorPeople = function onErrorPeople(error) {
        return $log.debug(error);
      };

      apiHelper.get('people.json').then(onSuccessPeople)["catch"](onErrorPeople);
    };

    $scope.onOpenClose = function (isOpen) {
      commonHelper.scrollUiSelect({
        id: 'people-ui-select',
        isOpen: isOpen,
        api: 'pharmarcy.items',
        scope: $scope.people
      });

      if (!isOpen) {
        $scope.suggestion = "";
      }
    };
  }
})();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
