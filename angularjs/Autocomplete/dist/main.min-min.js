"use strict";function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}!function(e,t){"object"===("undefined"==typeof module?"undefined":_typeof(module))&&"object"===_typeof(module.exports)?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:void 0,function(e,t){var n=[],r=e.document,i=Object.getPrototypeOf,o=n.slice,a=n.concat,s=n.push,c=n.indexOf,u={},l=u.toString,f=u.hasOwnProperty,p=f.toString,d=p.call(Object),h={},$=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},g=function(e){return null!=e&&e===e.window},m={type:!0,src:!0,nonce:!0,noModule:!0};function v(e,t,n){var i,o,a=(n=n||r).createElement("script");if(a.text=e,t)for(i in m)(o=t[i]||t.getAttribute&&t.getAttribute(i))&&a.setAttribute(i,o);n.head.appendChild(a).parentNode.removeChild(a)}function y(e){return null==e?e+"":"object"===_typeof(e)||"function"==typeof e?u[l.call(e)]||"object":_typeof(e)}var b="3.4.0 -ajax,-ajax/jsonp,-ajax/load,-ajax/parseXML,-ajax/script,-ajax/var/location,-ajax/var/nonce,-ajax/var/rquery,-ajax/xhr,-manipulation/_evalUrl,-event/ajax,-effects,-effects/Tween,-effects/animatedSelector",x=function e(t,n){return new e.fn.init(t,n)},w=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function C(e){var t=!!e&&"length"in e&&e.length,n=y(e);return!$(e)&&!g(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}x.fn=x.prototype={jquery:b,constructor:x,length:0,toArray:function(){return o.call(this)},get:function(e){return null==e?o.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=x.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return x.each(this,e)},map:function(e){return this.pushStack(x.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(o.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:s,sort:n.sort,splice:n.splice},x.extend=x.fn.extend=function(){var e,t,n,r,i,o,a=arguments[0]||{},s=1,c=arguments.length,u=!1;for("boolean"==typeof a&&(u=a,a=arguments[s]||{},s++),"object"===_typeof(a)||$(a)||(a={}),s===c&&(a=this,s--);s<c;s++)if(null!=(e=arguments[s]))for(t in e)r=e[t],"__proto__"!==t&&a!==r&&(u&&r&&(x.isPlainObject(r)||(i=Array.isArray(r)))?(n=a[t],o=i&&!Array.isArray(n)?[]:i||x.isPlainObject(n)?n:{},i=!1,a[t]=x.extend(u,o,r)):void 0!==r&&(a[t]=r));return a},x.extend({expando:"jQuery"+(b+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==l.call(e))&&(!(t=i(e))||"function"==typeof(n=f.call(t,"constructor")&&t.constructor)&&p.call(n)===d)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t){v(e,{nonce:t&&t.nonce})},each:function(e,t){var n,r=0;if(C(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},trim:function(e){return null==e?"":(e+"").replace(w,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(C(Object(e))?x.merge(n,"string"==typeof e?[e]:e):s.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:c.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r=[],i=0,o=e.length,a=!n;i<o;i++)!t(e[i],i)!==a&&r.push(e[i]);return r},map:function(e,t,n){var r,i,o=0,s=[];if(C(e))for(r=e.length;o<r;o++)null!=(i=t(e[o],o,n))&&s.push(i);else for(o in e)null!=(i=t(e[o],o,n))&&s.push(i);return a.apply([],s)},guid:1,support:h}),"function"==typeof Symbol&&(x.fn[Symbol.iterator]=n[Symbol.iterator]),x.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){u["[object "+t+"]"]=t.toLowerCase()});var E=function(e){var t,n,r,i,o,a,s,c,u,l,f,p,d,h,$,g,m,v,y,b="sizzle"+1*new Date,x=e.document,w=0,C=0,E=ce(),S=ce(),k=ce(),A=ce(),T=function(e,t){return e===t&&(f=!0),0},O={}.hasOwnProperty,M=[],N=M.pop,D=M.push,I=M.push,P=M.slice,L=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},R="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",V="[\\x20\\t\\r\\n\\f]",j="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",q="\\["+V+"*("+j+")(?:"+V+"*([*^$|!~]?=)"+V+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+j+"))|)"+V+"*\\]",F=":("+j+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+q+")*)|.*)\\)|)",U=new RegExp(V+"+","g"),_=new RegExp("^"+V+"+|((?:^|[^\\\\])(?:\\\\.)*)"+V+"+$","g"),H=new RegExp("^"+V+"*,"+V+"*"),B=new RegExp("^"+V+"*([>+~]|"+V+")"+V+"*"),z=new RegExp(V+"|>"),W=new RegExp(F),G=new RegExp("^"+j+"$"),K={ID:new RegExp("^#("+j+")"),CLASS:new RegExp("^\\.("+j+")"),TAG:new RegExp("^("+j+"|[*])"),ATTR:new RegExp("^"+q),PSEUDO:new RegExp("^"+F),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+V+"*(even|odd|(([+-]|)(\\d*)n|)"+V+"*(?:([+-]|)"+V+"*(\\d+)|))"+V+"*\\)|)","i"),bool:new RegExp("^(?:"+R+")$","i"),needsContext:new RegExp("^"+V+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+V+"*((?:-\\d)?\\d*)"+V+"*\\)|)(?=[^-]|$)","i")},Y=/HTML$/i,J=/^(?:input|select|textarea|button)$/i,X=/^h\d$/i,Z=/^[^{]+\{\s*\[native \w/,Q=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=new RegExp("\\\\([\\da-f]{1,6}"+V+"?|("+V+")|.)","ig"),ne=function(e,t,n){var r="0x"+t-65536;return r!=r||n?t:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},re=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ie=function(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},oe=function(){p()},ae=be(function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()},{dir:"parentNode",next:"legend"});try{I.apply(M=P.call(x.childNodes),x.childNodes),M[x.childNodes.length].nodeType}catch(e){I={apply:M.length?function(e,t){D.apply(e,P.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}function se(e,t,r,i){var o,s,u,l,f,h,m,v=t&&t.ownerDocument,w=t?t.nodeType:9;if(r=r||[],"string"!=typeof e||!e||1!==w&&9!==w&&11!==w)return r;if(!i&&((t?t.ownerDocument||t:x)!==d&&p(t),t=t||d,$)){if(11!==w&&(f=Q.exec(e)))if(o=f[1]){if(9===w){if(!(u=t.getElementById(o)))return r;if(u.id===o)return r.push(u),r}else if(v&&(u=v.getElementById(o))&&y(t,u)&&u.id===o)return r.push(u),r}else{if(f[2])return I.apply(r,t.getElementsByTagName(e)),r;if((o=f[3])&&n.getElementsByClassName&&t.getElementsByClassName)return I.apply(r,t.getElementsByClassName(o)),r}if(n.qsa&&!A[e+" "]&&(!g||!g.test(e))&&(1!==w||"object"!==t.nodeName.toLowerCase())){if(m=e,v=t,1===w&&z.test(e)){for((l=t.getAttribute("id"))?l=l.replace(re,ie):t.setAttribute("id",l=b),s=(h=a(e)).length;s--;)h[s]="#"+l+" "+ye(h[s]);m=h.join(","),v=ee.test(e)&&me(t.parentNode)||t}try{return I.apply(r,v.querySelectorAll(m)),r}catch(t){A(e,!0)}finally{l===b&&t.removeAttribute("id")}}}return c(e.replace(_,"$1"),t,r,i)}function ce(){var e=[];return function t(n,i){return e.push(n+" ")>r.cacheLength&&delete t[e.shift()],t[n+" "]=i}}function ue(e){return e[b]=!0,e}function le(e){var t=d.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function fe(e,t){for(var n=e.split("|"),i=n.length;i--;)r.attrHandle[n[i]]=t}function pe(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function de(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function he(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function $e(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&ae(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function ge(e){return ue(function(t){return t=+t,ue(function(n,r){for(var i,o=e([],n.length,t),a=o.length;a--;)n[i=o[a]]&&(n[i]=!(r[i]=n[i]))})})}function me(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=se.support={},o=se.isXML=function(e){var t=e.namespaceURI,n=(e.ownerDocument||e).documentElement;return!Y.test(t||n&&n.nodeName||"HTML")},p=se.setDocument=function(e){var t,i,a=e?e.ownerDocument||e:x;return a!==d&&9===a.nodeType&&a.documentElement?(h=(d=a).documentElement,$=!o(d),x!==d&&(i=d.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",oe,!1):i.attachEvent&&i.attachEvent("onunload",oe)),n.attributes=le(function(e){return e.className="i",!e.getAttribute("className")}),n.getElementsByTagName=le(function(e){return e.appendChild(d.createComment("")),!e.getElementsByTagName("*").length}),n.getElementsByClassName=Z.test(d.getElementsByClassName),n.getById=le(function(e){return h.appendChild(e).id=b,!d.getElementsByName||!d.getElementsByName(b).length}),n.getById?(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute("id")===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&$){var n=t.getElementById(e);return n?[n]:[]}}):(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&$){var n,r,i,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];for(i=t.getElementsByName(e),r=0;o=i[r++];)if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),r.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[i++];)1===n.nodeType&&r.push(n);return r}return o},r.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&$)return t.getElementsByClassName(e)},m=[],g=[],(n.qsa=Z.test(d.querySelectorAll))&&(le(function(e){h.appendChild(e).innerHTML="<a id='"+b+"'></a><select id='"+b+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&g.push("[*^$]="+V+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||g.push("\\["+V+"*(?:value|"+R+")"),e.querySelectorAll("[id~="+b+"-]").length||g.push("~="),e.querySelectorAll(":checked").length||g.push(":checked"),e.querySelectorAll("a#"+b+"+*").length||g.push(".#.+[+~]")}),le(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=d.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&g.push("name"+V+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&g.push(":enabled",":disabled"),h.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&g.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),g.push(",.*:")})),(n.matchesSelector=Z.test(v=h.matches||h.webkitMatchesSelector||h.mozMatchesSelector||h.oMatchesSelector||h.msMatchesSelector))&&le(function(e){n.disconnectedMatch=v.call(e,"*"),v.call(e,"[s!='']:x"),m.push("!=",F)}),g=g.length&&new RegExp(g.join("|")),m=m.length&&new RegExp(m.join("|")),t=Z.test(h.compareDocumentPosition),y=t||Z.test(h.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},T=t?function(e,t){if(e===t)return f=!0,0;var r=!e.compareDocumentPosition-!t.compareDocumentPosition;return r||(1&(r=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===r?e===d||e.ownerDocument===x&&y(x,e)?-1:t===d||t.ownerDocument===x&&y(x,t)?1:l?L(l,e)-L(l,t):0:4&r?-1:1)}:function(e,t){if(e===t)return f=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,a=[e],s=[t];if(!i||!o)return e===d?-1:t===d?1:i?-1:o?1:l?L(l,e)-L(l,t):0;if(i===o)return pe(e,t);for(n=e;n=n.parentNode;)a.unshift(n);for(n=t;n=n.parentNode;)s.unshift(n);for(;a[r]===s[r];)r++;return r?pe(a[r],s[r]):a[r]===x?-1:s[r]===x?1:0},d):d},se.matches=function(e,t){return se(e,null,null,t)},se.matchesSelector=function(e,t){if((e.ownerDocument||e)!==d&&p(e),n.matchesSelector&&$&&!A[t+" "]&&(!m||!m.test(t))&&(!g||!g.test(t)))try{var r=v.call(e,t);if(r||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){A(t,!0)}return se(t,d,null,[e]).length>0},se.contains=function(e,t){return(e.ownerDocument||e)!==d&&p(e),y(e,t)},se.attr=function(e,t){(e.ownerDocument||e)!==d&&p(e);var i=r.attrHandle[t.toLowerCase()],o=i&&O.call(r.attrHandle,t.toLowerCase())?i(e,t,!$):void 0;return void 0!==o?o:n.attributes||!$?e.getAttribute(t):(o=e.getAttributeNode(t))&&o.specified?o.value:null},se.escape=function(e){return(e+"").replace(re,ie)},se.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},se.uniqueSort=function(e){var t,r=[],i=0,o=0;if(f=!n.detectDuplicates,l=!n.sortStable&&e.slice(0),e.sort(T),f){for(;t=e[o++];)t===e[o]&&(i=r.push(o));for(;i--;)e.splice(r[i],1)}return l=null,e},i=se.getText=function(e){var t,n="",r=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=i(e)}else if(3===o||4===o)return e.nodeValue}else for(;t=e[r++];)n+=i(t);return n},(r=se.selectors={cacheLength:50,createPseudo:ue,match:K,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||se.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&se.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return K.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&W.test(n)&&(t=a(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=E[e+" "];return t||(t=new RegExp("(^|"+V+")"+e+"("+V+"|$)"))&&E(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,t,n){return function(r){var i=se.attr(r,e);return null==i?"!="===t:!t||(i+="","="===t?i===n:"!="===t?i!==n:"^="===t?n&&0===i.indexOf(n):"*="===t?n&&i.indexOf(n)>-1:"$="===t?n&&i.slice(-n.length)===n:"~="===t?(" "+i.replace(U," ")+" ").indexOf(n)>-1:"|="===t&&(i===n||i.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,r,i){var o="nth"!==e.slice(0,3),a="last"!==e.slice(-4),s="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,c){var u,l,f,p,d,h,$=o!==a?"nextSibling":"previousSibling",g=t.parentNode,m=s&&t.nodeName.toLowerCase(),v=!c&&!s,y=!1;if(g){if(o){for(;$;){for(p=t;p=p[$];)if(s?p.nodeName.toLowerCase()===m:1===p.nodeType)return!1;h=$="only"===e&&!h&&"nextSibling"}return!0}if(h=[a?g.firstChild:g.lastChild],a&&v){for(y=(d=(u=(l=(f=(p=g)[b]||(p[b]={}))[p.uniqueID]||(f[p.uniqueID]={}))[e]||[])[0]===w&&u[1])&&u[2],p=d&&g.childNodes[d];p=++d&&p&&p[$]||(y=d=0)||h.pop();)if(1===p.nodeType&&++y&&p===t){l[e]=[w,d,y];break}}else if(v&&(y=d=(u=(l=(f=(p=t)[b]||(p[b]={}))[p.uniqueID]||(f[p.uniqueID]={}))[e]||[])[0]===w&&u[1]),!1===y)for(;(p=++d&&p&&p[$]||(y=d=0)||h.pop())&&((s?p.nodeName.toLowerCase()!==m:1!==p.nodeType)||!++y||(v&&((l=(f=p[b]||(p[b]={}))[p.uniqueID]||(f[p.uniqueID]={}))[e]=[w,y]),p!==t)););return(y-=i)===r||y%r==0&&y/r>=0}}},PSEUDO:function(e,t){var n,i=r.pseudos[e]||r.setFilters[e.toLowerCase()]||se.error("unsupported pseudo: "+e);return i[b]?i(t):i.length>1?(n=[e,e,"",t],r.setFilters.hasOwnProperty(e.toLowerCase())?ue(function(e,n){for(var r,o=i(e,t),a=o.length;a--;)e[r=L(e,o[a])]=!(n[r]=o[a])}):function(e){return i(e,0,n)}):i}},pseudos:{not:ue(function(e){var t=[],n=[],r=s(e.replace(_,"$1"));return r[b]?ue(function(e,t,n,i){for(var o,a=r(e,null,i,[]),s=e.length;s--;)(o=a[s])&&(e[s]=!(t[s]=o))}):function(e,i,o){return t[0]=e,r(t,null,o,n),t[0]=null,!n.pop()}}),has:ue(function(e){return function(t){return se(e,t).length>0}}),contains:ue(function(e){return e=e.replace(te,ne),function(t){return(t.textContent||i(t)).indexOf(e)>-1}}),lang:ue(function(e){return G.test(e||"")||se.error("unsupported lang: "+e),e=e.replace(te,ne).toLowerCase(),function(t){var n;do{if(n=$?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===h},focus:function(e){return e===d.activeElement&&(!d.hasFocus||d.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:$e(!1),disabled:$e(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!r.pseudos.empty(e)},header:function(e){return X.test(e.nodeName)},input:function(e){return J.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:ge(function(){return[0]}),last:ge(function(e,t){return[t-1]}),eq:ge(function(e,t,n){return[n<0?n+t:n]}),even:ge(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:ge(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:ge(function(e,t,n){for(var r=n<0?n+t:n>t?t:n;--r>=0;)e.push(r);return e}),gt:ge(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}}).pseudos.nth=r.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[t]=de(t);for(t in{submit:!0,reset:!0})r.pseudos[t]=he(t);function ve(){}function ye(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function be(e,t,n){var r=t.dir,i=t.next,o=i||r,a=n&&"parentNode"===o,s=C++;return t.first?function(t,n,i){for(;t=t[r];)if(1===t.nodeType||a)return e(t,n,i);return!1}:function(t,n,c){var u,l,f,p=[w,s];if(c){for(;t=t[r];)if((1===t.nodeType||a)&&e(t,n,c))return!0}else for(;t=t[r];)if(1===t.nodeType||a)if(l=(f=t[b]||(t[b]={}))[t.uniqueID]||(f[t.uniqueID]={}),i&&i===t.nodeName.toLowerCase())t=t[r]||t;else{if((u=l[o])&&u[0]===w&&u[1]===s)return p[2]=u[2];if(l[o]=p,p[2]=e(t,n,c))return!0}return!1}}function xe(e){return e.length>1?function(t,n,r){for(var i=e.length;i--;)if(!e[i](t,n,r))return!1;return!0}:e[0]}function we(e,t,n,r,i){for(var o,a=[],s=0,c=e.length,u=null!=t;s<c;s++)(o=e[s])&&(n&&!n(o,r,i)||(a.push(o),u&&t.push(s)));return a}function Ce(e,t,n,r,i,o){return r&&!r[b]&&(r=Ce(r)),i&&!i[b]&&(i=Ce(i,o)),ue(function(o,a,s,c){var u,l,f,p=[],d=[],h=a.length,$=o||function(e,t,n){for(var r=0,i=t.length;r<i;r++)se(e,t[r],n);return n}(t||"*",s.nodeType?[s]:s,[]),g=!e||!o&&t?$:we($,p,e,s,c),m=n?i||(o?e:h||r)?[]:a:g;if(n&&n(g,m,s,c),r)for(u=we(m,d),r(u,[],s,c),l=u.length;l--;)(f=u[l])&&(m[d[l]]=!(g[d[l]]=f));if(o){if(i||e){if(i){for(u=[],l=m.length;l--;)(f=m[l])&&u.push(g[l]=f);i(null,m=[],u,c)}for(l=m.length;l--;)(f=m[l])&&(u=i?L(o,f):p[l])>-1&&(o[u]=!(a[u]=f))}}else m=we(m===a?m.splice(h,m.length):m),i?i(null,a,m,c):I.apply(a,m)})}function Ee(e){for(var t,n,i,o=e.length,a=r.relative[e[0].type],s=a||r.relative[" "],c=a?1:0,l=be(function(e){return e===t},s,!0),f=be(function(e){return L(t,e)>-1},s,!0),p=[function(e,n,r){var i=!a&&(r||n!==u)||((t=n).nodeType?l(e,n,r):f(e,n,r));return t=null,i}];c<o;c++)if(n=r.relative[e[c].type])p=[be(xe(p),n)];else{if((n=r.filter[e[c].type].apply(null,e[c].matches))[b]){for(i=++c;i<o&&!r.relative[e[i].type];i++);return Ce(c>1&&xe(p),c>1&&ye(e.slice(0,c-1).concat({value:" "===e[c-2].type?"*":""})).replace(_,"$1"),n,c<i&&Ee(e.slice(c,i)),i<o&&Ee(e=e.slice(i)),i<o&&ye(e))}p.push(n)}return xe(p)}return ve.prototype=r.filters=r.pseudos,r.setFilters=new ve,a=se.tokenize=function(e,t){var n,i,o,a,s,c,u,l=S[e+" "];if(l)return t?0:l.slice(0);for(s=e,c=[],u=r.preFilter;s;){for(a in n&&!(i=H.exec(s))||(i&&(s=s.slice(i[0].length)||s),c.push(o=[])),n=!1,(i=B.exec(s))&&(n=i.shift(),o.push({value:n,type:i[0].replace(_," ")}),s=s.slice(n.length)),r.filter)!(i=K[a].exec(s))||u[a]&&!(i=u[a](i))||(n=i.shift(),o.push({value:n,type:a,matches:i}),s=s.slice(n.length));if(!n)break}return t?s.length:s?se.error(e):S(e,c).slice(0)},s=se.compile=function(e,t){var n,i=[],o=[],s=k[e+" "];if(!s){for(t||(t=a(e)),n=t.length;n--;)(s=Ee(t[n]))[b]?i.push(s):o.push(s);(s=k(e,function(e,t){var n=t.length>0,i=e.length>0,o=function(o,a,s,c,l){var f,h,g,m=0,v="0",y=o&&[],b=[],x=u,C=o||i&&r.find.TAG("*",l),E=w+=null==x?1:Math.random()||.1,S=C.length;for(l&&(u=a===d||a||l);v!==S&&null!=(f=C[v]);v++){if(i&&f){for(h=0,a||f.ownerDocument===d||(p(f),s=!$);g=e[h++];)if(g(f,a||d,s)){c.push(f);break}l&&(w=E)}n&&((f=!g&&f)&&m--,o&&y.push(f))}if(m+=v,n&&v!==m){for(h=0;g=t[h++];)g(y,b,a,s);if(o){if(m>0)for(;v--;)y[v]||b[v]||(b[v]=N.call(c));b=we(b)}I.apply(c,b),l&&!o&&b.length>0&&m+t.length>1&&se.uniqueSort(c)}return l&&(w=E,u=x),y};return n?ue(o):o}(o,i))).selector=e}return s},c=se.select=function(e,t,n,i){var o,c,u,l,f,p="function"==typeof e&&e,d=!i&&a(e=p.selector||e);if(n=n||[],1===d.length){if((c=d[0]=d[0].slice(0)).length>2&&"ID"===(u=c[0]).type&&9===t.nodeType&&$&&r.relative[c[1].type]){if(!(t=(r.find.ID(u.matches[0].replace(te,ne),t)||[])[0]))return n;p&&(t=t.parentNode),e=e.slice(c.shift().value.length)}for(o=K.needsContext.test(e)?0:c.length;o--&&(u=c[o],!r.relative[l=u.type]);)if((f=r.find[l])&&(i=f(u.matches[0].replace(te,ne),ee.test(c[0].type)&&me(t.parentNode)||t))){if(c.splice(o,1),!(e=i.length&&ye(c)))return I.apply(n,i),n;break}}return(p||s(e,d))(i,t,!$,n,!t||ee.test(e)&&me(t.parentNode)||t),n},n.sortStable=b.split("").sort(T).join("")===b,n.detectDuplicates=!!f,p(),n.sortDetached=le(function(e){return 1&e.compareDocumentPosition(d.createElement("fieldset"))}),le(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||fe("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),n.attributes&&le(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||fe("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),le(function(e){return null==e.getAttribute("disabled")})||fe(R,function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),se}(e);x.find=E,x.expr=E.selectors,x.expr[":"]=x.expr.pseudos,x.uniqueSort=x.unique=E.uniqueSort,x.text=E.getText,x.isXMLDoc=E.isXML,x.contains=E.contains,x.escapeSelector=E.escape;var S=function(e,t,n){for(var r=[],i=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(i&&x(e).is(n))break;r.push(e)}return r},k=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},A=x.expr.match.needsContext;function T(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var O=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function M(e,t,n){return $(t)?x.grep(e,function(e,r){return!!t.call(e,r,e)!==n}):t.nodeType?x.grep(e,function(e){return e===t!==n}):"string"!=typeof t?x.grep(e,function(e){return c.call(t,e)>-1!==n}):x.filter(t,e,n)}x.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?x.find.matchesSelector(r,e)?[r]:[]:x.find.matches(e,x.grep(t,function(e){return 1===e.nodeType}))},x.fn.extend({find:function(e){var t,n,r=this.length,i=this;if("string"!=typeof e)return this.pushStack(x(e).filter(function(){for(t=0;t<r;t++)if(x.contains(i[t],this))return!0}));for(n=this.pushStack([]),t=0;t<r;t++)x.find(e,i[t],n);return r>1?x.uniqueSort(n):n},filter:function(e){return this.pushStack(M(this,e||[],!1))},not:function(e){return this.pushStack(M(this,e||[],!0))},is:function(e){return!!M(this,"string"==typeof e&&A.test(e)?x(e):e||[],!1).length}});var N,D=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(x.fn.init=function(e,t,n){var i,o;if(!e)return this;if(n=n||N,"string"==typeof e){if(!(i="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:D.exec(e))||!i[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(i[1]){if(t=t instanceof x?t[0]:t,x.merge(this,x.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:r,!0)),O.test(i[1])&&x.isPlainObject(t))for(i in t)$(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}return(o=r.getElementById(i[2]))&&(this[0]=o,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):$(e)?void 0!==n.ready?n.ready(e):e(x):x.makeArray(e,this)}).prototype=x.fn,N=x(r);var I=/^(?:parents|prev(?:Until|All))/,P={children:!0,contents:!0,next:!0,prev:!0};function L(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}x.fn.extend({has:function(e){var t=x(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(x.contains(this,t[e]))return!0})},closest:function(e,t){var n,r=0,i=this.length,o=[],a="string"!=typeof e&&x(e);if(!A.test(e))for(;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&x.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?x.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?c.call(x(e),this[0]):c.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(x.uniqueSort(x.merge(this.get(),x(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),x.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return S(e,"parentNode")},parentsUntil:function(e,t,n){return S(e,"parentNode",n)},next:function(e){return L(e,"nextSibling")},prev:function(e){return L(e,"previousSibling")},nextAll:function(e){return S(e,"nextSibling")},prevAll:function(e){return S(e,"previousSibling")},nextUntil:function(e,t,n){return S(e,"nextSibling",n)},prevUntil:function(e,t,n){return S(e,"previousSibling",n)},siblings:function(e){return k((e.parentNode||{}).firstChild,e)},children:function(e){return k(e.firstChild)},contents:function(e){return void 0!==e.contentDocument?e.contentDocument:(T(e,"template")&&(e=e.content||e),x.merge([],e.childNodes))}},function(e,t){x.fn[e]=function(n,r){var i=x.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=x.filter(r,i)),this.length>1&&(P[e]||x.uniqueSort(i),I.test(e)&&i.reverse()),this.pushStack(i)}});var R=/[^\x20\t\r\n\f]+/g;function V(e){return e}function j(e){throw e}function q(e,t,n,r){var i;try{e&&$(i=e.promise)?i.call(e).done(t).fail(n):e&&$(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}x.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return x.each(e.match(R)||[],function(e,n){t[n]=!0}),t}(e):x.extend({},e);var t,n,r,i,o=[],a=[],s=-1,c=function(){for(i=i||e.once,r=t=!0;a.length;s=-1)for(n=a.shift();++s<o.length;)!1===o[s].apply(n[0],n[1])&&e.stopOnFalse&&(s=o.length,n=!1);e.memory||(n=!1),t=!1,i&&(o=n?[]:"")},u={add:function(){return o&&(n&&!t&&(s=o.length-1,a.push(n)),function t(n){x.each(n,function(n,r){$(r)?e.unique&&u.has(r)||o.push(r):r&&r.length&&"string"!==y(r)&&t(r)})}(arguments),n&&!t&&c()),this},remove:function(){return x.each(arguments,function(e,t){for(var n;(n=x.inArray(t,o,n))>-1;)o.splice(n,1),n<=s&&s--}),this},has:function(e){return e?x.inArray(e,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return i=a=[],o=n="",this},disabled:function(){return!o},lock:function(){return i=a=[],n||t||(o=n=""),this},locked:function(){return!!i},fireWith:function(e,n){return i||(n=[e,(n=n||[]).slice?n.slice():n],a.push(n),t||c()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!r}};return u},x.extend({Deferred:function(t){var n=[["notify","progress",x.Callbacks("memory"),x.Callbacks("memory"),2],["resolve","done",x.Callbacks("once memory"),x.Callbacks("once memory"),0,"resolved"],["reject","fail",x.Callbacks("once memory"),x.Callbacks("once memory"),1,"rejected"]],r="pending",i={state:function(){return r},always:function(){return o.done(arguments).fail(arguments),this},catch:function(e){return i.then(null,e)},pipe:function(){var e=arguments;return x.Deferred(function(t){x.each(n,function(n,r){var i=$(e[r[4]])&&e[r[4]];o[r[1]](function(){var e=i&&i.apply(this,arguments);e&&$(e.promise)?e.promise().progress(t.notify).done(t.resolve).fail(t.reject):t[r[0]+"With"](this,i?[e]:arguments)})}),e=null}).promise()},then:function(t,r,i){var o=0;function a(t,n,r,i){return function(){var s=this,c=arguments,u=function(){var e,u;if(!(t<o)){if((e=r.apply(s,c))===n.promise())throw new TypeError("Thenable self-resolution");u=e&&("object"===_typeof(e)||"function"==typeof e)&&e.then,$(u)?i?u.call(e,a(o,n,V,i),a(o,n,j,i)):(o++,u.call(e,a(o,n,V,i),a(o,n,j,i),a(o,n,V,n.notifyWith))):(r!==V&&(s=void 0,c=[e]),(i||n.resolveWith)(s,c))}},l=i?u:function(){try{u()}catch(e){x.Deferred.exceptionHook&&x.Deferred.exceptionHook(e,l.stackTrace),t+1>=o&&(r!==j&&(s=void 0,c=[e]),n.rejectWith(s,c))}};t?l():(x.Deferred.getStackHook&&(l.stackTrace=x.Deferred.getStackHook()),e.setTimeout(l))}}return x.Deferred(function(e){n[0][3].add(a(0,e,$(i)?i:V,e.notifyWith)),n[1][3].add(a(0,e,$(t)?t:V)),n[2][3].add(a(0,e,$(r)?r:j))}).promise()},promise:function(e){return null!=e?x.extend(e,i):i}},o={};return x.each(n,function(e,t){var a=t[2],s=t[5];i[t[1]]=a.add,s&&a.add(function(){r=s},n[3-e][2].disable,n[3-e][3].disable,n[0][2].lock,n[0][3].lock),a.add(t[3].fire),o[t[0]]=function(){return o[t[0]+"With"](this===o?void 0:this,arguments),this},o[t[0]+"With"]=a.fireWith}),i.promise(o),t&&t.call(o,o),o},when:function(e){var t=arguments.length,n=t,r=Array(n),i=o.call(arguments),a=x.Deferred(),s=function(e){return function(n){r[e]=this,i[e]=arguments.length>1?o.call(arguments):n,--t||a.resolveWith(r,i)}};if(t<=1&&(q(e,a.done(s(n)).resolve,a.reject,!t),"pending"===a.state()||$(i[n]&&i[n].then)))return a.then();for(;n--;)q(i[n],s(n),a.reject);return a.promise()}});var F=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;x.Deferred.exceptionHook=function(t,n){e.console&&e.console.warn&&t&&F.test(t.name)&&e.console.warn("jQuery.Deferred exception: "+t.message,t.stack,n)},x.readyException=function(t){e.setTimeout(function(){throw t})};var U=x.Deferred();function _(){r.removeEventListener("DOMContentLoaded",_),e.removeEventListener("load",_),x.ready()}x.fn.ready=function(e){return U.then(e).catch(function(e){x.readyException(e)}),this},x.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--x.readyWait:x.isReady)||(x.isReady=!0,!0!==e&&--x.readyWait>0||U.resolveWith(r,[x]))}}),x.ready.then=U.then,"complete"===r.readyState||"loading"!==r.readyState&&!r.documentElement.doScroll?e.setTimeout(x.ready):(r.addEventListener("DOMContentLoaded",_),e.addEventListener("load",_));var H=function e(t,n,r,i,o,a,s){var c=0,u=t.length,l=null==r;if("object"===y(r))for(c in o=!0,r)e(t,n,c,r[c],!0,a,s);else if(void 0!==i&&(o=!0,$(i)||(s=!0),l&&(s?(n.call(t,i),n=null):(l=n,n=function(e,t,n){return l.call(x(e),n)})),n))for(;c<u;c++)n(t[c],r,s?i:i.call(t[c],c,n(t[c],r)));return o?t:l?n.call(t):u?n(t[0],r):a},B=/^-ms-/,z=/-([a-z])/g;function W(e,t){return t.toUpperCase()}function G(e){return e.replace(B,"ms-").replace(z,W)}var K=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function Y(){this.expando=x.expando+Y.uid++}Y.uid=1,Y.prototype={cache:function(e){var t=e[this.expando];return t||(t={},K(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if("string"==typeof t)i[G(t)]=n;else for(r in t)i[G(r)]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][G(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(G):(t=G(t))in r?[t]:t.match(R)||[]).length;for(;n--;)delete r[t[n]]}(void 0===t||x.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!x.isEmptyObject(t)}};var J=new Y,X=new Y,Z=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Q=/[A-Z]/g;function ee(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(Q,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:Z.test(e)?JSON.parse(e):e)}(n)}catch(e){}X.set(e,t,n)}else n=void 0;return n}x.extend({hasData:function(e){return X.hasData(e)||J.hasData(e)},data:function(e,t,n){return X.access(e,t,n)},removeData:function(e,t){X.remove(e,t)},_data:function(e,t,n){return J.access(e,t,n)},_removeData:function(e,t){J.remove(e,t)}}),x.fn.extend({data:function(e,t){var n,r,i,o=this[0],a=o&&o.attributes;if(void 0===e){if(this.length&&(i=X.get(o),1===o.nodeType&&!J.get(o,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&0===(r=a[n].name).indexOf("data-")&&(r=G(r.slice(5)),ee(o,r,i[r]));J.set(o,"hasDataAttrs",!0)}return i}return"object"===_typeof(e)?this.each(function(){X.set(this,e)}):H(this,function(t){var n;if(o&&void 0===t)return void 0!==(n=X.get(o,e))?n:void 0!==(n=ee(o,e))?n:void 0;this.each(function(){X.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){X.remove(this,e)})}}),x.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=J.get(e,t),n&&(!r||Array.isArray(n)?r=J.access(e,t,x.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=x.queue(e,t),r=n.length,i=n.shift(),o=x._queueHooks(e,t);"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,function(){x.dequeue(e,t)},o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return J.get(e,n)||J.access(e,n,{empty:x.Callbacks("once memory").add(function(){J.remove(e,[t+"queue",n])})})}}),x.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?x.queue(this[0],e):void 0===t?this:this.each(function(){var n=x.queue(this,e,t);x._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&x.dequeue(this,e)})},dequeue:function(e){return this.each(function(){x.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=x.Deferred(),o=this,a=this.length,s=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)(n=J.get(o[a],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(s));return s(),i.promise(t)}});var te=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ne=new RegExp("^(?:([+-])=|)("+te+")([a-z%]*)$","i"),re=["Top","Right","Bottom","Left"],ie=r.documentElement,oe=function(e){return x.contains(e.ownerDocument,e)},ae={composed:!0};ie.attachShadow&&(oe=function(e){return x.contains(e.ownerDocument,e)||e.getRootNode(ae)===e.ownerDocument});var se=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&oe(e)&&"none"===x.css(e,"display")},ce=function(e,t,n,r){var i,o,a={};for(o in t)a[o]=e.style[o],e.style[o]=t[o];for(o in i=n.apply(e,r||[]),t)e.style[o]=a[o];return i};var ue={};function le(e){var t,n=e.ownerDocument,r=e.nodeName,i=ue[r];return i||(t=n.body.appendChild(n.createElement(r)),i=x.css(t,"display"),t.parentNode.removeChild(t),"none"===i&&(i="block"),ue[r]=i,i)}function fe(e,t){for(var n,r,i=[],o=0,a=e.length;o<a;o++)(r=e[o]).style&&(n=r.style.display,t?("none"===n&&(i[o]=J.get(r,"display")||null,i[o]||(r.style.display="")),""===r.style.display&&se(r)&&(i[o]=le(r))):"none"!==n&&(i[o]="none",J.set(r,"display",n)));for(o=0;o<a;o++)null!=i[o]&&(e[o].style.display=i[o]);return e}x.fn.extend({show:function(){return fe(this,!0)},hide:function(){return fe(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){se(this)?x(this).show():x(this).hide()})}});var pe=/^(?:checkbox|radio)$/i,de=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,he=/^$|^module$|\/(?:java|ecma)script/i,$e={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function ge(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&T(e,t)?x.merge([e],n):n}function me(e,t){for(var n=0,r=e.length;n<r;n++)J.set(e[n],"globalEval",!t||J.get(t[n],"globalEval"))}$e.optgroup=$e.option,$e.tbody=$e.tfoot=$e.colgroup=$e.caption=$e.thead,$e.th=$e.td;var ve,ye,be=/<|&#?\w+;/;function xe(e,t,n,r,i){for(var o,a,s,c,u,l,f=t.createDocumentFragment(),p=[],d=0,h=e.length;d<h;d++)if((o=e[d])||0===o)if("object"===y(o))x.merge(p,o.nodeType?[o]:o);else if(be.test(o)){for(a=a||f.appendChild(t.createElement("div")),s=(de.exec(o)||["",""])[1].toLowerCase(),c=$e[s]||$e._default,a.innerHTML=c[1]+x.htmlPrefilter(o)+c[2],l=c[0];l--;)a=a.lastChild;x.merge(p,a.childNodes),(a=f.firstChild).textContent=""}else p.push(t.createTextNode(o));for(f.textContent="",d=0;o=p[d++];)if(r&&x.inArray(o,r)>-1)i&&i.push(o);else if(u=oe(o),a=ge(f.appendChild(o),"script"),u&&me(a),n)for(l=0;o=a[l++];)he.test(o.type||"")&&n.push(o);return f}ve=r.createDocumentFragment().appendChild(r.createElement("div")),(ye=r.createElement("input")).setAttribute("type","radio"),ye.setAttribute("checked","checked"),ye.setAttribute("name","t"),ve.appendChild(ye),h.checkClone=ve.cloneNode(!0).cloneNode(!0).lastChild.checked,ve.innerHTML="<textarea>x</textarea>",h.noCloneChecked=!!ve.cloneNode(!0).lastChild.defaultValue;var we=/^key/,Ce=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ee=/^([^.]*)(?:\.(.+)|)/;function Se(){return!0}function ke(){return!1}function Ae(e,t){return e===function(){try{return r.activeElement}catch(e){}}()==("focus"===t)}function Te(e,t,n,r,i,o){var a,s;if("object"===_typeof(t)){for(s in"string"!=typeof n&&(r=r||n,n=void 0),t)Te(e,s,n,r,t[s],o);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=ke;else if(!i)return e;return 1===o&&(a=i,(i=function(e){return x().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=x.guid++)),e.each(function(){x.event.add(this,t,i,r,n)})}function Oe(e,t,n){n?(J.set(e,t,!1),x.event.add(e,t,{namespace:!1,handler:function(e){var r,i,a=J.get(this,t);if(1&e.isTrigger&&this[t]){if(a)(x.event.special[t]||{}).delegateType&&e.stopPropagation();else if(a=o.call(arguments),J.set(this,t,a),r=n(this,t),this[t](),a!==(i=J.get(this,t))||r?J.set(this,t,!1):i=void 0,a!==i)return e.stopImmediatePropagation(),e.preventDefault(),i}else a&&(J.set(this,t,x.event.trigger(x.extend(a.shift(),x.Event.prototype),a,this)),e.stopImmediatePropagation())}})):x.event.add(e,t,Se)}x.event={global:{},add:function(e,t,n,r,i){var o,a,s,c,u,l,f,p,d,h,$,g=J.get(e);if(g)for(n.handler&&(n=(o=n).handler,i=o.selector),i&&x.find.matchesSelector(ie,i),n.guid||(n.guid=x.guid++),(c=g.events)||(c=g.events={}),(a=g.handle)||(a=g.handle=function(t){return void 0!==x&&x.event.triggered!==t.type?x.event.dispatch.apply(e,arguments):void 0}),u=(t=(t||"").match(R)||[""]).length;u--;)d=$=(s=Ee.exec(t[u])||[])[1],h=(s[2]||"").split(".").sort(),d&&(f=x.event.special[d]||{},d=(i?f.delegateType:f.bindType)||d,f=x.event.special[d]||{},l=x.extend({type:d,origType:$,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&x.expr.match.needsContext.test(i),namespace:h.join(".")},o),(p=c[d])||((p=c[d]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(e,r,h,a)||e.addEventListener&&e.addEventListener(d,a)),f.add&&(f.add.call(e,l),l.handler.guid||(l.handler.guid=n.guid)),i?p.splice(p.delegateCount++,0,l):p.push(l),x.event.global[d]=!0)},remove:function(e,t,n,r,i){var o,a,s,c,u,l,f,p,d,h,$,g=J.hasData(e)&&J.get(e);if(g&&(c=g.events)){for(u=(t=(t||"").match(R)||[""]).length;u--;)if(d=$=(s=Ee.exec(t[u])||[])[1],h=(s[2]||"").split(".").sort(),d){for(f=x.event.special[d]||{},p=c[d=(r?f.delegateType:f.bindType)||d]||[],s=s[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=p.length;o--;)l=p[o],!i&&$!==l.origType||n&&n.guid!==l.guid||s&&!s.test(l.namespace)||r&&r!==l.selector&&("**"!==r||!l.selector)||(p.splice(o,1),l.selector&&p.delegateCount--,f.remove&&f.remove.call(e,l));a&&!p.length&&(f.teardown&&!1!==f.teardown.call(e,h,g.handle)||x.removeEvent(e,d,g.handle),delete c[d])}else for(d in c)x.event.remove(e,d+t[u],n,r,!0);x.isEmptyObject(c)&&J.remove(e,"handle events")}},dispatch:function(e){var t,n,r,i,o,a,s=x.event.fix(e),c=new Array(arguments.length),u=(J.get(this,"events")||{})[s.type]||[],l=x.event.special[s.type]||{};for(c[0]=s,t=1;t<arguments.length;t++)c[t]=arguments[t];if(s.delegateTarget=this,!l.preDispatch||!1!==l.preDispatch.call(this,s)){for(a=x.event.handlers.call(this,s,u),t=0;(i=a[t++])&&!s.isPropagationStopped();)for(s.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!s.isImmediatePropagationStopped();)s.rnamespace&&!1!==o.namespace&&!s.rnamespace.test(o.namespace)||(s.handleObj=o,s.data=o.data,void 0!==(r=((x.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,c))&&!1===(s.result=r)&&(s.preventDefault(),s.stopPropagation()));return l.postDispatch&&l.postDispatch.call(this,s),s.result}},handlers:function(e,t){var n,r,i,o,a,s=[],c=t.delegateCount,u=e.target;if(c&&u.nodeType&&!("click"===e.type&&e.button>=1))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&("click"!==e.type||!0!==u.disabled)){for(o=[],a={},n=0;n<c;n++)void 0===a[i=(r=t[n]).selector+" "]&&(a[i]=r.needsContext?x(i,this).index(u)>-1:x.find(i,this,null,[u]).length),a[i]&&o.push(r);o.length&&s.push({elem:u,handlers:o})}return u=this,c<t.length&&s.push({elem:u,handlers:t.slice(c)}),s},addProp:function(e,t){Object.defineProperty(x.Event.prototype,e,{enumerable:!0,configurable:!0,get:$(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[x.expando]?e:new x.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return pe.test(t.type)&&t.click&&T(t,"input")&&void 0===J.get(t,"click")&&Oe(t,"click",Se),!1},trigger:function(e){var t=this||e;return pe.test(t.type)&&t.click&&T(t,"input")&&void 0===J.get(t,"click")&&Oe(t,"click"),!0},_default:function(e){var t=e.target;return pe.test(t.type)&&t.click&&T(t,"input")&&J.get(t,"click")||T(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},x.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},x.Event=function(e,t){if(!(this instanceof x.Event))return new x.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Se:ke,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&x.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[x.expando]=!0},x.Event.prototype={constructor:x.Event,isDefaultPrevented:ke,isPropagationStopped:ke,isImmediatePropagationStopped:ke,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Se,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Se,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Se,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},x.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&we.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Ce.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},x.event.addProp),x.each({focus:"focusin",blur:"focusout"},function(e,t){x.event.special[e]={setup:function(){return Oe(this,e,Ae),!1},trigger:function(){return Oe(this,e),!0},delegateType:t}}),x.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){x.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=e.relatedTarget,i=e.handleObj;return r&&(r===this||x.contains(this,r))||(e.type=i.origType,n=i.handler.apply(this,arguments),e.type=t),n}}}),x.fn.extend({on:function(e,t,n,r){return Te(this,e,t,n,r)},one:function(e,t,n,r){return Te(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,x(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"===_typeof(e)){for(i in e)this.off(i,t,e[i]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=ke),this.each(function(){x.event.remove(this,e,n,t)})}});var Me=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Ne=/<script|<style|<link/i,De=/checked\s*(?:[^=]|=\s*.checked.)/i,Ie=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Pe(e,t){return T(e,"table")&&T(11!==t.nodeType?t:t.firstChild,"tr")&&x(e).children("tbody")[0]||e}function Le(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Re(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Ve(e,t){var n,r,i,o,a,s,c,u;if(1===t.nodeType){if(J.hasData(e)&&(o=J.access(e),a=J.set(t,o),u=o.events))for(i in delete a.handle,a.events={},u)for(n=0,r=u[i].length;n<r;n++)x.event.add(t,i,u[i][n]);X.hasData(e)&&(s=X.access(e),c=x.extend({},s),X.set(t,c))}}function je(e,t,n,r){t=a.apply([],t);var i,o,s,c,u,l,f=0,p=e.length,d=p-1,g=t[0],m=$(g);if(m||p>1&&"string"==typeof g&&!h.checkClone&&De.test(g))return e.each(function(i){var o=e.eq(i);m&&(t[0]=g.call(this,i,o.html())),je(o,t,n,r)});if(p&&(o=(i=xe(t,e[0].ownerDocument,!1,e,r)).firstChild,1===i.childNodes.length&&(i=o),o||r)){for(c=(s=x.map(ge(i,"script"),Le)).length;f<p;f++)u=i,f!==d&&(u=x.clone(u,!0,!0),c&&x.merge(s,ge(u,"script"))),n.call(e[f],u,f);if(c)for(l=s[s.length-1].ownerDocument,x.map(s,Re),f=0;f<c;f++)u=s[f],he.test(u.type||"")&&!J.access(u,"globalEval")&&x.contains(l,u)&&(u.src&&"module"!==(u.type||"").toLowerCase()?x._evalUrl&&!u.noModule&&x._evalUrl(u.src,{nonce:u.nonce||u.getAttribute("nonce")}):v(u.textContent.replace(Ie,""),u,l))}return e}function qe(e,t,n){for(var r,i=t?x.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||x.cleanData(ge(r)),r.parentNode&&(n&&oe(r)&&me(ge(r,"script")),r.parentNode.removeChild(r));return e}x.extend({htmlPrefilter:function(e){return e.replace(Me,"<$1></$2>")},clone:function(e,t,n){var r,i,o,a,s,c,u,l=e.cloneNode(!0),f=oe(e);if(!(h.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||x.isXMLDoc(e)))for(a=ge(l),r=0,i=(o=ge(e)).length;r<i;r++)s=o[r],c=a[r],u=void 0,"input"===(u=c.nodeName.toLowerCase())&&pe.test(s.type)?c.checked=s.checked:"input"!==u&&"textarea"!==u||(c.defaultValue=s.defaultValue);if(t)if(n)for(o=o||ge(e),a=a||ge(l),r=0,i=o.length;r<i;r++)Ve(o[r],a[r]);else Ve(e,l);return(a=ge(l,"script")).length>0&&me(a,!f&&ge(e,"script")),l},cleanData:function(e){for(var t,n,r,i=x.event.special,o=0;void 0!==(n=e[o]);o++)if(K(n)){if(t=n[J.expando]){if(t.events)for(r in t.events)i[r]?x.event.remove(n,r):x.removeEvent(n,r,t.handle);n[J.expando]=void 0}n[X.expando]&&(n[X.expando]=void 0)}}}),x.fn.extend({detach:function(e){return qe(this,e,!0)},remove:function(e){return qe(this,e)},text:function(e){return H(this,function(e){return void 0===e?x.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return je(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Pe(this,e).appendChild(e)})},prepend:function(){return je(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Pe(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return je(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return je(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(x.cleanData(ge(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return x.clone(this,e,t)})},html:function(e){return H(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Ne.test(e)&&!$e[(de.exec(e)||["",""])[1].toLowerCase()]){e=x.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(x.cleanData(ge(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return je(this,arguments,function(t){var n=this.parentNode;x.inArray(this,e)<0&&(x.cleanData(ge(this)),n&&n.replaceChild(t,this))},e)}}),x.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){x.fn[e]=function(e){for(var n,r=[],i=x(e),o=i.length-1,a=0;a<=o;a++)n=a===o?this:this.clone(!0),x(i[a])[t](n),s.apply(r,n.get());return this.pushStack(r)}});var Fe=new RegExp("^("+te+")(?!px)[a-z%]+$","i"),Ue=function(t){var n=t.ownerDocument.defaultView;return n&&n.opener||(n=e),n.getComputedStyle(t)},_e=new RegExp(re.join("|"),"i");function He(e,t,n){var r,i,o,a,s=e.style;return(n=n||Ue(e))&&(""!==(a=n.getPropertyValue(t)||n[t])||oe(e)||(a=x.style(e,t)),!h.pixelBoxStyles()&&Fe.test(a)&&_e.test(t)&&(r=s.width,i=s.minWidth,o=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=r,s.minWidth=i,s.maxWidth=o)),void 0!==a?a+"":a}function Be(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function t(){if(l){u.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",l.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",ie.appendChild(u).appendChild(l);var t=e.getComputedStyle(l);i="1%"!==t.top,c=12===n(t.marginLeft),l.style.right="60%",s=36===n(t.right),o=36===n(t.width),l.style.position="absolute",a=12===n(l.offsetWidth/3),ie.removeChild(u),l=null}}function n(e){return Math.round(parseFloat(e))}var i,o,a,s,c,u=r.createElement("div"),l=r.createElement("div");l.style&&(l.style.backgroundClip="content-box",l.cloneNode(!0).style.backgroundClip="",h.clearCloneStyle="content-box"===l.style.backgroundClip,x.extend(h,{boxSizingReliable:function(){return t(),o},pixelBoxStyles:function(){return t(),s},pixelPosition:function(){return t(),i},reliableMarginLeft:function(){return t(),c},scrollboxSize:function(){return t(),a}}))}();var ze=["Webkit","Moz","ms"],We=r.createElement("div").style,Ge={};function Ke(e){var t=x.cssProps[e]||Ge[e];return t||(e in We?e:Ge[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=ze.length;n--;)if((e=ze[n]+t)in We)return e}(e)||e)}var Ye=/^(none|table(?!-c[ea]).+)/,Je=/^--/,Xe={position:"absolute",visibility:"hidden",display:"block"},Ze={letterSpacing:"0",fontWeight:"400"};function Qe(e,t,n){var r=ne.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function et(e,t,n,r,i,o){var a="width"===t?1:0,s=0,c=0;if(n===(r?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(c+=x.css(e,n+re[a],!0,i)),r?("content"===n&&(c-=x.css(e,"padding"+re[a],!0,i)),"margin"!==n&&(c-=x.css(e,"border"+re[a]+"Width",!0,i))):(c+=x.css(e,"padding"+re[a],!0,i),"padding"!==n?c+=x.css(e,"border"+re[a]+"Width",!0,i):s+=x.css(e,"border"+re[a]+"Width",!0,i));return!r&&o>=0&&(c+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-o-c-s-.5))||0),c}function tt(e,t,n){var r=Ue(e),i=(!h.boxSizingReliable()||n)&&"border-box"===x.css(e,"boxSizing",!1,r),o=i,a=He(e,t,r),s="offset"+t[0].toUpperCase()+t.slice(1);if(Fe.test(a)){if(!n)return a;a="auto"}return(!h.boxSizingReliable()&&i||"auto"===a||!parseFloat(a)&&"inline"===x.css(e,"display",!1,r))&&e.getClientRects().length&&(i="border-box"===x.css(e,"boxSizing",!1,r),(o=s in e)&&(a=e[s])),(a=parseFloat(a)||0)+et(e,t,n||(i?"border":"content"),o,r,a)+"px"}x.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=He(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,a,s=G(t),c=Je.test(t),u=e.style;if(c||(t=Ke(s)),a=x.cssHooks[t]||x.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(i=a.get(e,!1,r))?i:u[t];"string"===(o=_typeof(n))&&(i=ne.exec(n))&&i[1]&&(n=function(e,t,n,r){var i,o,a=20,s=r?function(){return r.cur()}:function(){return x.css(e,t,"")},c=s(),u=n&&n[3]||(x.cssNumber[t]?"":"px"),l=e.nodeType&&(x.cssNumber[t]||"px"!==u&&+c)&&ne.exec(x.css(e,t));if(l&&l[3]!==u){for(c/=2,u=u||l[3],l=+c||1;a--;)x.style(e,t,l+u),(1-o)*(1-(o=s()/c||.5))<=0&&(a=0),l/=o;l*=2,x.style(e,t,l+u),n=n||[]}return n&&(l=+l||+c||0,i=n[1]?l+(n[1]+1)*n[2]:+n[2],r&&(r.unit=u,r.start=l,r.end=i)),i}(e,t,i),o="number"),null!=n&&n==n&&("number"!==o||c||(n+=i&&i[3]||(x.cssNumber[s]?"":"px")),h.clearCloneStyle||""!==n||0!==t.indexOf("background")||(u[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,r))||(c?u.setProperty(t,n):u[t]=n))}},css:function(e,t,n,r){var i,o,a,s=G(t);return Je.test(t)||(t=Ke(s)),(a=x.cssHooks[t]||x.cssHooks[s])&&"get"in a&&(i=a.get(e,!0,n)),void 0===i&&(i=He(e,t,r)),"normal"===i&&t in Ze&&(i=Ze[t]),""===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),x.each(["height","width"],function(e,t){x.cssHooks[t]={get:function(e,n,r){if(n)return!Ye.test(x.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?tt(e,t,r):ce(e,Xe,function(){return tt(e,t,r)})},set:function(e,n,r){var i,o=Ue(e),a=!h.scrollboxSize()&&"absolute"===o.position,s=(a||r)&&"border-box"===x.css(e,"boxSizing",!1,o),c=r?et(e,t,r,s,o):0;return s&&a&&(c-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(o[t])-et(e,t,"border",!1,o)-.5)),c&&(i=ne.exec(n))&&"px"!==(i[3]||"px")&&(e.style[t]=n,n=x.css(e,t)),Qe(0,n,c)}}}),x.cssHooks.marginLeft=Be(h.reliableMarginLeft,function(e,t){if(t)return(parseFloat(He(e,"marginLeft"))||e.getBoundingClientRect().left-ce(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),x.each({margin:"",padding:"",border:"Width"},function(e,t){x.cssHooks[e+t]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];r<4;r++)i[e+re[r]+t]=o[r]||o[r-2]||o[0];return i}},"margin"!==e&&(x.cssHooks[e+t].set=Qe)}),x.fn.extend({css:function(e,t){return H(this,function(e,t,n){var r,i,o={},a=0;if(Array.isArray(t)){for(r=Ue(e),i=t.length;a<i;a++)o[t[a]]=x.css(e,t[a],!1,r);return o}return void 0!==n?x.style(e,t,n):x.css(e,t)},e,t,arguments.length>1)}}),x.fn.delay=function(t,n){return t=x.fx&&x.fx.speeds[t]||t,n=n||"fx",this.queue(n,function(n,r){var i=e.setTimeout(n,t);r.stop=function(){e.clearTimeout(i)}})},function(){var e=r.createElement("input"),t=r.createElement("select").appendChild(r.createElement("option"));e.type="checkbox",h.checkOn=""!==e.value,h.optSelected=t.selected,(e=r.createElement("input")).value="t",e.type="radio",h.radioValue="t"===e.value}();var nt,rt=x.expr.attrHandle;x.fn.extend({attr:function(e,t){return H(this,x.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){x.removeAttr(this,e)})}}),x.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===e.getAttribute?x.prop(e,t,n):(1===o&&x.isXMLDoc(e)||(i=x.attrHooks[t.toLowerCase()]||(x.expr.match.bool.test(t)?nt:void 0)),void 0!==n?null===n?void x.removeAttr(e,t):i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):i&&"get"in i&&null!==(r=i.get(e,t))?r:null==(r=x.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!h.radioValue&&"radio"===t&&T(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,i=t&&t.match(R);if(i&&1===e.nodeType)for(;n=i[r++];)e.removeAttribute(n)}}),nt={set:function(e,t,n){return!1===t?x.removeAttr(e,n):e.setAttribute(n,n),n}},x.each(x.expr.match.bool.source.match(/\w+/g),function(e,t){var n=rt[t]||x.find.attr;rt[t]=function(e,t,r){var i,o,a=t.toLowerCase();return r||(o=rt[a],rt[a]=i,i=null!=n(e,t,r)?a:null,rt[a]=o),i}});var it=/^(?:input|select|textarea|button)$/i,ot=/^(?:a|area)$/i;function at(e){return(e.match(R)||[]).join(" ")}function st(e){return e.getAttribute&&e.getAttribute("class")||""}function ct(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(R)||[]}x.fn.extend({prop:function(e,t){return H(this,x.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[x.propFix[e]||e]})}}),x.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&x.isXMLDoc(e)||(t=x.propFix[t]||t,i=x.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=x.find.attr(e,"tabindex");return t?parseInt(t,10):it.test(e.nodeName)||ot.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),h.optSelected||(x.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),x.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){x.propFix[this.toLowerCase()]=this}),x.fn.extend({addClass:function(e){var t,n,r,i,o,a,s,c=0;if($(e))return this.each(function(t){x(this).addClass(e.call(this,t,st(this)))});if((t=ct(e)).length)for(;n=this[c++];)if(i=st(n),r=1===n.nodeType&&" "+at(i)+" "){for(a=0;o=t[a++];)r.indexOf(" "+o+" ")<0&&(r+=o+" ");i!==(s=at(r))&&n.setAttribute("class",s)}return this},removeClass:function(e){var t,n,r,i,o,a,s,c=0;if($(e))return this.each(function(t){x(this).removeClass(e.call(this,t,st(this)))});if(!arguments.length)return this.attr("class","");if((t=ct(e)).length)for(;n=this[c++];)if(i=st(n),r=1===n.nodeType&&" "+at(i)+" "){for(a=0;o=t[a++];)for(;r.indexOf(" "+o+" ")>-1;)r=r.replace(" "+o+" "," ");i!==(s=at(r))&&n.setAttribute("class",s)}return this},toggleClass:function(e,t){var n=_typeof(e),r="string"===n||Array.isArray(e);return"boolean"==typeof t&&r?t?this.addClass(e):this.removeClass(e):$(e)?this.each(function(n){x(this).toggleClass(e.call(this,n,st(this),t),t)}):this.each(function(){var t,i,o,a;if(r)for(i=0,o=x(this),a=ct(e);t=a[i++];)o.hasClass(t)?o.removeClass(t):o.addClass(t);else void 0!==e&&"boolean"!==n||((t=st(this))&&J.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":J.get(this,"__className__")||""))})},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&(" "+at(st(n))+" ").indexOf(t)>-1)return!0;return!1}});var ut=/\r/g;x.fn.extend({val:function(e){var t,n,r,i=this[0];return arguments.length?(r=$(e),this.each(function(n){var i;1===this.nodeType&&(null==(i=r?e.call(this,n,x(this).val()):e)?i="":"number"==typeof i?i+="":Array.isArray(i)&&(i=x.map(i,function(e){return null==e?"":e+""})),(t=x.valHooks[this.type]||x.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,i,"value")||(this.value=i))})):i?(t=x.valHooks[i.type]||x.valHooks[i.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(i,"value"))?n:"string"==typeof(n=i.value)?n.replace(ut,""):null==n?"":n:void 0}}),x.extend({valHooks:{option:{get:function(e){var t=x.find.attr(e,"value");return null!=t?t:at(x.text(e))}},select:{get:function(e){var t,n,r,i=e.options,o=e.selectedIndex,a="select-one"===e.type,s=a?null:[],c=a?o+1:i.length;for(r=o<0?c:a?o:0;r<c;r++)if(((n=i[r]).selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!T(n.parentNode,"optgroup"))){if(t=x(n).val(),a)return t;s.push(t)}return s},set:function(e,t){for(var n,r,i=e.options,o=x.makeArray(t),a=i.length;a--;)((r=i[a]).selected=x.inArray(x.valHooks.option.get(r),o)>-1)&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),x.each(["radio","checkbox"],function(){x.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=x.inArray(x(e).val(),t)>-1}},h.checkOn||(x.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),h.focusin="onfocusin"in e;var lt=/^(?:focusinfocus|focusoutblur)$/,ft=function(e){e.stopPropagation()};x.extend(x.event,{trigger:function(t,n,i,o){var a,s,c,u,l,p,d,h,m=[i||r],v=f.call(t,"type")?t.type:t,y=f.call(t,"namespace")?t.namespace.split("."):[];if(s=h=c=i=i||r,3!==i.nodeType&&8!==i.nodeType&&!lt.test(v+x.event.triggered)&&(v.indexOf(".")>-1&&(y=v.split("."),v=y.shift(),y.sort()),l=v.indexOf(":")<0&&"on"+v,(t=t[x.expando]?t:new x.Event(v,"object"===_typeof(t)&&t)).isTrigger=o?2:3,t.namespace=y.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+y.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=i),n=null==n?[t]:x.makeArray(n,[t]),d=x.event.special[v]||{},o||!d.trigger||!1!==d.trigger.apply(i,n))){if(!o&&!d.noBubble&&!g(i)){for(u=d.delegateType||v,lt.test(u+v)||(s=s.parentNode);s;s=s.parentNode)m.push(s),c=s;c===(i.ownerDocument||r)&&m.push(c.defaultView||c.parentWindow||e)}for(a=0;(s=m[a++])&&!t.isPropagationStopped();)h=s,t.type=a>1?u:d.bindType||v,(p=(J.get(s,"events")||{})[t.type]&&J.get(s,"handle"))&&p.apply(s,n),(p=l&&s[l])&&p.apply&&K(s)&&(t.result=p.apply(s,n),!1===t.result&&t.preventDefault());return t.type=v,o||t.isDefaultPrevented()||d._default&&!1!==d._default.apply(m.pop(),n)||!K(i)||l&&$(i[v])&&!g(i)&&((c=i[l])&&(i[l]=null),x.event.triggered=v,t.isPropagationStopped()&&h.addEventListener(v,ft),i[v](),t.isPropagationStopped()&&h.removeEventListener(v,ft),x.event.triggered=void 0,c&&(i[l]=c)),t.result}},simulate:function(e,t,n){var r=x.extend(new x.Event,n,{type:e,isSimulated:!0});x.event.trigger(r,null,t)}}),x.fn.extend({trigger:function(e,t){return this.each(function(){x.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return x.event.trigger(e,t,n,!0)}}),h.focusin||x.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){x.event.simulate(t,e.target,x.event.fix(e))};x.event.special[t]={setup:function(){var r=this.ownerDocument||this,i=J.access(r,t);i||r.addEventListener(e,n,!0),J.access(r,t,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this,i=J.access(r,t)-1;i?J.access(r,t,i):(r.removeEventListener(e,n,!0),J.remove(r,t))}}});var pt,dt=/\[\]$/,ht=/\r?\n/g,$t=/^(?:submit|button|image|reset|file)$/i,gt=/^(?:input|select|textarea|keygen)/i;function mt(e,t,n,r){var i;if(Array.isArray(t))x.each(t,function(t,i){n||dt.test(e)?r(e,i):mt(e+"["+("object"===_typeof(i)&&null!=i?t:"")+"]",i,n,r)});else if(n||"object"!==y(t))r(e,t);else for(i in t)mt(e+"["+i+"]",t[i],n,r)}x.param=function(e,t){var n,r=[],i=function(e,t){var n=$(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!x.isPlainObject(e))x.each(e,function(){i(this.name,this.value)});else for(n in e)mt(n,e[n],t,i);return r.join("&")},x.fn.extend({serialize:function(){return x.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=x.prop(this,"elements");return e?x.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!x(this).is(":disabled")&&gt.test(this.nodeName)&&!$t.test(e)&&(this.checked||!pe.test(e))}).map(function(e,t){var n=x(this).val();return null==n?null:Array.isArray(n)?x.map(n,function(e){return{name:t.name,value:e.replace(ht,"\r\n")}}):{name:t.name,value:n.replace(ht,"\r\n")}}).get()}}),x.fn.extend({wrapAll:function(e){var t;return this[0]&&($(e)&&(e=e.call(this[0])),t=x(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return $(e)?this.each(function(t){x(this).wrapInner(e.call(this,t))}):this.each(function(){var t=x(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=$(e);return this.each(function(n){x(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){x(this).replaceWith(this.childNodes)}),this}}),x.expr.pseudos.hidden=function(e){return!x.expr.pseudos.visible(e)},x.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},h.createHTMLDocument=((pt=r.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===pt.childNodes.length),x.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(h.createHTMLDocument?((i=(t=r.implementation.createHTMLDocument("")).createElement("base")).href=r.location.href,t.head.appendChild(i)):t=r),a=!n&&[],(o=O.exec(e))?[t.createElement(o[1])]:(o=xe([e],t,a),a&&a.length&&x(a).remove(),x.merge([],o.childNodes)));var i,o,a},x.offset={setOffset:function(e,t,n){var r,i,o,a,s,c,u=x.css(e,"position"),l=x(e),f={};"static"===u&&(e.style.position="relative"),s=l.offset(),o=x.css(e,"top"),c=x.css(e,"left"),("absolute"===u||"fixed"===u)&&(o+c).indexOf("auto")>-1?(a=(r=l.position()).top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(c)||0),$(t)&&(t=t.call(e,n,x.extend({},s))),null!=t.top&&(f.top=t.top-s.top+a),null!=t.left&&(f.left=t.left-s.left+i),"using"in t?t.using.call(e,f):l.css(f)}},x.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){x.offset.setOffset(this,e,t)});var t,n,r=this[0];return r?r.getClientRects().length?(t=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],i={top:0,left:0};if("fixed"===x.css(r,"position"))t=r.getBoundingClientRect();else{for(t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===x.css(e,"position");)e=e.parentNode;e&&e!==r&&1===e.nodeType&&((i=x(e).offset()).top+=x.css(e,"borderTopWidth",!0),i.left+=x.css(e,"borderLeftWidth",!0))}return{top:t.top-i.top-x.css(r,"marginTop",!0),left:t.left-i.left-x.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===x.css(e,"position");)e=e.offsetParent;return e||ie})}}),x.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;x.fn[e]=function(r){return H(this,function(e,r,i){var o;if(g(e)?o=e:9===e.nodeType&&(o=e.defaultView),void 0===i)return o?o[t]:e[r];o?o.scrollTo(n?o.pageXOffset:i,n?i:o.pageYOffset):e[r]=i},e,r,arguments.length)}}),x.each(["top","left"],function(e,t){x.cssHooks[t]=Be(h.pixelPosition,function(e,n){if(n)return n=He(e,t),Fe.test(n)?x(e).position()[t]+"px":n})}),x.each({Height:"height",Width:"width"},function(e,t){x.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,r){x.fn[r]=function(i,o){var a=arguments.length&&(n||"boolean"!=typeof i),s=n||(!0===i||!0===o?"margin":"border");return H(this,function(t,n,i){var o;return g(t)?0===r.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+e],o["scroll"+e],t.body["offset"+e],o["offset"+e],o["client"+e])):void 0===i?x.css(t,n,s):x.style(t,n,i,s)},t,a?i:void 0,a)}})}),x.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){x.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),x.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),x.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),x.proxy=function(e,t){var n,r,i;if("string"==typeof t&&(n=e[t],t=e,e=n),$(e))return r=o.call(arguments,2),(i=function(){return e.apply(t||this,r.concat(o.call(arguments)))}).guid=e.guid=e.guid||x.guid++,i},x.holdReady=function(e){e?x.readyWait++:x.ready(!0)},x.isArray=Array.isArray,x.parseJSON=JSON.parse,x.nodeName=T,x.isFunction=$,x.isWindow=g,x.camelCase=G,x.type=y,x.now=Date.now,x.isNumeric=function(e){var t=x.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},"function"==typeof define&&define.amd&&define("jquery",[],function(){return x});var vt=e.jQuery,yt=e.$;return x.noConflict=function(t){return e.$===x&&(e.$=yt),t&&e.jQuery===x&&(e.jQuery=vt),x},t||(e.jQuery=e.$=x),x}),function(e){function t(e){if(!y(e))return Xn;v(e.objectMaxDepth)&&(Xn.objectMaxDepth=n(e.objectMaxDepth)?e.objectMaxDepth:NaN),v(e.urlErrorParamsEnabled)&&M(e.urlErrorParamsEnabled)&&(Xn.urlErrorParamsEnabled=e.urlErrorParamsEnabled)}function n(e){return w(e)&&0<e}function r(e,t){return t=t||Error,function(){var n,r=arguments[0];for(n="["+(e?e+":":"")+r+"] http://errors.angularjs.org/1.7.8/"+(e?e+"/":"")+r,r=1;r<arguments.length;r++){var i;n=n+(1==r?"?":"&")+"p"+(r-1)+"=",n+=encodeURIComponent(i="function"==typeof(i=arguments[r])?i.toString().replace(/ \{[\s\S]*$/,""):void 0===i?"undefined":"string"!=typeof i?JSON.stringify(i):i)}return new t(n)}}function i(e){if(null==e||T(e))return!1;if(E(e)||x(e)||Kn&&e instanceof Kn)return!0;var t="length"in Object(e)&&e.length;return w(t)&&(0<=t&&t-1 in e||"function"==typeof e.item)}function o(e,t,n){var r,a;if(e)if(k(e))for(r in e)"prototype"!==r&&"length"!==r&&"name"!==r&&e.hasOwnProperty(r)&&t.call(n,e[r],r,e);else if(E(e)||i(e)){var s="object"!==_typeof(e);for(r=0,a=e.length;r<a;r++)(s||r in e)&&t.call(n,e[r],r,e)}else if(e.forEach&&e.forEach!==o)e.forEach(t,n,e);else if(b(e))for(r in e)t.call(n,e[r],r,e);else if("function"==typeof e.hasOwnProperty)for(r in e)e.hasOwnProperty(r)&&t.call(n,e[r],r,e);else for(r in e)Qn.call(e,r)&&t.call(n,e[r],r,e);return e}function a(e,t,n){for(var r=Object.keys(e).sort(),i=0;i<r.length;i++)t.call(n,e[r[i]],r[i]);return r}function s(e){return function(t,n){e(n,t)}}function c(e,t,n){for(var r=e.$$hashKey,i=0,o=t.length;i<o;++i){var a=t[i];if(y(a)||k(a))for(var s=Object.keys(a),u=0,l=s.length;u<l;u++){var f=s[u],p=a[f];n&&y(p)?C(p)?e[f]=new Date(p.valueOf()):A(p)?e[f]=new RegExp(p):p.nodeName?e[f]=p.cloneNode(!0):N(p)?e[f]=p.clone():(y(e[f])||(e[f]=E(p)?[]:{}),c(e[f],[p],!0)):e[f]=p}}return r?e.$$hashKey=r:delete e.$$hashKey,e}function u(e){return c(e,nr.call(arguments,1),!1)}function l(e){return c(e,nr.call(arguments,1),!0)}function f(e){return parseInt(e,10)}function p(e,t){return u(Object.create(e),t)}function d(){}function h(e){return e}function $(e){return function(){return e}}function g(e){return k(e.toString)&&e.toString!==or}function m(e){return void 0===e}function v(e){return void 0!==e}function y(e){return null!==e&&"object"===_typeof(e)}function b(e){return null!==e&&"object"===_typeof(e)&&!ar(e)}function x(e){return"string"==typeof e}function w(e){return"number"==typeof e}function C(e){return"[object Date]"===or.call(e)}function E(e){return Array.isArray(e)||e instanceof Array}function S(e){switch(or.call(e)){case"[object Error]":case"[object Exception]":case"[object DOMException]":return!0;default:return e instanceof Error}}function k(e){return"function"==typeof e}function A(e){return"[object RegExp]"===or.call(e)}function T(e){return e&&e.window===e}function O(e){return e&&e.$evalAsync&&e.$watch}function M(e){return"boolean"==typeof e}function N(e){return!(!e||!(e.nodeName||e.prop&&e.attr&&e.find))}function D(e){return er(e.nodeName||e[0]&&e[0].nodeName)}function I(e,t){var n=e.indexOf(t);return 0<=n&&e.splice(n,1),n}function P(e,t,r){function i(e,t,n){if(0>--n)return"...";var r,i=t.$$hashKey;if(E(e)){r=0;for(var o=e.length;r<o;r++)t.push(a(e[r],n))}else if(b(e))for(r in e)t[r]=a(e[r],n);else if(e&&"function"==typeof e.hasOwnProperty)for(r in e)e.hasOwnProperty(r)&&(t[r]=a(e[r],n));else for(r in e)Qn.call(e,r)&&(t[r]=a(e[r],n));return i?t.$$hashKey=i:delete t.$$hashKey,t}function a(e,t){if(!y(e))return e;if(-1!==(n=c.indexOf(e)))return u[n];if(T(e)||O(e))throw sr("cpws");var n=!1,r=s(e);return void 0===r&&(r=E(e)?[]:Object.create(ar(e)),n=!0),c.push(e),u.push(r),n?i(e,r,t):r}function s(e){switch(or.call(e)){case"[object Int8Array]":case"[object Int16Array]":case"[object Int32Array]":case"[object Float32Array]":case"[object Float64Array]":case"[object Uint8Array]":case"[object Uint8ClampedArray]":case"[object Uint16Array]":case"[object Uint32Array]":return new e.constructor(a(e.buffer),e.byteOffset,e.length);case"[object ArrayBuffer]":if(!e.slice){var t=new ArrayBuffer(e.byteLength);return new Uint8Array(t).set(new Uint8Array(e)),t}return e.slice(0);case"[object Boolean]":case"[object Number]":case"[object String]":case"[object Date]":return new e.constructor(e.valueOf());case"[object RegExp]":return(t=new RegExp(e.source,e.toString().match(/[^\/]*$/)[0])).lastIndex=e.lastIndex,t;case"[object Blob]":return new e.constructor([e],{type:e.type})}if(k(e.cloneNode))return e.cloneNode(!0)}var c=[],u=[];if(r=n(r)?r:NaN,t){if(function(e){return e&&w(e.length)&&dr.test(or.call(e))}(t)||"[object ArrayBuffer]"===or.call(t))throw sr("cpta");if(e===t)throw sr("cpi");return E(t)?t.length=0:o(t,function(e,n){"$$hashKey"!==n&&delete t[n]}),c.push(e),u.push(t),i(e,t,r)}return a(e,r)}function L(e,t){return e===t||e!=e&&t!=t}function R(e,t){if(e===t)return!0;if(null===e||null===t)return!1;if(e!=e&&t!=t)return!0;var n,r=_typeof(e);if(r===_typeof(t)&&"object"===r){if(!E(e)){if(C(e))return!!C(t)&&L(e.getTime(),t.getTime());if(A(e))return!!A(t)&&e.toString()===t.toString();if(O(e)||O(t)||T(e)||T(t)||E(t)||C(t)||A(t))return!1;for(n in r=oe(),e)if("$"!==n.charAt(0)&&!k(e[n])){if(!R(e[n],t[n]))return!1;r[n]=!0}for(n in t)if(!(n in r)&&"$"!==n.charAt(0)&&v(t[n])&&!k(t[n]))return!1;return!0}if(!E(t))return!1;if((r=e.length)===t.length){for(n=0;n<r;n++)if(!R(e[n],t[n]))return!1;return!0}}return!1}function V(e,t,n){return e.concat(nr.call(t,n))}function j(e,t){var n=2<arguments.length?nr.call(arguments,2):[];return!k(t)||t instanceof RegExp?t:n.length?function(){return arguments.length?t.apply(e,V(n,arguments,0)):t.apply(e,n)}:function(){return arguments.length?t.apply(e,arguments):t.call(e)}}function q(t,n){var r=n;return"string"==typeof t&&"$"===t.charAt(0)&&"$"===t.charAt(1)?r=void 0:T(n)?r="$WINDOW":n&&e.document===n?r="$DOCUMENT":O(n)&&(r="$SCOPE"),r}function F(e,t){if(!m(e))return w(t)||(t=t?2:null),JSON.stringify(e,q,t)}function U(e){return x(e)?JSON.parse(e):e}function _(e,t){e=e.replace(vr,"");var n=Date.parse("Jan 01, 1970 00:00:00 "+e)/6e4;return lr(n)?t:n}function H(e,t){return(e=new Date(e.getTime())).setMinutes(e.getMinutes()+t),e}function B(e,t,n){n=n?-1:1;var r=e.getTimezoneOffset();return H(e,n*((t=_(t,r))-r))}function z(e){e=Kn(e).clone().empty();var t=Kn("<div></div>").append(e).html();try{return e[0].nodeType===Cr?er(t):t.match(/^(<[^>]+>)/)[1].replace(/^<([\w-]+)/,function(e,t){return"<"+er(t)})}catch(e){return er(t)}}function W(e){try{return decodeURIComponent(e)}catch(e){}}function G(e){var t={};return o((e||"").split("&"),function(e){var n,r,i;e&&(r=e=e.replace(/\+/g,"%20"),-1!==(n=e.indexOf("="))&&(r=e.substring(0,n),i=e.substring(n+1)),v(r=W(r))&&(i=!v(i)||W(i),Qn.call(t,r)?E(t[r])?t[r].push(i):t[r]=[t[r],i]:t[r]=i))}),t}function K(e){return Y(e,!0).replace(/%26/gi,"&").replace(/%3D/gi,"=").replace(/%2B/gi,"+")}function Y(e,t){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%3B/gi,";").replace(/%20/g,t?"%20":"+")}function J(t,n){var r,i,a={};o(yr,function(e){e+="app",!r&&t.hasAttribute&&t.hasAttribute(e)&&(r=t,i=t.getAttribute(e))}),o(yr,function(e){var n;e+="app",!r&&(n=t.querySelector("["+e.replace(":","\\:")+"]"))&&(r=n,i=n.getAttribute(e))}),r&&(br?(a.strictDi=null!==function(e,t){var n,r,i=yr.length;for(r=0;r<i;++r)if(n=yr[r]+t,x(n=e.getAttribute(n)))return n;return null}(r,"strict-di"),n(r,i?[i]:[],a)):e.console.error("AngularJS: disabling automatic bootstrap. <script> protocol indicates an extension, document.location.href does not match."))}function X(t,n,r){y(r)||(r={}),r=u({strictDi:!1},r);var i=function(){if((t=Kn(t)).injector()){var i=t[0]===e.document?"document":z(t);throw sr("btstrpd",i.replace(/</,"&lt;").replace(/>/,"&gt;"))}return(n=n||[]).unshift(["$provide",function(e){e.value("$rootElement",t)}]),r.debugInfoEnabled&&n.push(["$compileProvider",function(e){e.debugInfoEnabled(!0)}]),n.unshift("ng"),i=je(n,r.strictDi),i.invoke(["$rootScope","$rootElement","$compile","$injector",function(e,t,n,r){e.$apply(function(){t.data("$injector",r),n(t)(e)})}]),i},a=/^NG_ENABLE_DEBUG_INFO!/,s=/^NG_DEFER_BOOTSTRAP!/;if(e&&a.test(e.name)&&(r.debugInfoEnabled=!0,e.name=e.name.replace(a,"")),e&&!s.test(e.name))return i();e.name=e.name.replace(s,""),cr.resumeBootstrap=function(e){return o(e,function(e){n.push(e)}),i()},k(cr.resumeDeferredBootstrap)&&cr.resumeDeferredBootstrap()}function Z(){e.name="NG_ENABLE_DEBUG_INFO!"+e.name,e.location.reload()}function Q(e){if(!(e=cr.element(e).injector()))throw sr("test");return e.get("$$testability")}function ee(e,t){return t=t||"_",e.replace(xr,function(e,n){return(n?t:"")+e.toLowerCase()})}function te(e,t,n){if(!e)throw sr("areq",t||"?",n||"required");return e}function ne(e,t,n){return n&&E(e)&&(e=e[e.length-1]),te(k(e),t,"not a function, got "+(e&&"object"===_typeof(e)?e.constructor.name||"Object":_typeof(e))),e}function re(e,t){if("hasOwnProperty"===e)throw sr("badname",t)}function ie(e){for(var t,n=e[0],r=e[e.length-1],i=1;n!==r&&(n=n.nextSibling);i++)(t||e[i]!==n)&&(t||(t=Kn(nr.call(e,0,i))),t.push(n));return t||e}function oe(){return Object.create(null)}function ae(e){if(null==e)return"";switch(_typeof(e)){case"string":break;case"number":e=""+e;break;default:e=!g(e)||E(e)||C(e)?F(e):e.toString()}return e}function se(e,t){if(E(e)){t=t||[];for(var n=0,r=e.length;n<r;n++)t[n]=e[n]}else if(y(e))for(n in t=t||{},e)"$"===n.charAt(0)&&"$"===n.charAt(1)||(t[n]=e[n]);return t||e}function ce(e,t){var r=[];return n(t)&&(e=cr.copy(e,null,t)),JSON.stringify(e,function(e,t){if(y(t=q(e,t))){if(0<=r.indexOf(t))return"...";r.push(t)}return t})}function ue(e,t){return t.toUpperCase()}function le(e){return e.replace(Ar,ue)}function fe(e){return 1===(e=e.nodeType)||!e||9===e}function pe(e,t){var n,r,i=t.createDocumentFragment(),a=[];if(Dr.test(e)){for(n=i.appendChild(t.createElement("div")),r=(Ir.exec(e)||["",""])[1].toLowerCase(),r=Lr[r]||Lr._default,n.innerHTML=r[1]+e.replace(Pr,"<$1></$2>")+r[2],r=r[0];r--;)n=n.lastChild;a=V(a,n.childNodes),(n=i.firstChild).textContent=""}else a.push(t.createTextNode(e));return i.textContent="",i.innerHTML="",o(a,function(e){i.appendChild(e)}),i}function de(t){if(t instanceof de)return t;var n,r;if(x(t)&&(t=hr(t),n=!0),!(this instanceof de)){if(n&&"<"!==t.charAt(0))throw Mr("nosel");return new de(t)}n?(n=e.document,Se(this,t=(r=Nr.exec(t))?[n.createElement(r[1])]:(r=pe(t,n))?r.childNodes:[])):k(t)?Me(t):Se(this,t)}function he(e){return e.cloneNode(!0)}function $e(e,t){!t&&fe(e)&&Kn.cleanData([e]),e.querySelectorAll&&Kn.cleanData(e.querySelectorAll("*"))}function ge(e){for(var t in e)return!1;return!0}function me(e){var t,n=e.ng339,r=(t=n&&Sr[n])&&t.events;(t=t&&t.data)&&!ge(t)||r&&!ge(r)||(delete Sr[n],e.ng339=void 0)}function ve(e,t,n,r){if(v(r))throw Mr("offargs");var i=(r=be(e))&&r.events,a=r&&r.handle;if(a){if(t){var s=function(t){var r=i[t];v(n)&&I(r||[],n),v(n)&&r&&0<r.length||(e.removeEventListener(t,a),delete i[t])};o(t.split(" "),function(e){s(e),Or[e]&&s(Or[e])})}else for(t in i)"$destroy"!==t&&e.removeEventListener(t,a),delete i[t];me(e)}}function ye(e,t){var n=e.ng339;(n=n&&Sr[n])&&(t?delete n.data[t]:n.data={},me(e))}function be(e,t){var n=(n=e.ng339)&&Sr[n];return t&&!n&&(e.ng339=n=++kr,n=Sr[n]={events:{},data:{},handle:void 0}),n}function xe(e,t,n){if(fe(e)){var r,i=v(n),o=!i&&t&&!y(t),a=!t;if(e=(e=be(e,!o))&&e.data,i)e[le(t)]=n;else{if(a)return e;if(o)return e&&e[le(t)];for(r in t)e[le(r)]=t[r]}}}function we(e,t){return!!e.getAttribute&&-1<(" "+(e.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").indexOf(" "+t+" ")}function Ce(e,t){if(t&&e.setAttribute){var n=(" "+(e.getAttribute("class")||"")+" ").replace(/[\n\t]/g," "),r=n;o(t.split(" "),function(e){e=hr(e),r=r.replace(" "+e+" "," ")}),r!==n&&e.setAttribute("class",hr(r))}}function Ee(e,t){if(t&&e.setAttribute){var n=(" "+(e.getAttribute("class")||"")+" ").replace(/[\n\t]/g," "),r=n;o(t.split(" "),function(e){e=hr(e),-1===r.indexOf(" "+e+" ")&&(r+=e+" ")}),r!==n&&e.setAttribute("class",hr(r))}}function Se(e,t){if(t)if(t.nodeType)e[e.length++]=t;else{var n=t.length;if("number"==typeof n&&t.window!==t){if(n)for(var r=0;r<n;r++)e[e.length++]=t[r]}else e[e.length++]=t}}function ke(e,t){return Ae(e,"$"+(t||"ngController")+"Controller")}function Ae(e,t,n){for(9===e.nodeType&&(e=e.documentElement),t=E(t)?t:[t];e;){for(var r=0,i=t.length;r<i;r++)if(v(n=Kn.data(e,t[r])))return n;e=e.parentNode||11===e.nodeType&&e.host}}function Te(e){for($e(e,!0);e.firstChild;)e.removeChild(e.firstChild)}function Oe(e,t){t||$e(e);var n=e.parentNode;n&&n.removeChild(e)}function Me(t){function n(){e.document.removeEventListener("DOMContentLoaded",n),e.removeEventListener("load",n),t()}"complete"===e.document.readyState?e.setTimeout(t):(e.document.addEventListener("DOMContentLoaded",n),e.addEventListener("load",n))}function Ne(e,t){var n=jr[t.toLowerCase()];return n&&qr[D(e)]&&n}function De(e,t,n){n.call(e,t)}function Ie(e,t,n){var r=t.relatedTarget;r&&(r===e||Rr.call(e,r))||n.call(e,t)}function Pe(){this.$get=function(){return u(de,{hasClass:function(e,t){return e.attr&&(e=e[0]),we(e,t)},addClass:function(e,t){return e.attr&&(e=e[0]),Ee(e,t)},removeClass:function(e,t){return e.attr&&(e=e[0]),Ce(e,t)}})}}function Le(e,t){var n=e&&e.$$hashKey;return n?("function"==typeof n&&(n=e.$$hashKey()),n):"function"===(n=_typeof(e))||"object"===n&&null!==e?e.$$hashKey=n+":"+(t||function(){return++ur})():n+":"+e}function Re(){this._keys=[],this._values=[],this._lastKey=NaN,this._lastIndex=-1}function Ve(e){return(e=Function.prototype.toString.call(e).replace(Kr,"")).match(Br)||e.match(zr)}function je(e,t){function n(e){return function(t,n){if(!y(t))return e(t,n);o(t,s(e))}}function r(e,t){if(re(e,"service"),(k(t)||E(t))&&(t=h.instantiate(t)),!t.$get)throw Yr("pget",e);return d[e+"Provider"]=t}function i(e,t){return function(){var n=b.invoke(t,this);if(m(n))throw Yr("undef",e);return n}}function a(e,t,n){return r(e,{$get:!1!==n?i(e,t):t})}function c(e){te(m(e)||E(e),"modulesToLoad","not an array");var t,n=[];return o(e,function(e){function r(e){var t,n;for(t=0,n=e.length;t<n;t++){var r=e[t],i=h.get(r[0]);i[r[1]].apply(i,r[2])}}if(!p.get(e)){p.set(e,!0);try{x(e)?(t=Jn(e),b.modules[e]=t,n=n.concat(c(t.requires)).concat(t._runBlocks),r(t._invokeQueue),r(t._configBlocks)):k(e)?n.push(h.invoke(e)):E(e)?n.push(h.invoke(e)):ne(e,"module")}catch(t){throw E(e)&&(e=e[e.length-1]),t.message&&t.stack&&-1===t.stack.indexOf(t.message)&&(t=t.message+"\n"+t.stack),Yr("modulerr",e,t.stack||t.message||t)}}}),n}function u(e,n){function r(t,r){if(e.hasOwnProperty(t)){if(e[t]===l)throw Yr("cdep",t+" <- "+f.join(" <- "));return e[t]}try{return f.unshift(t),e[t]=l,e[t]=n(t,r),e[t]}catch(n){throw e[t]===l&&delete e[t],n}finally{f.shift()}}function i(e,n,i){for(var o=[],a=0,s=(e=je.$$annotate(e,t,i)).length;a<s;a++){var c=e[a];if("string"!=typeof c)throw Yr("itkn",c);o.push(n&&n.hasOwnProperty(c)?n[c]:r(c,i))}return o}return{invoke:function(e,t,n,r){if("string"==typeof n&&(r=n,n=null),n=i(e,n,r),E(e)&&(e=e[e.length-1]),r=e,Gn||"function"!=typeof r)r=!1;else{var o=r.$$ngIsClass;M(o)||(o=r.$$ngIsClass=/^class\b/.test(Function.prototype.toString.call(r))),r=o}return r?(n.unshift(null),new(Function.prototype.bind.apply(e,n))):e.apply(t,n)},instantiate:function(e,t,n){var r=E(e)?e[e.length-1]:e;return(e=i(e,t,n)).unshift(null),new(Function.prototype.bind.apply(r,e))},get:r,annotate:je.$$annotate,has:function(t){return d.hasOwnProperty(t+"Provider")||e.hasOwnProperty(t)}}}t=!0===t;var l={},f=[],p=new _r,d={$provide:{provider:n(r),factory:n(a),service:n(function(e,t){return a(e,["$injector",function(e){return e.instantiate(t)}])}),value:n(function(e,t){return a(e,$(t),!1)}),constant:n(function(e,t){re(e,"constant"),d[e]=t,g[e]=t}),decorator:function(e,t){var n=h.get(e+"Provider"),r=n.$get;n.$get=function(){var e=b.invoke(r,n);return b.invoke(t,null,{$delegate:e})}}}},h=d.$injector=u(d,function(e,t){throw cr.isString(t)&&f.push(t),Yr("unpr",f.join(" <- "))}),g={},v=u(g,function(e,t){var n=h.get(e+"Provider",t);return b.invoke(n.$get,n,void 0,e)}),b=v;d.$injectorProvider={$get:$(v)},b.modules=h.modules=oe();var w=c(e);return(b=v.get("$injector")).strictDi=t,o(w,function(e){e&&b.invoke(e)}),b.loadNewModules=function(e){o(c(e),function(e){e&&b.invoke(e)})},b}function qe(){var t=!0;this.disableAutoScrolling=function(){t=!1},this.$get=["$window","$location","$rootScope",function(n,r,i){function o(e){var t;e?(e.scrollIntoView(),k(t=a.yOffset)?t=t():N(t)?(t=t[0],t="fixed"!==n.getComputedStyle(t).position?0:t.getBoundingClientRect().bottom):w(t)||(t=0),t&&(e=e.getBoundingClientRect().top,n.scrollBy(0,e-t))):n.scrollTo(0,0)}function a(e){var t;(e=x(e)?e:w(e)?e.toString():r.hash())?(t=s.getElementById(e))?o(t):(t=function(e){var t=null;return Array.prototype.some.call(e,function(e){if("a"===D(e))return t=e,!0}),t}(s.getElementsByName(e)))?o(t):"top"===e&&o(null):o(null)}var s=n.document;return t&&i.$watch(function(){return r.hash()},function(t,n){t===n&&""===t||function(t,n){"complete"===(n=n||e).document.readyState?n.setTimeout(t):Kn(n).on("load",t)}(function(){i.$evalAsync(a)})}),a}]}function Fe(e,t){return e||t?e?t?(E(e)&&(e=e.join(" ")),E(t)&&(t=t.join(" ")),e+" "+t):e:t:""}function Ue(e){return y(e)?e:{}}function _e(e,t,n,r,i){function a(){w=null,c()}function s(){R(v=m(v=C())?null:v,k)&&(v=k),y=k=v}function c(){var e=y;s(),b===u.url()&&e===v||(b=u.url(),y=v,o(E,function(e){e(u.url(),v)}))}var u=this,l=e.location,f=e.history,p=e.setTimeout,h=e.clearTimeout,$={},g=i(n);u.isMock=!1,u.$$completeOutstandingRequest=g.completeTask,u.$$incOutstandingRequestCount=g.incTaskCount,u.notifyWhenNoOutstandingRequests=g.notifyWhenNoPendingTasks;var v,y,b=l.href,x=t.find("base"),w=null,C=r.history?function(){try{return f.state}catch(e){}}:d;s(),u.url=function(t,n,i){if(m(i)&&(i=null),l!==e.location&&(l=e.location),f!==e.history&&(f=e.history),t){var o=y===i;if(t=en(t).href,b===t&&(!r.history||o))return u;var a=b&&yt(b)===yt(t);return b=t,y=i,!r.history||a&&o?(a||(w=t),n?l.replace(t):a?(n=l,o=(i=t).indexOf("#"),i=-1===o?"":i.substr(o),n.hash=i):l.href=t,l.href!==t&&(w=t)):(f[n?"replaceState":"pushState"](i,"",t),s()),w&&(w=t),u}return(w||l.href).replace(/#$/,"")},u.state=function(){return v};var E=[],S=!1,k=null;u.onUrlChange=function(t){return S||(r.history&&Kn(e).on("popstate",a),Kn(e).on("hashchange",a),S=!0),E.push(t),t},u.$$applicationDestroyed=function(){Kn(e).off("hashchange popstate",a)},u.$$checkUrlChange=c,u.baseHref=function(){var e=x.attr("href");return e?e.replace(/^(https?:)?\/\/[^\/]*/,""):""},u.defer=function(e,t,n){var r;return t=t||0,n=n||g.DEFAULT_TASK_TYPE,g.incTaskCount(n),r=p(function(){delete $[r],g.completeTask(e,n)},t),$[r]=n,r},u.defer.cancel=function(e){if($.hasOwnProperty(e)){var t=$[e];return delete $[e],h(e),g.completeTask(d,t),!0}return!1}}function He(){this.$get=["$window","$log","$sniffer","$document","$$taskTrackerFactory",function(e,t,n,r,i){return new _e(e,r,t,n,i)}]}function Be(){this.$get=function(){function e(e,n){function i(e){e!==p&&(d?d===e&&(d=e.n):d=e,o(e.n,e.p),o(e,p),(p=e).n=null)}function o(e,t){e!==t&&(e&&(e.p=t),t&&(t.n=e))}if(e in t)throw r("$cacheFactory")("iid",e);var a=0,s=u({},n,{id:e}),c=oe(),l=n&&n.capacity||Number.MAX_VALUE,f=oe(),p=null,d=null;return t[e]={put:function(e,t){if(!m(t)){if(l<Number.MAX_VALUE)i(f[e]||(f[e]={key:e}));return e in c||a++,c[e]=t,a>l&&this.remove(d.key),t}},get:function(e){if(l<Number.MAX_VALUE){var t=f[e];if(!t)return;i(t)}return c[e]},remove:function(e){if(l<Number.MAX_VALUE){var t=f[e];if(!t)return;t===p&&(p=t.p),t===d&&(d=t.n),o(t.n,t.p),delete f[e]}e in c&&(delete c[e],a--)},removeAll:function(){c=oe(),a=0,f=oe(),p=d=null},destroy:function(){f=s=c=null,delete t[e]},info:function(){return u({},s,{size:a})}}}var t={};return e.info=function(){var e={};return o(t,function(t,n){e[n]=t.info()}),e},e.get=function(e){return t[e]},e}}function ze(){this.$get=["$cacheFactory",function(e){return e("templates")}]}function We(t,n){function r(e,t,n){var r=/^([@&]|[=<](\*?))(\??)\s*([\w$]*)$/,i=oe();return o(e,function(e,o){if((e=e.trim())in w)i[o]=w[e];else{var a=e.match(r);if(!a)throw ri("iscp",t,o,e,n?"controller bindings definition":"isolate scope definition");i[o]={mode:a[1][0],collection:"*"===a[2],optional:"?"===a[3],attrName:a[4]||o},a[4]&&(w[e]=i[o])}}),i}function i(e){var t=e.require||e.controller&&e.name;return!E(t)&&y(t)&&o(t,function(e,n){var r=e.match(g);e.substring(r[0].length)||(t[n]=r[0]+n)}),t}var a={},c=/^\s*directive:\s*([\w-]+)\s+(.*)$/,l=/(([\w-]+)(?::([^;]+))?;?)/,f=function(e){var t,n={};for(e=e.split(","),t=0;t<e.length;t++)n[e[t]]=!0;return n}("ngSrc,ngSrcset,src,srcset"),g=/^(?:(\^\^?)?(\?)?(\^\^?)?)?/,b=/^(on[a-z]+|formaction)$/,w=oe();this.directive=function e(n,r){return te(n,"name"),re(n,"directive"),x(n)?(function(e){var t=e.charAt(0);if(!t||t!==er(t))throw ri("baddir",e);if(e!==e.trim())throw ri("baddir",e)}(n),te(r,"directiveFactory"),a.hasOwnProperty(n)||(a[n]=[],t.factory(n+"Directive",["$injector","$exceptionHandler",function(e,t){var r=[];return o(a[n],function(o,a){try{var s=e.invoke(o);k(s)?s={compile:$(s)}:!s.compile&&s.link&&(s.compile=$(s.link)),s.priority=s.priority||0,s.index=a,s.name=s.name||n,s.require=i(s);var c=s,u=s.restrict;if(u&&(!x(u)||!/[EACM]/.test(u)))throw ri("badrestrict",u,n);c.restrict=u||"EA",s.$$moduleName=o.$$moduleName,r.push(s)}catch(e){t(e)}}),r}])),a[n].push(r)):o(n,s(e)),this},this.component=function e(t,n){function r(e){function t(t){return k(t)||E(t)?function(n,r){return e.invoke(t,this,{$element:n,$attrs:r})}:t}var r=n.template||n.templateUrl?n.template:"",a={controller:i,controllerAs:Xe(n.controller)||n.controllerAs||"$ctrl",template:t(r),templateUrl:t(n.templateUrl),transclude:n.transclude,scope:{},bindToController:n.bindings||{},restrict:"E",require:n.require};return o(n,function(e,t){"$"===t.charAt(0)&&(a[t]=e)}),a}if(!x(t))return o(t,s(j(this,e))),this;var i=n.controller||function(){};return o(n,function(e,t){"$"===t.charAt(0)&&(r[t]=e,k(i)&&(i[t]=e))}),r.$inject=["$injector"],this.directive(t,r)},this.aHrefSanitizationWhitelist=function(e){return v(e)?(n.aHrefSanitizationWhitelist(e),this):n.aHrefSanitizationWhitelist()},this.imgSrcSanitizationWhitelist=function(e){return v(e)?(n.imgSrcSanitizationWhitelist(e),this):n.imgSrcSanitizationWhitelist()};var C=!0;this.debugInfoEnabled=function(e){return v(e)?(C=e,this):C};var A=!1;this.strictComponentBindingsEnabled=function(e){return v(e)?(A=e,this):A};var T=10;this.onChangesTtl=function(e){return arguments.length?(T=e,this):T};var N=!0;this.commentDirectivesEnabled=function(e){return arguments.length?(N=e,this):N};var P=!0;this.cssClassDirectivesEnabled=function(e){return arguments.length?(P=e,this):P};var V=oe();this.addPropertySecurityContext=function(e,t,n){var r=e.toLowerCase()+"|"+t.toLowerCase();if(r in V&&V[r]!==n)throw ri("ctxoverride",e,t,V[r],n);return V[r]=n,this},function(){function e(e,t){o(t,function(t){V[t.toLowerCase()]=e})}e(Ii.HTML,["iframe|srcdoc","*|innerHTML","*|outerHTML"]),e(Ii.CSS,["*|style"]),e(Ii.URL,"area|href area|ping a|href a|ping blockquote|cite body|background del|cite input|src ins|cite q|cite".split(" ")),e(Ii.MEDIA_URL,"audio|src img|src img|srcset source|src source|srcset track|src video|src video|poster".split(" ")),e(Ii.RESOURCE_URL,"*|formAction applet|code applet|codebase base|href embed|src frame|src form|action head|profile html|manifest iframe|src link|href media|src object|codebase object|data script|src".split(" "))}(),this.$get=["$injector","$interpolate","$exceptionHandler","$templateRequest","$parse","$controller","$rootScope","$sce","$animate",function(t,n,i,s,$,v,w,q,F){function U(){try{if(!--Me)throw Se=void 0,ri("infchng",T);w.$apply(function(){for(var e=0,t=Se.length;e<t;++e)try{Se[e]()}catch(e){i(e)}Se=void 0})}finally{Me++}}function _(e,t){if(!e)return e;if(!x(e))throw ri("srcset",t,e.toString());for(var n="",r=hr(e),i=/(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/,o=(i=/\s/.test(r)?i:/(,)/,r=r.split(i),i=Math.floor(r.length/2),0);o<i;o++){var a=2*o;n=(n=n+q.getTrustedMediaUrl(hr(r[a])))+" "+hr(r[a+1])}return r=hr(r[2*o]).split(/\s/),n+=q.getTrustedMediaUrl(hr(r[0])),2===r.length&&(n+=" "+hr(r[1])),n}function H(e,t){if(t){var n,r,i,o=Object.keys(t);for(n=0,r=o.length;n<r;n++)this[i=o[n]]=t[i]}else this.$attr={};this.$$element=e}function B(e,t){try{e.addClass(t)}catch(e){}}function W(e,t,n,r,i){e instanceof Kn||(e=Kn(e));var o=G(e,t,e,n,r,i);W.$$addScopeClass(e);var a=null;return function(t,n,r){if(!e)throw ri("multilink");te(t,"scope"),i&&i.needsNewScope&&(t=t.$parent.$new());var s=(r=r||{}).parentBoundTranscludeFn,c=r.transcludeControllers;if(r=r.futureParentElement,s&&s.$$boundTransclude&&(s=s.$$boundTransclude),a||(a=(r=r&&r[0])&&"foreignobject"!==D(r)&&or.call(r).match(/SVG/)?"svg":"html"),r="html"!==a?Kn(ge(a,Kn("<div></div>").append(e).html())):n?Vr.clone.call(e):e,c)for(var u in c)r.data("$"+u+"Controller",c[u].instance);return W.$$addScopeInfo(r,t),n&&n(r,t),o&&o(t,r,r,s),n||(e=o=null),r}}function G(e,t,n,r,i,o){for(var a,s,c,u,l,f=[],p=E(e)||e instanceof Kn,d=0;d<e.length;d++)a=new H,11===Gn&&K(e,d,p),(o=(s=J(e[d],[],a,0===d?r:void 0,i)).length?re(s,e[d],a,t,n,null,[],[],o):null)&&o.scope&&W.$$addScopeClass(a.$$element),a=o&&o.terminal||!(c=e[d].childNodes)||!c.length?null:G(c,o?(o.transcludeOnThisElement||!o.templateOnThisElement)&&o.transclude:t),(o||a)&&(f.push(d,o,a),u=!0,l=l||o),o=null;return u?function(e,n,r,i){var o,a,s,c,u,p;if(l)for(p=Array(n.length),c=0;c<f.length;c+=3)p[o=f[c]]=n[o];else p=n;for(c=0,u=f.length;c<u;)a=p[f[c++]],n=f[c++],o=f[c++],n?(n.scope?(s=e.$new(),W.$$addScopeInfo(Kn(a),s)):s=e,n(o,s,a,r,n.transcludeOnThisElement?Y(e,n.transclude,i):!n.templateOnThisElement&&i?i:!i&&t?Y(e,t):null)):o&&o(e,a.childNodes,void 0,i)}:null}function K(e,t,n){var r,i=e[t],o=i.parentNode;if(i.nodeType===Cr)for(;(r=o?i.nextSibling:e[t+1])&&r.nodeType===Cr;)i.nodeValue+=r.nodeValue,r.parentNode&&r.parentNode.removeChild(r),n&&r===e[t+1]&&e.splice(t+1,1)}function Y(e,t,n){function r(r,i,o,a,s){return r||((r=e.$new(!1,s)).$$transcluded=!0),t(r,i,{parentBoundTranscludeFn:n,transcludeControllers:o,futureParentElement:a})}var i,o=r.$$slots=oe();for(i in t.$$slots)o[i]=t.$$slots[i]?Y(e,t.$$slots[i],n):null;return r}function J(e,t,n,r,o){var a,s=n.$attr;switch(e.nodeType){case 1:ce(t,Ke(a=D(e)),"E",r,o);for(var c,u,f,p,d,h=e.attributes,g=0,m=h&&h.length;g<m;g++){var v,b=!1,C=!1,E=!1,S=!1,k=!1;u=(c=h[g]).name,p=c.value,(d=(f=Ke(u.toLowerCase())).match(Le))?(E="Attr"===d[1],S="Prop"===d[1],k="On"===d[1],u=u.replace(oi,"").toLowerCase().substr(4+d[1].length).replace(/_(.)/g,function(e,t){return t.toUpperCase()})):(v=f.match(Re))&&ue(v[1])&&(b=u,C=u.substr(0,u.length-5)+"end",u=u.substr(0,u.length-6)),S||k?(n[f]=p,s[f]=c.name,S?ve(e,t,f,u):t.push(Fn($,w,i,f,u,!1))):(s[f=Ke(u.toLowerCase())]=u,!E&&n.hasOwnProperty(f)||(n[f]=p,Ne(e,f)&&(n[f]=!0)),ye(e,t,p,f,E),ce(t,f,"A",r,o,b,C))}if("input"===a&&"hidden"===e.getAttribute("type")&&e.setAttribute("autocomplete","off"),!Oe)break;if(y(s=e.className)&&(s=s.animVal),x(s)&&""!==s)for(;e=l.exec(s);)ce(t,f=Ke(e[2]),"C",r,o)&&(n[f]=hr(e[3])),s=s.substr(e.index+e[0].length);break;case Cr:$e(t,e.nodeValue);break;case 8:if(!Te)break;X(e,t,n,r,o)}return t.sort(pe),t}function X(e,t,n,r,i){try{var o=c.exec(e.nodeValue);if(o){var a=Ke(o[1]);ce(t,a,"M",r,i)&&(n[a]=hr(o[2]))}}catch(e){}}function Z(e,t,n){var r=[],i=0;if(t&&e.hasAttribute&&e.hasAttribute(t))do{if(!e)throw ri("uterdir",t,n);1===e.nodeType&&(e.hasAttribute(t)&&i++,e.hasAttribute(n)&&i--),r.push(e),e=e.nextSibling}while(0<i);else r.push(e);return Kn(r)}function Q(e,t,n){return function(r,i,o,a,s){return i=Z(i[0],t,n),e(r,i,o,a,s)}}function ne(e,t,n,r,i,o){var a;return e?W(t,n,r,i,o):function(){return a||(a=W(t,n,r,i,o),t=n=o=null),a.apply(this,arguments)}}function re(t,n,r,a,s,c,l,f,p){function d(e,t,n,r){e&&(n&&(e=Q(e,n,r)),e.require=$.require,e.directiveName=g,(A===$||$.$$isolateScope)&&(e=xe(e,{isolateScope:!0})),l.push(e)),t&&(n&&(t=Q(t,n,r)),t.require=$.require,t.directiveName=g,(A===$||$.$$isolateScope)&&(t=xe(t,{isolateScope:!0})),f.push(t))}function h(e,t,a,s,c){var p,d,h,$,g,v,b,x;for(p in n===a?(s=r,x=r.$$element):s=new H(x=Kn(a),r),g=t,A?$=t.$new(!0):C&&(g=t.$parent),c&&((b=function(e,t,n,r){var i;if(O(e)||(r=n,n=t,t=e,e=void 0),P&&(i=v),n||(n=P?x.parent():x),!r)return c(e,t,i,n,M);var o=c.$$slots[r];if(o)return o(e,t,i,n,M);if(m(o))throw ri("noslot",r,z(x))}).$$boundTransclude=c,b.isSlotFilled=function(e){return!!c.$$slots[e]}),S&&(v=ae(x,s,b,S,$,t,A)),A&&(W.$$addScopeInfo(x,$,!0,!(T&&(T===A||T===A.$$originalDirective))),W.$$addScopeClass(x,!0),$.$$isolateBindings=A.$$isolateBindings,(d=Ee(t,s,$,$.$$isolateBindings,A)).removeWatches&&$.$on("$destroy",d.removeWatches)),v){d=S[p],h=v[p];var w=d.$$bindings.bindToController;h.instance=h(),x.data("$"+d.name+"Controller",h.instance),h.bindingInfo=Ee(g,s,h.instance,w,d)}for(o(S,function(e,t){var n=e.require;e.bindToController&&!E(n)&&y(n)&&u(v[t].instance,ie(t,n,x,v))}),o(v,function(e){var t=e.instance;if(k(t.$onChanges))try{t.$onChanges(e.bindingInfo.initialChanges)}catch(e){i(e)}if(k(t.$onInit))try{t.$onInit()}catch(e){i(e)}k(t.$doCheck)&&(g.$watch(function(){t.$doCheck()}),t.$doCheck()),k(t.$onDestroy)&&g.$on("$destroy",function(){t.$onDestroy()})}),p=0,d=l.length;p<d;p++)we(h=l[p],h.isolateScope?$:t,x,s,h.require&&ie(h.directiveName,h.require,x,v),b);var M=t;for(A&&(A.template||null===A.templateUrl)&&(M=$),e&&e(M,a.childNodes,void 0,c),p=f.length-1;0<=p;p--)we(h=f[p],h.isolateScope?$:t,x,s,h.require&&ie(h.directiveName,h.require,x,v),b);o(v,function(e){k((e=e.instance).$postLink)&&e.$postLink()})}p=p||{};for(var $,g,v,b,x,w=-Number.MAX_VALUE,C=p.newScopeDirective,S=p.controllerDirectives,A=p.newIsolateScopeDirective,T=p.templateDirective,M=p.nonTlbTranscludeDirective,N=!1,I=!1,P=p.hasElementTranscludeDirective,L=r.$$element=Kn(n),R=a,V=!1,q=!1,F=0,U=t.length;F<U;F++){var _=($=t[F]).$$start,B=$.$$end;if(_&&(L=Z(n,_,B)),v=void 0,w>$.priority)break;if((x=$.scope)&&($.templateUrl||(y(x)?(de("new/isolated scope",A||C,$,L),A=$):de("new/isolated scope",A,$,L)),C=C||$),g=$.name,!V&&($.replace&&($.templateUrl||$.template)||$.transclude&&!$.$$tlb)){for(x=F+1;V=t[x++];)if(V.transclude&&!V.$$tlb||V.replace&&(V.templateUrl||V.template)){q=!0;break}V=!0}if(!$.templateUrl&&$.controller&&(S=S||oe(),de("'"+g+"' controller",S[g],$,L),S[g]=$),x=$.transclude)if(N=!0,$.$$tlb||(de("transclusion",M,$,L),M=$),"element"===x)P=!0,w=$.priority,v=L,L=r.$$element=Kn(W.$$createComment(g,r[g])),n=L[0],be(s,nr.call(v,0),n),R=ne(q,v,a,w,c&&c.name,{nonTlbTranscludeDirective:M});else{var G=oe();if(y(x)){v=e.document.createDocumentFragment();var K=oe(),Y=oe();for(var X in o(x,function(e,t){var n="?"===e.charAt(0);e=n?e.substring(1):e,K[e]=t,G[t]=null,Y[t]=n}),o(L.contents(),function(t){var n=K[Ke(D(t))];n?(Y[n]=!0,G[n]=G[n]||e.document.createDocumentFragment(),G[n].appendChild(t)):v.appendChild(t)}),o(Y,function(e,t){if(!e)throw ri("reqslot",t)}),G)G[X]&&(R=Kn(G[X].childNodes),G[X]=ne(q,R,a));v=Kn(v.childNodes)}else v=Kn(he(n)).contents();L.empty(),(R=ne(q,v,a,void 0,void 0,{needsNewScope:$.$$isolateScope||$.$$newScope})).$$slots=G}if($.template)if(I=!0,de("template",T,$,L),T=$,x=k($.template)?$.template(L,r):$.template,x=Pe(x),$.replace){if(c=$,v=Dr.test(x)?Je(ge($.templateNamespace,hr(x))):[],n=v[0],1!==v.length||1!==n.nodeType)throw ri("tplrt",g,"");be(s,L,n),x=J(n,[],U={$attr:{}});var ee=t.splice(F+1,t.length-(F+1));(A||C)&&se(x,A,C),t=t.concat(x).concat(ee),le(r,U),U=t.length}else L.html(x);if($.templateUrl)I=!0,de("template",T,$,L),T=$,$.replace&&(c=$),h=fe(t.splice(F,t.length-F),L,r,s,N&&R,l,f,{controllerDirectives:S,newScopeDirective:C!==$&&C,newIsolateScopeDirective:A,templateDirective:T,nonTlbTranscludeDirective:M}),U=t.length;else if($.compile)try{b=$.compile(L,r,R);var te=$.$$originalDirective||$;k(b)?d(null,j(te,b),_,B):b&&d(j(te,b.pre),j(te,b.post),_,B)}catch(e){i(e,z(L))}$.terminal&&(h.terminal=!0,w=Math.max(w,$.priority))}return h.scope=C&&!0===C.scope,h.transcludeOnThisElement=N,h.templateOnThisElement=I,h.transclude=R,p.hasElementTranscludeDirective=P,h}function ie(e,t,n,r){var i;if(x(t)){var a=t.match(g);t=t.substring(a[0].length);var s=a[1]||a[3];a="?"===a[2];if("^^"===s?n=n.parent():i=(i=r&&r[t])&&i.instance,!i){var c="$"+t+"Controller";i="^^"===s&&n[0]&&9===n[0].nodeType?null:s?n.inheritedData(c):n.data(c)}if(!i&&!a)throw ri("ctreq",t,e)}else if(E(t))for(i=[],s=0,a=t.length;s<a;s++)i[s]=ie(e,t[s],n,r);else y(t)&&(i={},o(t,function(t,o){i[o]=ie(e,t,n,r)}));return i||null}function ae(e,t,n,r,i,o,a){var s,c=oe();for(s in r){var u=r[s],l={$scope:u===a||u.$$isolateScope?i:o,$element:e,$attrs:t,$transclude:n},f=u.controller;"@"===f&&(f=t[u.name]),l=v(f,l,!0,u.controllerAs),c[u.name]=l,e.data("$"+u.name+"Controller",l.instance)}return c}function se(e,t,n){for(var r=0,i=e.length;r<i;r++)e[r]=p(e[r],{$$isolateScope:t,$$newScope:n})}function ce(e,n,i,o,s,c,u){if(n===s)return null;var l=null;if(a.hasOwnProperty(n))for(var f=0,d=(s=t.get(n+"Directive")).length;f<d;f++)if(n=s[f],(m(o)||o>n.priority)&&-1!==n.restrict.indexOf(i)){if(c&&(n=p(n,{$$start:c,$$end:u})),!n.$$bindings){var h=l=n,$=n.name,g={isolateScope:null,bindToController:null};if(y(h.scope)&&(!0===h.bindToController?(g.bindToController=r(h.scope,$,!0),g.isolateScope={}):g.isolateScope=r(h.scope,$,!1)),y(h.bindToController)&&(g.bindToController=r(h.bindToController,$,!0)),g.bindToController&&!h.controller)throw ri("noctrl",$);y((l=l.$$bindings=g).isolateScope)&&(n.$$isolateBindings=l.isolateScope)}e.push(n),l=n}return l}function ue(e){if(a.hasOwnProperty(e))for(var n=t.get(e+"Directive"),r=0,i=n.length;r<i;r++)if((e=n[r]).multiElement)return!0;return!1}function le(e,t){var n=t.$attr,r=e.$attr;o(e,function(r,i){"$"!==i.charAt(0)&&(t[i]&&t[i]!==r&&(r=r.length?r+("style"===i?";":" ")+t[i]:t[i]),e.$set(i,r,!0,n[i]))}),o(t,function(t,i){e.hasOwnProperty(i)||"$"===i.charAt(0)||(e[i]=t,"class"!==i&&"style"!==i&&(r[i]=n[i]))})}function fe(e,t,n,r,a,c,u,l){var f,d,h=[],$=t[0],g=e.shift(),m=p(g,{templateUrl:null,transclude:null,replace:null,$$originalDirective:g}),v=k(g.templateUrl)?g.templateUrl(t,n):g.templateUrl,b=g.templateNamespace;return t.empty(),s(v).then(function(i){var s,p;if(i=Pe(i),g.replace){if(i=Dr.test(i)?Je(ge(b,hr(i))):[],s=i[0],1!==i.length||1!==s.nodeType)throw ri("tplrt",g.name,v);i={$attr:{}},be(r,t,s);var x=J(s,[],i);y(g.scope)&&se(x,!0),e=x.concat(e),le(n,i)}else s=$,t.html(i);for(e.unshift(m),f=re(e,s,n,a,t,g,c,u,l),o(r,function(e,n){e===s&&(r[n]=t[0])}),d=G(t[0].childNodes,a);h.length;){i=h.shift(),p=h.shift();var w=h.shift(),C=h.shift();x=t[0];if(!i.$$destroyed){if(p!==$){var E=p.className;l.hasElementTranscludeDirective&&g.replace||(x=he(s)),be(w,Kn(p),x),B(Kn(x),E)}p=f.transcludeOnThisElement?Y(i,f.transclude,C):C,f(d,i,x,r,p)}}h=null}).catch(function(e){S(e)&&i(e)}),function(e,t,n,r,i){e=i,t.$$destroyed||(h?h.push(t,n,r,e):(f.transcludeOnThisElement&&(e=Y(t,f.transclude,i)),f(d,t,n,r,e)))}}function pe(e,t){var n=t.priority-e.priority;return 0!==n?n:e.name!==t.name?e.name<t.name?-1:1:e.index-t.index}function de(e,t,n,r){function i(e){return e?" (module: "+e+")":""}if(t)throw ri("multidir",t.name,i(t.$$moduleName),n.name,i(n.$$moduleName),e,z(r))}function $e(e,t){var r=n(t,!0);r&&e.push({priority:0,compile:function(e){var t=!!(e=e.parent()).length;return t&&W.$$addBindingClass(e),function(e,n){var i=n.parent();t||W.$$addBindingClass(i),W.$$addBindingInfo(i,r.expressions),e.$watch(r,function(e){n[0].nodeValue=e})}}})}function ge(t,n){switch(t=er(t||"html")){case"svg":case"math":var r=e.document.createElement("div");return r.innerHTML="<"+t+">"+n+"</"+t+">",r.childNodes[0].childNodes;default:return n}}function me(e){return _(q.valueOf(e),"ng-prop-srcset")}function ve(e,t,n,r){if(b.test(r))throw ri("nodomevents");var i=function(e,t){var n=t.toLowerCase();return V[e+"|"+n]||V["*|"+n]}(e=D(e),r),o=h;"srcset"!==r||"img"!==e&&"source"!==e?i&&(o=q.getTrusted.bind(q,i)):o=me,t.push({priority:100,compile:function(e,t){var i=$(t[n]),a=$(t[n],function(e){return q.valueOf(e)});return{pre:function(e,t){function n(){var n=i(e);t[0][r]=o(n)}n(),e.$watch(a,n)}}}})}function ye(e,t,r,i,o){var a=D(e),s=function(e,t){return"srcdoc"===t?q.HTML:"src"===t||"ngSrc"===t?-1===["img","video","audio","source","track"].indexOf(e)?q.RESOURCE_URL:q.MEDIA_URL:"xlinkHref"===t?"image"===e?q.MEDIA_URL:"a"===e?q.URL:q.RESOURCE_URL:"form"===e&&"action"===t||"base"===e&&"href"===t||"link"===e&&"href"===t?q.RESOURCE_URL:"a"!==e||"href"!==t&&"ngHref"!==t?void 0:q.URL}(a,i),c=f[i]||o,u=n(r,!o,s,c);if(u){if("multiple"===i&&"select"===a)throw ri("selmulti",z(e));if(b.test(i))throw ri("nodomevents");t.push({priority:100,compile:function(){return{pre:function(e,t,o){t=o.$$observers||(o.$$observers=oe());var a=o[i];a!==r&&(u=a&&n(a,!0,s,c),r=a),u&&(o[i]=u(e),(t[i]||(t[i]=[])).$$inter=!0,(o.$$observers&&o.$$observers[i].$$scope||e).$watch(u,function(e,t){"class"===i&&e!==t?o.$updateClass(e,t):o.$set(i,e)}))}}}})}}function be(t,n,r){var i,o,a=n[0],s=n.length,c=a.parentNode;if(t)for(i=0,o=t.length;i<o;i++)if(t[i]===a){t[i++]=r,o=i+s-1;for(var u=t.length;i<u;i++,o++)o<u?t[i]=t[o]:delete t[i];t.length-=s-1,t.context===a&&(t.context=r);break}for(c&&c.replaceChild(r,a),t=e.document.createDocumentFragment(),i=0;i<s;i++)t.appendChild(n[i]);for(Kn.hasData(a)&&(Kn.data(r,Kn.data(a)),Kn(a).off("$destroy")),Kn.cleanData(t.querySelectorAll("*")),i=1;i<s;i++)delete n[i];n[0]=r,n.length=1}function xe(e,t){return u(function(){return e.apply(null,arguments)},e,t)}function we(e,t,n,r,o,a){try{e(t,n,r,o,a)}catch(e){i(e,z(n))}}function Ce(e,t){if(A)throw ri("missingattr",e,t)}function Ee(e,t,r,i,a){function s(t,n,i){k(r.$onChanges)&&!L(n,i)&&(Se||(e.$$postDigest(U),Se=[]),u||(u={},Se.push(c)),u[t]&&(i=u[t].previousValue),u[t]=new Ge(i,n))}function c(){r.$onChanges(u),u=void 0}var u,l=[],f={};return o(i,function(i,o){var c,u,p,h,g=i.attrName,m=i.optional;switch(i.mode){case"@":m||Qn.call(t,g)||(Ce(g,a.name),r[o]=t[g]=void 0),m=t.$observe(g,function(e){(x(e)||M(e))&&(s(o,e,r[o]),r[o]=e)}),t.$$observers[g].$$scope=e,x(c=t[g])?r[o]=n(c)(e):M(c)&&(r[o]=c),f[o]=new Ge(ii,r[o]),l.push(m);break;case"=":if(!Qn.call(t,g)){if(m)break;Ce(g,a.name),t[g]=void 0}if(m&&!t[g])break;u=$(t[g]),h=u.literal?R:L,p=u.assign||function(){throw c=r[o]=u(e),ri("nonassign",t[g],g,a.name)},c=r[o]=u(e),(m=function(t){return h(t,r[o])||(h(t,c)?p(e,t=r[o]):r[o]=t),c=t}).$stateful=!0,m=i.collection?e.$watchCollection(t[g],m):e.$watch($(t[g],m),null,u.literal),l.push(m);break;case"<":if(!Qn.call(t,g)){if(m)break;Ce(g,a.name),t[g]=void 0}if(m&&!t[g])break;var v=(u=$(t[g])).literal,y=r[o]=u(e);f[o]=new Ge(ii,r[o]),m=e[i.collection?"$watchCollection":"$watch"](u,function(e,t){if(t===e){if(t===y||v&&R(t,y))return;t=y}s(o,e,t),r[o]=e}),l.push(m);break;case"&":if(m||Qn.call(t,g)||Ce(g,a.name),(u=t.hasOwnProperty(g)?$(t[g]):d)===d&&m)break;r[o]=function(t){return u(e,t)}}}),{initialChanges:f,removeWatches:l.length&&function(){for(var e=0,t=l.length;e<t;++e)l[e]()}}}var Se,ke=/^\w/,Ae=e.document.createElement("div"),Te=N,Oe=P,Me=T;H.prototype={$normalize:Ke,$addClass:function(e){e&&0<e.length&&F.addClass(this.$$element,e)},$removeClass:function(e){e&&0<e.length&&F.removeClass(this.$$element,e)},$updateClass:function(e,t){var n=Ye(e,t);n&&n.length&&F.addClass(this.$$element,n),(n=Ye(t,e))&&n.length&&F.removeClass(this.$$element,n)},$set:function(e,t,n,r){var a=Ne(this.$$element[0],e),s=Fr[e],c=e;a?(this.$$element.prop(e,t),r=a):s&&(this[s]=t,c=s),this[e]=t,r?this.$attr[e]=r:(r=this.$attr[e])||(this.$attr[e]=r=ee(e,"-")),"img"===D(this.$$element)&&"srcset"===e&&(this[e]=t=_(t,"$set('srcset', value)")),!1!==n&&(null===t||m(t)?this.$$element.removeAttr(r):ke.test(r)?a&&!1===t?this.$$element.removeAttr(r):this.$$element.attr(r,t):function(e,t,n){Ae.innerHTML="<span "+t+">";var r=(t=Ae.firstChild.attributes)[0];t.removeNamedItem(r.name),r.value=n,e.attributes.setNamedItem(r)}(this.$$element[0],r,t)),(e=this.$$observers)&&o(e[c],function(e){try{e(t)}catch(e){i(e)}})},$observe:function(e,t){var n=this,r=n.$$observers||(n.$$observers=oe()),i=r[e]||(r[e]=[]);return i.push(t),w.$evalAsync(function(){i.$$inter||!n.hasOwnProperty(e)||m(n[e])||t(n[e])}),function(){I(i,t)}}};var De=n.startSymbol(),Ie=n.endSymbol(),Pe="{{"===De&&"}}"===Ie?h:function(e){return e.replace(/\{\{/g,De).replace(/}}/g,Ie)},Le=/^ng(Attr|Prop|On)([A-Z].*)$/,Re=/^(.+)Start$/;return W.$$addBindingInfo=C?function(e,t){var n=e.data("$binding")||[];E(t)?n=n.concat(t):n.push(t),e.data("$binding",n)}:d,W.$$addBindingClass=C?function(e){B(e,"ng-binding")}:d,W.$$addScopeInfo=C?function(e,t,n,r){e.data(n?r?"$isolateScopeNoTemplate":"$isolateScope":"$scope",t)}:d,W.$$addScopeClass=C?function(e,t){B(e,t?"ng-isolate-scope":"ng-scope")}:d,W.$$createComment=function(t,n){var r="";return C&&(r=" "+(t||"")+": ",n&&(r+=n+" ")),e.document.createComment(r)},W}]}function Ge(e,t){this.previousValue=e,this.currentValue=t}function Ke(e){return e.replace(oi,"").replace(ai,function(e,t,n){return n?t.toUpperCase():t})}function Ye(e,t){var n="",r=e.split(/\s+/),i=t.split(/\s+/),o=0;e:for(;o<r.length;o++){for(var a=r[o],s=0;s<i.length;s++)if(a===i[s])continue e;n+=(0<n.length?" ":"")+a}return n}function Je(e){var t=(e=Kn(e)).length;if(1>=t)return e;for(;t--;){var n=e[t];(8===n.nodeType||n.nodeType===Cr&&""===n.nodeValue.trim())&&rr.call(e,t,1)}return e}function Xe(e,t){if(t&&x(t))return t;if(x(e)){var n=ci.exec(e);if(n)return n[3]}}function Ze(){var e={};this.has=function(t){return e.hasOwnProperty(t)},this.register=function(t,n){re(t,"controller"),y(t)?u(e,t):e[t]=n},this.$get=["$injector",function(t){function n(e,t,n,i){if(!e||!y(e.$scope))throw r("$controller")("noscp",i,t);e.$scope[t]=n}return function(r,i,o,a){var s,c,l;if(o=!0===o,a&&x(a)&&(l=a),x(r)){if(!(a=r.match(ci)))throw si("ctrlfmt",r);if(c=a[1],l=l||a[3],!(r=e.hasOwnProperty(c)?e[c]:function(e,t,n){if(!t)return e;for(var r,i=e,o=(t=t.split(".")).length,a=0;a<o;a++)r=t[a],e&&(e=(i=e)[r]);return!n&&k(e)?j(i,e):e}(i.$scope,c,!0)))throw si("ctrlreg",c);ne(r,c,!0)}return o?(o=(E(r)?r[r.length-1]:r).prototype,s=Object.create(o||null),l&&n(i,l,s,c||r.name),u(function(){var e=t.invoke(r,s,i,c);return e!==s&&(y(e)||k(e))&&(s=e,l&&n(i,l,s,c||r.name)),s},{instance:s,identifier:l})):(s=t.instantiate(r,i,c),l&&n(i,l,s,c||r.name),s)}}]}function Qe(){this.$get=["$window",function(e){return Kn(e.document)}]}function et(){this.$get=["$document","$rootScope",function(e,t){function n(){i=r.hidden}var r=e[0],i=r&&r.hidden;return e.on("visibilitychange",n),t.$on("$destroy",function(){e.off("visibilitychange",n)}),function(){return i}}]}function tt(){this.$get=["$log",function(e){return function(t,n){e.error.apply(e,arguments)}}]}function nt(e){return y(e)?C(e)?e.toISOString():F(e):e}function rt(){this.$get=function(){return function(e){if(!e)return"";var t=[];return a(e,function(e,n){null===e||m(e)||k(e)||(E(e)?o(e,function(e){t.push(Y(n)+"="+Y(nt(e)))}):t.push(Y(n)+"="+Y(nt(e))))}),t.join("&")}}}function it(){this.$get=function(){return function(e){if(!e)return"";var t=[];return function e(n,r,i){E(n)?o(n,function(t,n){e(t,r+"["+(y(t)?n:"")+"]")}):y(n)&&!C(n)?a(n,function(t,n){e(t,r+(i?"":"[")+n+(i?"":"]"))}):(k(n)&&(n=n()),t.push(Y(r)+"="+(null==n?"":Y(nt(n)))))}(e,"",!0),t.join("&")}}}function ot(e,t){if(x(e)){var n,r,i=e.replace(hi,"").trim();if(i)if((r=n=(n=t("Content-Type"))&&0===n.indexOf(li))||(r=(r=i.match(pi))&&di[r[0]].test(i)),r)try{e=U(i)}catch(t){if(!n)return e;throw $i("baddata",e,t)}}return e}function at(e){var t,n=oe();return x(e)?o(e.split("\n"),function(e){t=e.indexOf(":");var r=er(hr(e.substr(0,t)));e=hr(e.substr(t+1)),r&&(n[r]=n[r]?n[r]+", "+e:e)}):y(e)&&o(e,function(e,t){var r=er(t),i=hr(e);r&&(n[r]=n[r]?n[r]+", "+i:i)}),n}function st(e){var t;return function(n){return t||(t=at(e)),n?(void 0===(n=t[er(n)])&&(n=null),n):t}}function ct(e,t,n,r){return k(r)?r(e,t,n):(o(r,function(r){e=r(e,t,n)}),e)}function ut(){var e=this.defaults={transformResponse:[ot],transformRequest:[function(e){return y(e)&&"[object File]"!==or.call(e)&&"[object Blob]"!==or.call(e)&&"[object FormData]"!==or.call(e)?F(e):e}],headers:{common:{Accept:"application/json, text/plain, */*"},post:se(fi),put:se(fi),patch:se(fi)},xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",paramSerializer:"$httpParamSerializer",jsonpCallbackParam:"callback"},t=!1;this.useApplyAsync=function(e){return v(e)?(t=!!e,this):t};var n=this.interceptors=[],i=this.xsrfWhitelistedOrigins=[];this.$get=["$browser","$httpBackend","$$cookieReader","$cacheFactory","$rootScope","$q","$injector","$sce",function(a,s,c,l,f,p,h,$){function g(t){function n(e,t){for(var n=0,r=t.length;n<r;){var i=t[n++],o=t[n++];e=e.then(i,o)}return t.length=0,e}function i(e){var t=u({},e);return t.data=ct(e.data,e.headers,e.status,s.transformResponse),200<=(e=e.status)&&300>e?t:p.reject(t)}if(!y(t))throw r("$http")("badreq",t);if(!x($.valueOf(t.url)))throw r("$http")("badreq",t.url);var s=u({method:"get",transformRequest:e.transformRequest,transformResponse:e.transformResponse,paramSerializer:e.paramSerializer,jsonpCallbackParam:e.jsonpCallbackParam},t);s.headers=function(t){var n,r,i,a=e.headers,s=u({},t.headers);a=u({},a.common,a[er(t.method)]);e:for(n in a){for(i in r=er(n),s)if(er(i)===r)continue e;s[n]=a[n]}return function(e,t){var n,r={};return o(e,function(e,i){k(e)?null!=(n=e(t))&&(r[i]=n):r[i]=e}),r}(s,se(t))}(t),s.method=tr(s.method),s.paramSerializer=x(s.paramSerializer)?h.get(s.paramSerializer):s.paramSerializer,a.$$incOutstandingRequestCount("$http");var c=[],l=[];return t=p.resolve(s),o(C,function(e){(e.request||e.requestError)&&c.unshift(e.request,e.requestError),(e.response||e.responseError)&&l.push(e.response,e.responseError)}),t=(t=n(t,c)).then(function(t){var n=t.headers,r=ct(t.data,st(n),void 0,t.transformRequest);return m(r)&&o(n,function(e,t){"content-type"===er(t)&&delete n[t]}),m(t.withCredentials)&&!m(e.withCredentials)&&(t.withCredentials=e.withCredentials),b(t,r).then(i,i)}),(t=n(t,l)).finally(function(){a.$$completeOutstandingRequest(d,"$http")})}function b(n,r){function i(e){if(e){var n={};return o(e,function(e,r){n[r]=function(n){function r(){e(n)}t?f.$applyAsync(r):f.$$phase?r():f.$apply(r)}}),n}}function a(e,t,r,i,o){(200<=(t=-1<=t?t:0)&&300>t?b.resolve:b.reject)({data:e,status:t,headers:st(r),config:n,statusText:i,xhrStatus:o})}function u(e){a(e.data,e.status,se(e.headers()),e.statusText,e.xhrStatus)}function l(){var e=g.pendingRequests.indexOf(n);-1!==e&&g.pendingRequests.splice(e,1)}var d,h,b=p.defer(),C=b.promise,A=n.headers,T="jsonp"===er(n.method),O=n.url;return T?O=$.getTrustedResourceUrl(O):x(O)||(O=$.valueOf(O)),O=function(e,t){return 0<t.length&&(e+=(-1===e.indexOf("?")?"?":"&")+t),e}(O,n.paramSerializer(n.params)),T&&(O=function(e,t){var n=e.split("?");if(2<n.length)throw $i("badjsonp",e);return o(n=G(n[1]),function(n,r){if("JSON_CALLBACK"===n)throw $i("badjsonp",e);if(r===t)throw $i("badjsonp",t,e)}),e+=(-1===e.indexOf("?")?"?":"&")+t+"=JSON_CALLBACK"}(O,n.jsonpCallbackParam)),g.pendingRequests.push(n),C.then(l,l),!n.cache&&!e.cache||!1===n.cache||"GET"!==n.method&&"JSONP"!==n.method||(d=y(n.cache)?n.cache:y(e.cache)?e.cache:w),d&&(v(h=d.get(O))?h&&k(h.then)?h.then(u,u):E(h)?a(h[1],h[0],se(h[2]),h[3],h[4]):a(h,200,{},"OK","complete"):d.put(O,C)),m(h)&&((h=S(n.url)?c()[n.xsrfCookieName||e.xsrfCookieName]:void 0)&&(A[n.xsrfHeaderName||e.xsrfHeaderName]=h),s(n.method,O,r,function(e,n,r,i,o){function s(){a(n,e,r,i,o)}d&&(200<=e&&300>e?d.put(O,[e,n,at(r),i,o]):d.remove(O)),t?f.$applyAsync(s):(s(),f.$$phase||f.$apply())},A,n.timeout,n.withCredentials,n.responseType,i(n.eventHandlers),i(n.uploadEventHandlers))),C}var w=l("$http");e.paramSerializer=x(e.paramSerializer)?h.get(e.paramSerializer):e.paramSerializer;var C=[];o(n,function(e){C.unshift(x(e)?h.get(e):h.invoke(e))});var S=function(e){var t=[ji].concat(e.map(en));return function(e){return e=en(e),t.some(tn.bind(null,e))}}(i);return g.pendingRequests=[],function(e){o(arguments,function(e){g[e]=function(t,n){return g(u({},n||{},{method:e,url:t}))}})}("get","delete","head","jsonp"),function(e){o(arguments,function(e){g[e]=function(t,n,r){return g(u({},r||{},{method:e,url:t,data:n}))}})}("post","put","patch"),g.defaults=e,g}]}function lt(){this.$get=function(){return function(){return new e.XMLHttpRequest}}}function ft(){this.$get=["$browser","$jsonpCallbacks","$document","$xhrFactory",function(e,t,n,r){return function(e,t,n,r,i){function a(e,t,n){e=e.replace("JSON_CALLBACK",t);var o=i.createElement("script"),a=null;return o.type="text/javascript",o.src=e,o.async=!0,a=function(e){o.removeEventListener("load",a),o.removeEventListener("error",a),i.body.removeChild(o),o=null;var s=-1,c="unknown";e&&("load"!==e.type||r.wasCalled(t)||(e={type:"error"}),c=e.type,s="error"===e.type?404:200),n&&n(s,c)},o.addEventListener("load",a),o.addEventListener("error",a),i.body.appendChild(o),a}return function(i,s,c,u,l,f,p,d,h,$){function g(e){C="timeout"===e,x&&x(),w&&w.abort()}function y(e,t,r,i,o,a){v(E)&&n.cancel(E),x=w=null,e(t,r,i,o,a)}if(s=s||e.url(),"jsonp"===er(i))var b=r.createCallback(s),x=a(s,b,function(e,t){var n=200===e&&r.getResponse(b);y(u,e,n,"",t,"complete"),r.removeCallback(b)});else{var w=t(i,s),C=!1;if(w.open(i,s,!0),o(l,function(e,t){v(e)&&w.setRequestHeader(t,e)}),w.onload=function(){var e=w.statusText||"",t="response"in w?w.response:w.responseText,n=1223===w.status?204:w.status;0===n&&(n=t?200:"file"===en(s).protocol?404:0),y(u,n,t,w.getAllResponseHeaders(),e,"complete")},w.onerror=function(){y(u,-1,null,null,"","error")},w.ontimeout=function(){y(u,-1,null,null,"","timeout")},w.onabort=function(){y(u,-1,null,null,"",C?"timeout":"abort")},o(h,function(e,t){w.addEventListener(t,e)}),o($,function(e,t){w.upload.addEventListener(t,e)}),p&&(w.withCredentials=!0),d)try{w.responseType=d}catch(e){if("json"!==d)throw e}w.send(m(c)?null:c)}if(0<f)var E=n(function(){g("timeout")},f);else f&&k(f.then)&&f.then(function(){g(v(f.$$timeoutId)?"timeout":"abort")})}}(e,r,e.defer,t,n[0])}]}function pt(){var e="{{",t="}}";this.startSymbol=function(t){return t?(e=t,this):e},this.endSymbol=function(e){return e?(t=e,this):t},this.$get=["$parse","$exceptionHandler","$sce",function(n,r,i){function o(e){return"\\\\\\"+e}function a(n){return n.replace(p,e).replace(d,t)}function s(e,t,n,r){var i=e.$watch(function(e){return i(),r(e)},t,n);return i}function c(o,c,p,d){var h=p===i.URL||p===i.MEDIA_URL;if(!o.length||-1===o.indexOf(e)){if(c)return;return c=a(o),h&&(c=i.getTrusted(p,c)),(c=$(c)).exp=o,c.expressions=[],c.$$watchDelegate=s,c}d=!!d;for(var g,y,b,x,w=0,C=[],E=o.length,S=[],k=[];w<E;){if(-1===(g=o.indexOf(e,w))||-1===(y=o.indexOf(t,g+l))){w!==E&&S.push(a(o.substring(w)));break}w!==g&&S.push(a(o.substring(w,g))),w=o.substring(g+l,y),C.push(w),w=y+f,k.push(S.length),S.push("")}x=1===S.length&&1===k.length;var A=h&&x?void 0:function(e){try{return e=p&&!h?i.getTrusted(p,e):i.valueOf(e),d&&!v(e)?e:ae(e)}catch(e){r(gi.interr(o,e))}};if(b=C.map(function(e){return n(e,A)}),!c||C.length){var T=function(e){for(var t=0,n=C.length;t<n;t++){if(d&&m(e[t]))return;S[k[t]]=e[t]}return h?i.getTrusted(p,x?S[0]:S.join("")):(p&&1<S.length&&gi.throwNoconcat(o),S.join(""))};return u(function(e){var t=0,n=C.length,i=Array(n);try{for(;t<n;t++)i[t]=b[t](e);return T(i)}catch(e){r(gi.interr(o,e))}},{exp:o,expressions:C,$$watchDelegate:function(e,t){var n;return e.$watchGroup(b,function(r,i){var o=T(r);t.call(this,o,r!==i?n:o,e),n=o})}})}}var l=e.length,f=t.length,p=new RegExp(e.replace(/./g,o),"g"),d=new RegExp(t.replace(/./g,o),"g");return c.startSymbol=function(){return e},c.endSymbol=function(){return t},c}]}function dt(){this.$get=["$$intervalFactory","$window",function(e,t){var n={},r=function(e){t.clearInterval(e),delete n[e]},i=e(function(e,r,i){return e=t.setInterval(e,r),n[e]=i,e},r);return i.cancel=function(e){if(!e)return!1;if(!e.hasOwnProperty("$$intervalId"))throw mi("badprom");if(!n.hasOwnProperty(e.$$intervalId))return!1;e=e.$$intervalId;var t=n[e],i=t.promise;return i.$$state&&(i.$$state.pur=!0),t.reject("canceled"),r(e),!0},i}]}function ht(){this.$get=["$browser","$q","$$q","$rootScope",function(e,t,n,r){return function(i,o){return function(a,s,c,u){function l(){f?a.apply(null,p):a(d)}var f=4<arguments.length,p=f?nr.call(arguments,4):[],d=0,h=v(u)&&!u,$=(h?n:t).defer(),g=$.promise;return c=v(c)?c:0,g.$$intervalId=i(function(){h?e.defer(l):r.$evalAsync(l),$.notify(d++),0<c&&d>=c&&($.resolve(d),o(g.$$intervalId)),h||r.$apply()},s,$,h),g}}}]}function $t(e,t){var n=en(e);t.$$protocol=n.protocol,t.$$host=n.hostname,t.$$port=f(n.port)||bi[n.protocol]||null}function gt(e,t,n){if(wi.test(e))throw xi("badpath",e);(r="/"!==e.charAt(0))&&(e="/"+e),e=en(e);for(var r,i=(r=(r&&"/"===e.pathname.charAt(0)?e.pathname.substring(1):e.pathname).split("/")).length;i--;)r[i]=decodeURIComponent(r[i]),n&&(r[i]=r[i].replace(/\//g,"%2F"));n=r.join("/"),t.$$path=n,t.$$search=G(e.search),t.$$hash=decodeURIComponent(e.hash),t.$$path&&"/"!==t.$$path.charAt(0)&&(t.$$path="/"+t.$$path)}function mt(e,t){return e.slice(0,t.length)===t}function vt(e,t){if(mt(t,e))return t.substr(e.length)}function yt(e){var t=e.indexOf("#");return-1===t?e:e.substr(0,t)}function bt(e,t,n){this.$$html5=!0,n=n||"",$t(e,this),this.$$parse=function(e){var n=vt(t,e);if(!x(n))throw xi("ipthprfx",e,t);gt(n,this,!0),this.$$path||(this.$$path="/"),this.$$compose()},this.$$normalizeUrl=function(e){return t+e.substr(1)},this.$$parseLinkUrl=function(r,i){return i&&"#"===i[0]?(this.hash(i.slice(1)),!0):(v(o=vt(e,r))?(a=o,a=n&&v(o=vt(n,o))?t+(vt("/",o)||o):e+a):v(o=vt(t,r))?a=t+o:t===r+"/"&&(a=t),a&&this.$$parse(a),!!a);var o,a}}function xt(e,t,n){$t(e,this),this.$$parse=function(r){var i;m(o=vt(e,r)||vt(t,r))||"#"!==o.charAt(0)?this.$$html5?i=o:(i="",m(o)&&(e=r,this.replace())):m(i=vt(n,o))&&(i=o),gt(i,this,!1),r=this.$$path;var o,a=/^\/[A-Z]:(\/.*)/;mt(i,o=e)&&(i=i.replace(o,"")),a.exec(i)||(r=(i=a.exec(r))?i[1]:r),this.$$path=r,this.$$compose()},this.$$normalizeUrl=function(t){return e+(t?n+t:"")},this.$$parseLinkUrl=function(t,n){return yt(e)===yt(t)&&(this.$$parse(t),!0)}}function wt(e,t,n){this.$$html5=!0,xt.apply(this,arguments),this.$$parseLinkUrl=function(r,i){return i&&"#"===i[0]?(this.hash(i.slice(1)),!0):(e===yt(r)?o=r:(a=vt(t,r))?o=e+n+a:t===r+"/"&&(o=t),o&&this.$$parse(o),!!o);var o,a},this.$$normalizeUrl=function(t){return e+n+t}}function Ct(e){return function(){return this[e]}}function Et(e,t){return function(n){return m(n)?this[e]:(this[e]=t(n),this.$$compose(),this)}}function St(){var e="!",t={enabled:!1,requireBase:!0,rewriteLinks:!0};this.hashPrefix=function(t){return v(t)?(e=t,this):e},this.html5Mode=function(e){return M(e)?(t.enabled=e,this):y(e)?(M(e.enabled)&&(t.enabled=e.enabled),M(e.requireBase)&&(t.requireBase=e.requireBase),(M(e.rewriteLinks)||x(e.rewriteLinks))&&(t.rewriteLinks=e.rewriteLinks),this):t},this.$get=["$rootScope","$browser","$sniffer","$rootElement","$window",function(n,r,i,o,a){function s(e,t,n){var i=u.url(),o=u.$$state;try{r.url(e,t,n),u.$$state=r.state()}catch(e){throw u.url(i),u.$$state=o,e}}function c(e,t){n.$broadcast("$locationChangeSuccess",u.absUrl(),e,u.$$state,t)}var u,l;l=r.baseHref();var f,p=r.url();if(t.enabled){if(!l&&t.requireBase)throw xi("nobase");f=p.substring(0,p.indexOf("/",p.indexOf("//")+2))+(l||"/"),l=i.history?bt:wt}else f=yt(p),l=xt;var d=f.substr(0,yt(f).lastIndexOf("/")+1);(u=new l(f,d,"#"+e)).$$parseLinkUrl(p,p),u.$$state=r.state();var h=/^\s*(javascript|mailto):/i;o.on("click",function(e){if((a=t.rewriteLinks)&&!e.ctrlKey&&!e.metaKey&&!e.shiftKey&&2!==e.which&&2!==e.button){for(var i=Kn(e.target);"a"!==D(i[0]);)if(i[0]===o[0]||!(i=i.parent())[0])return;if(!x(a)||!m(i.attr(a))){var a=i.prop("href"),s=i.attr("href")||i.attr("xlink:href");y(a)&&"[object SVGAnimatedString]"===a.toString()&&(a=en(a.animVal).href),h.test(a)||!a||i.attr("target")||e.isDefaultPrevented()||!u.$$parseLinkUrl(a,s)||(e.preventDefault(),u.absUrl()!==r.url()&&n.$apply())}}}),u.absUrl()!==p&&r.url(u.absUrl(),!0);var $=!0;return r.onUrlChange(function(e,t){mt(e,d)?(n.$evalAsync(function(){var r,i=u.absUrl(),o=u.$$state;u.$$parse(e),u.$$state=t,r=n.$broadcast("$locationChangeStart",e,i,t,o).defaultPrevented,u.absUrl()===e&&(r?(u.$$parse(i),u.$$state=o,s(i,!1,o)):($=!1,c(i,o)))}),n.$$phase||n.$digest()):a.location.href=e}),n.$watch(function(){if($||u.$$urlUpdatedByLocation){u.$$urlUpdatedByLocation=!1;var e=r.url(),t=u.absUrl(),o=r.state(),a=u.$$replace,l=!function(e,t){return e===t||en(e).href===en(t).href}(e,t)||u.$$html5&&i.history&&o!==u.$$state;($||l)&&($=!1,n.$evalAsync(function(){var t=u.absUrl(),r=n.$broadcast("$locationChangeStart",t,e,u.$$state,o).defaultPrevented;u.absUrl()===t&&(r?(u.$$parse(e),u.$$state=o):(l&&s(t,a,o===u.$$state?null:u.$$state),c(e,o)))}))}u.$$replace=!1}),u}]}function kt(){var e=!0,t=this;this.debugEnabled=function(t){return v(t)?(e=t,this):e},this.$get=["$window",function(n){function r(e){var t=n.console||{},r=t[e]||t.log||d;return function(){var e=[];return o(arguments,function(t){e.push(function(e){return S(e)&&(e.stack&&i?e=e.message&&-1===e.stack.indexOf(e.message)?"Error: "+e.message+"\n"+e.stack:e.stack:e.sourceURL&&(e=e.message+"\n"+e.sourceURL+":"+e.line)),e}(t))}),Function.prototype.apply.call(r,t,e)}}var i=Gn||/\bEdge\//.test(n.navigator&&n.navigator.userAgent);return{log:r("log"),info:r("info"),warn:r("warn"),error:r("error"),debug:function(){var n=r("debug");return function(){e&&n.apply(t,arguments)}}()}}]}function At(e){return e+""}function Tt(e,t){return void 0!==e?e:t}function Ot(e,t){return void 0===e?t:void 0===t?e:e+t}function Mt(e,t,n){var r,i,a=e.isPure=function(e,t){switch(e.type){case Oi.MemberExpression:if(e.computed)return!1;break;case Oi.UnaryExpression:return 1;case Oi.BinaryExpression:return"+"!==e.operator&&1;case Oi.CallExpression:return!1}return void 0===t?Mi:t}(e,n);switch(e.type){case Oi.Program:r=!0,o(e.body,function(e){Mt(e.expression,t,a),r=r&&e.expression.constant}),e.constant=r;break;case Oi.Literal:e.constant=!0,e.toWatch=[];break;case Oi.UnaryExpression:Mt(e.argument,t,a),e.constant=e.argument.constant,e.toWatch=e.argument.toWatch;break;case Oi.BinaryExpression:Mt(e.left,t,a),Mt(e.right,t,a),e.constant=e.left.constant&&e.right.constant,e.toWatch=e.left.toWatch.concat(e.right.toWatch);break;case Oi.LogicalExpression:Mt(e.left,t,a),Mt(e.right,t,a),e.constant=e.left.constant&&e.right.constant,e.toWatch=e.constant?[]:[e];break;case Oi.ConditionalExpression:Mt(e.test,t,a),Mt(e.alternate,t,a),Mt(e.consequent,t,a),e.constant=e.test.constant&&e.alternate.constant&&e.consequent.constant,e.toWatch=e.constant?[]:[e];break;case Oi.Identifier:e.constant=!1,e.toWatch=[e];break;case Oi.MemberExpression:Mt(e.object,t,a),e.computed&&Mt(e.property,t,a),e.constant=e.object.constant&&(!e.computed||e.property.constant),e.toWatch=e.constant?[]:[e];break;case Oi.CallExpression:r=n=!!e.filter&&!t(e.callee.name).$stateful,i=[],o(e.arguments,function(e){Mt(e,t,a),r=r&&e.constant,i.push.apply(i,e.toWatch)}),e.constant=r,e.toWatch=n?i:[e];break;case Oi.AssignmentExpression:Mt(e.left,t,a),Mt(e.right,t,a),e.constant=e.left.constant&&e.right.constant,e.toWatch=[e];break;case Oi.ArrayExpression:r=!0,i=[],o(e.elements,function(e){Mt(e,t,a),r=r&&e.constant,i.push.apply(i,e.toWatch)}),e.constant=r,e.toWatch=i;break;case Oi.ObjectExpression:r=!0,i=[],o(e.properties,function(e){Mt(e.value,t,a),r=r&&e.value.constant,i.push.apply(i,e.value.toWatch),e.computed&&(Mt(e.key,t,!1),r=r&&e.key.constant,i.push.apply(i,e.key.toWatch))}),e.constant=r,e.toWatch=i;break;case Oi.ThisExpression:e.constant=!1,e.toWatch=[];break;case Oi.LocalsExpression:e.constant=!1,e.toWatch=[]}}function Nt(e){if(1===e.length){var t=(e=e[0].expression).toWatch;return 1!==t.length?t:t[0]!==e?t:void 0}}function Dt(e){return e.type===Oi.Identifier||e.type===Oi.MemberExpression}function It(e){if(1===e.body.length&&Dt(e.body[0].expression))return{type:Oi.AssignmentExpression,left:e.body[0].expression,right:{type:Oi.NGValueParameter},operator:"="}}function Pt(e){this.$filter=e}function Lt(e){this.$filter=e}function Rt(e,t,n){this.ast=new Oi(e,n),this.astCompiler=n.csp?new Lt(t):new Pt(t)}function Vt(e){return k(e.valueOf)?e.valueOf():Si.call(e)}function jt(){var e,t,n=oe(),r={true:!0,false:!1,null:null,undefined:void 0};this.addLiteral=function(e,t){r[e]=t},this.setIdentifierFns=function(n,r){return e=n,t=r,this},this.$get=["$filter",function(i){function a(e,t){var r,o;switch(_typeof(e)){case"string":return o=e=e.trim(),(r=n[o])||(r=new Rt(r=new Ti(g),i,g).parse(e),n[o]=p(r)),$(r,t);case"function":return $(e,t);default:return $(d,t)}}function s(e,t,n){return null==e||null==t?e===t:!("object"===_typeof(e)&&(e=Vt(e),"object"===_typeof(e)&&!n))&&(e===t||e!=e&&t!=t)}function c(e,t,n,r,i){var o;if(1===(c=r.inputs).length){var a=s,c=c[0];return e.$watch(function(e){var t=c(e);return s(t,a,c.isPure)||(o=r(e,void 0,void 0,[t]),a=t&&Vt(t)),o},t,n,i)}for(var u=[],l=[],f=0,p=c.length;f<p;f++)u[f]=s,l[f]=null;return e.$watch(function(e){for(var t=!1,n=0,i=c.length;n<i;n++){var a=c[n](e);(t||(t=!s(a,u[n],c[n].isPure)))&&(l[n]=a,u[n]=a&&Vt(a))}return t&&(o=r(e,void 0,void 0,l)),o},t,n,i)}function u(e,t,n,r,i){function o(){u(c)&&s()}function a(e,t,n,r){return c=$&&r?r[0]:f(e,t,n,r),u(c)&&e.$$postDigest(o),d(c)}var s,c,u=r.literal?l:v,f=r.$$intercepted||r,d=r.$$interceptor||h,$=r.inputs&&!f.inputs;return a.literal=r.literal,a.constant=r.constant,a.inputs=r.inputs,p(a),s=e.$watch(a,t,n,i)}function l(e){var t=!0;return o(e,function(e){v(e)||(t=!1)}),t}function f(e,t,n,r){var i=e.$watch(function(e){return i(),r(e)},t,n);return i}function p(e){return e.constant?e.$$watchDelegate=f:e.oneTime?e.$$watchDelegate=u:e.inputs&&(e.$$watchDelegate=c),e}function $(e,t){if(!t)return e;e.$$interceptor&&(t=function(e,t){function n(n){return t(e(n))}return n.$stateful=e.$stateful||t.$stateful,n.$$pure=e.$$pure&&t.$$pure,n}(e.$$interceptor,t),e=e.$$intercepted);var n=!1,r=function(r,i,o,a){return r=n&&a?a[0]:e(r,i,o,a),t(r)};return r.$$intercepted=e,r.$$interceptor=t,r.literal=e.literal,r.oneTime=e.oneTime,r.constant=e.constant,t.$stateful||(n=!e.inputs,r.inputs=e.inputs?e.inputs:[e],t.$$pure||(r.inputs=r.inputs.map(function(e){return e.isPure===Mi?function(t){return e(t)}:e}))),p(r)}var g={csp:gr().noUnsafeEval,literals:P(r),isIdentifierStart:k(e)&&e,isIdentifierContinue:k(t)&&t};return a.$$getAst=function(e){return new Rt(new Ti(g),i,g).getAst(e).ast},a}]}function qt(){var e=!0;this.$get=["$rootScope","$exceptionHandler",function(t,n){return Ut(function(e){t.$evalAsync(e)},n,e)}],this.errorOnUnhandledRejections=function(t){return v(t)?(e=t,this):e}}function Ft(){var e=!0;this.$get=["$browser","$exceptionHandler",function(t,n){return Ut(function(e){t.defer(e)},n,e)}],this.errorOnUnhandledRejections=function(t){return v(t)?(e=t,this):e}}function Ut(e,t,n){function i(){return new a}function a(){var e=this.promise=new s;this.resolve=function(t){f(e,t)},this.reject=function(t){p(e,t)},this.notify=function(t){h(e,t)}}function s(){this.$$state={status:0}}function c(){for(;!w&&C.length;){var e=C.shift();if(!e.pur){e.pur=!0;var n="Possibly unhandled rejection: "+("function"==typeof(n=e.value)?n.toString().replace(/ \{[\s\S]*$/,""):m(n)?"undefined":"string"!=typeof n?ce(n,void 0):n);S(e.value)?t(e.value,n):t(n)}}}function l(r){!n||r.pending||2!==r.status||r.pur||(0===w&&0===C.length&&e(c),C.push(r)),!r.processScheduled&&r.pending&&(r.processScheduled=!0,++w,e(function(){var i,o,a;a=r.pending,r.processScheduled=!1,r.pending=void 0;try{for(var s=0,u=a.length;s<u;++s){r.pur=!0,o=a[s][0],i=a[s][r.status];try{k(i)?f(o,i(r.value)):1===r.status?f(o,r.value):p(o,r.value)}catch(e){p(o,e),e&&!0===e.$$passToExceptionHandler&&t(e)}}}finally{--w,n&&0===w&&e(c)}}))}function f(e,t){e.$$state.status||(t===e?d(e,x("qcycle",t)):function e(t,n){function r(n){a||(a=!0,e(t,n))}function i(e){a||(a=!0,d(t,e))}var o,a=!1;try{(y(n)||k(n))&&(o=n.then),k(o)?(t.$$state.status=-1,o.call(n,function r(e){a||(a=!0,function e(t,n){function r(n){a||(a=!0,e(t,n))}function i(e){a||(a=!0,d(t,e))}var o,a=!1;try{(y(n)||k(n))&&(o=n.then),k(o)?(t.$$state.status=-1,o.call(n,r,i,function(e){h(t,e)})):(t.$$state.value=n,t.$$state.status=1,l(t.$$state))}catch(e){i(e)}}(t,e))},i,function(e){h(t,e)})):(t.$$state.value=n,t.$$state.status=1,l(t.$$state))}catch(e){i(e)}}(e,t))}function p(e,t){e.$$state.status||d(e,t)}function d(e,t){e.$$state.value=t,e.$$state.status=2,l(e.$$state)}function h(n,r){var i=n.$$state.pending;0>=n.$$state.status&&i&&i.length&&e(function(){for(var e,n,o=0,a=i.length;o<a;o++){n=i[o][0],e=i[o][3];try{h(n,k(e)?e(r):r)}catch(e){t(e)}}})}function $(e){var t=new s;return p(t,e),t}function g(e,t,n){var r=null;try{k(n)&&(r=n())}catch(e){return $(e)}return r&&k(r.then)?r.then(function(){return t(e)},$):t(e)}function v(e,t,n,r){var i=new s;return f(i,e),i.then(t,n,r)}function b(e){if(!k(e))throw x("norslvr",e);var t=new s;return e(function(e){f(t,e)},function(e){p(t,e)}),t}var x=r("$q",TypeError),w=0,C=[];u(s.prototype,{then:function(e,t,n){if(m(e)&&m(t)&&m(n))return this;var r=new s;return this.$$state.pending=this.$$state.pending||[],this.$$state.pending.push([r,e,t,n]),0<this.$$state.status&&l(this.$$state),r},catch:function(e){return this.then(null,e)},finally:function(e,t){return this.then(function(t){return g(t,A,e)},function(t){return g(t,$,e)},t)}});var A=v;return b.prototype=s.prototype,b.defer=i,b.reject=$,b.when=v,b.resolve=A,b.all=function(e){var t=new s,n=0,r=E(e)?[]:{};return o(e,function(e,i){n++,v(e).then(function(e){r[i]=e,--n||f(t,r)},function(e){p(t,e)})}),0===n&&f(t,r),t},b.race=function(e){var t=i();return o(e,function(e){v(e).then(t.resolve,t.reject)}),t.promise},b}function _t(){this.$get=["$window","$timeout",function(e,t){var n=e.requestAnimationFrame||e.webkitRequestAnimationFrame,r=e.cancelAnimationFrame||e.webkitCancelAnimationFrame||e.webkitCancelRequestAnimationFrame,i=!!n,o=i?function(e){var t=n(e);return function(){r(t)}}:function(e){var n=t(e,16.66,!1);return function(){t.cancel(n)}};return o.supported=i,o}]}function Ht(){var e=10,t=r("$rootScope"),n=null,a=null;this.digestTtl=function(t){return arguments.length&&(e=t),e},this.$get=["$exceptionHandler","$parse","$browser",function(r,s,c){function u(e){e.currentScope.$$destroyed=!0}function l(){this.$id=++ur,this.$$phase=this.$parent=this.$$watchers=this.$$nextSibling=this.$$prevSibling=this.$$childHead=this.$$childTail=null,this.$root=this,this.$$suspended=this.$$destroyed=!1,this.$$listeners={},this.$$listenerCount={},this.$$watchersCount=0,this.$$isolateBindings=null}function f(e){if(v.$$phase)throw t("inprog",v.$$phase);v.$$phase=e}function p(e,t){do{e.$$watchersCount+=t}while(e=e.$parent)}function h(e,t,n){do{e.$$listenerCount[n]-=t,0===e.$$listenerCount[n]&&delete e.$$listenerCount[n]}while(e=e.$parent)}function $(){}function g(){for(;w.length;)try{w.shift()()}catch(e){r(e)}a=null}l.prototype={constructor:l,$new:function(e,t){var n;return t=t||this,e?(n=new l).$root=this.$root:(this.$$ChildScope||(this.$$ChildScope=function(e){function t(){this.$$watchers=this.$$nextSibling=this.$$childHead=this.$$childTail=null,this.$$listeners={},this.$$listenerCount={},this.$$watchersCount=0,this.$id=++ur,this.$$ChildScope=null,this.$$suspended=!1}return t.prototype=e,t}(this)),n=new this.$$ChildScope),n.$parent=t,n.$$prevSibling=t.$$childTail,t.$$childHead?(t.$$childTail.$$nextSibling=n,t.$$childTail=n):t.$$childHead=t.$$childTail=n,(e||t!==this)&&n.$on("$destroy",u),n},$watch:function(e,t,r,i){var o=s(e);if(t=k(t)?t:d,o.$$watchDelegate)return o.$$watchDelegate(this,t,r,o,e);var a=this,c=a.$$watchers,u={fn:t,last:$,get:o,exp:i||e,eq:!!r};return n=null,c||((c=a.$$watchers=[]).$$digestWatchIndex=-1),c.unshift(u),c.$$digestWatchIndex++,p(this,1),function(){var e=I(c,u);0<=e&&(p(a,-1),e<c.$$digestWatchIndex&&c.$$digestWatchIndex--),n=null}},$watchGroup:function(e,t){function n(){c=!1;try{u?(u=!1,t(i,i,s)):t(i,r,s)}finally{for(var n=0;n<e.length;n++)r[n]=i[n]}}var r=Array(e.length),i=Array(e.length),a=[],s=this,c=!1,u=!0;if(!e.length){var l=!0;return s.$evalAsync(function(){l&&t(i,i,s)}),function(){l=!1}}return 1===e.length?this.$watch(e[0],function(e,n,o){i[0]=e,r[0]=n,t(i,e===n?i:r,o)}):(o(e,function(e,t){var r=s.$watch(e,function(e){i[t]=e,c||(c=!0,s.$evalAsync(n))});a.push(r)}),function(){for(;a.length;)a.shift()()})},$watchCollection:function(e,t){function n(e){var t,n,a;if(!m(r=e)){if(y(r))if(i(r))for(o!==p&&($=(o=p).length=0,l++),e=r.length,$!==e&&(l++,o.length=$=e),t=0;t<e;t++)a=o[t],n=r[t],a!=a&&n!=n||a===n||(l++,o[t]=n);else{for(t in o!==d&&(o=d={},$=0,l++),e=0,r)Qn.call(r,t)&&(e++,n=r[t],a=o[t],t in o?a!=a&&n!=n||a===n||(l++,o[t]=n):($++,o[t]=n,l++));if($>e)for(t in l++,o)Qn.call(r,t)||($--,delete o[t])}else o!==r&&(o=r,l++);return l}}n.$$pure=s(e).literal,n.$stateful=!n.$$pure;var r,o,a,c=this,u=1<t.length,l=0,f=s(e,n),p=[],d={},h=!0,$=0;return this.$watch(f,function(){if(h?(h=!1,t(r,r,c)):t(r,a,c),u)if(y(r))if(i(r)){a=Array(r.length);for(var e=0;e<r.length;e++)a[e]=r[e]}else for(e in a={},r)Qn.call(r,e)&&(a[e]=r[e]);else a=r})},$digest:function(){var i,o,s,u,l,p,d,h,m=e,y=b.length?v:this,w=[];f("$digest"),c.$$checkUrlChange(),this===v&&null!==a&&(c.defer.cancel(a),g()),n=null;do{for(l=!1,p=y,u=0;u<b.length;u++){try{(0,(h=b[u]).fn)(h.scope,h.locals)}catch(e){r(e)}n=null}b.length=0;e:do{if(u=!p.$$suspended&&p.$$watchers)for(u.$$digestWatchIndex=u.length;u.$$digestWatchIndex--;)try{if(i=u[u.$$digestWatchIndex])if((o=(0,i.get)(p))===(s=i.last)||(i.eq?R(o,s):lr(o)&&lr(s))){if(i===n){l=!1;break e}}else l=!0,n=i,i.last=i.eq?P(o,null):o,(0,i.fn)(o,s===$?o:s,p),5>m&&(w[d=4-m]||(w[d]=[]),w[d].push({msg:k(i.exp)?"fn: "+(i.exp.name||i.exp.toString()):i.exp,newVal:o,oldVal:s}))}catch(e){r(e)}if(!(u=!p.$$suspended&&p.$$watchersCount&&p.$$childHead||p!==y&&p.$$nextSibling))for(;p!==y&&!(u=p.$$nextSibling);)p=p.$parent}while(p=u);if((l||b.length)&&!m--)throw v.$$phase=null,t("infdig",e,w)}while(l||b.length);for(v.$$phase=null;C<x.length;)try{x[C++]()}catch(e){r(e)}x.length=C=0,c.$$checkUrlChange()},$suspend:function(){this.$$suspended=!0},$isSuspended:function(){return this.$$suspended},$resume:function(){this.$$suspended=!1},$destroy:function(){if(!this.$$destroyed){var e=this.$parent;for(var t in this.$broadcast("$destroy"),this.$$destroyed=!0,this===v&&c.$$applicationDestroyed(),p(this,-this.$$watchersCount),this.$$listenerCount)h(this,this.$$listenerCount[t],t);e&&e.$$childHead===this&&(e.$$childHead=this.$$nextSibling),e&&e.$$childTail===this&&(e.$$childTail=this.$$prevSibling),this.$$prevSibling&&(this.$$prevSibling.$$nextSibling=this.$$nextSibling),this.$$nextSibling&&(this.$$nextSibling.$$prevSibling=this.$$prevSibling),this.$destroy=this.$digest=this.$apply=this.$evalAsync=this.$applyAsync=d,this.$on=this.$watch=this.$watchGroup=function(){return d},this.$$listeners={},this.$$nextSibling=null,function e(t){9===Gn&&(t.$$childHead&&e(t.$$childHead),t.$$nextSibling&&e(t.$$nextSibling)),t.$parent=t.$$nextSibling=t.$$prevSibling=t.$$childHead=t.$$childTail=t.$root=t.$$watchers=null}(this)}},$eval:function(e,t){return s(e)(this,t)},$evalAsync:function(e,t){v.$$phase||b.length||c.defer(function(){b.length&&v.$digest()},null,"$evalAsync"),b.push({scope:this,fn:s(e),locals:t})},$$postDigest:function(e){x.push(e)},$apply:function(e){try{f("$apply");try{return this.$eval(e)}finally{v.$$phase=null}}catch(e){r(e)}finally{try{v.$digest()}catch(e){throw r(e),e}}},$applyAsync:function(e){var t=this;e&&w.push(function(){t.$eval(e)}),e=s(e),null===a&&(a=c.defer(function(){v.$apply(g)},null,"$applyAsync"))},$on:function(e,t){var n=this.$$listeners[e];n||(this.$$listeners[e]=n=[]),n.push(t);var r=this;do{r.$$listenerCount[e]||(r.$$listenerCount[e]=0),r.$$listenerCount[e]++}while(r=r.$parent);var i=this;return function(){var r=n.indexOf(t);-1!==r&&(delete n[r],h(i,1,e))}},$emit:function(e,t){var n,i,o,a=[],s=this,c=!1,u={name:e,targetScope:s,stopPropagation:function(){c=!0},preventDefault:function(){u.defaultPrevented=!0},defaultPrevented:!1},l=V([u],arguments,1);do{for(n=s.$$listeners[e]||a,u.currentScope=s,i=0,o=n.length;i<o;i++)if(n[i])try{n[i].apply(null,l)}catch(e){r(e)}else n.splice(i,1),i--,o--;if(c)break;s=s.$parent}while(s);return u.currentScope=null,u},$broadcast:function(e,t){var n=this,i=this,o={name:e,targetScope:this,preventDefault:function(){o.defaultPrevented=!0},defaultPrevented:!1};if(!this.$$listenerCount[e])return o;for(var a,s,c=V([o],arguments,1);n=i;){for(o.currentScope=n,a=0,s=(i=n.$$listeners[e]||[]).length;a<s;a++)if(i[a])try{i[a].apply(null,c)}catch(e){r(e)}else i.splice(a,1),a--,s--;if(!(i=n.$$listenerCount[e]&&n.$$childHead||n!==this&&n.$$nextSibling))for(;n!==this&&!(i=n.$$nextSibling);)n=n.$parent}return o.currentScope=null,o}};var v=new l,b=v.$$asyncQueue=[],x=v.$$postDigestQueue=[],w=v.$$applyAsyncQueue=[],C=0;return v}]}function Bt(){var e=/^\s*(https?|s?ftp|mailto|tel|file):/,t=/^\s*((https?|ftp|file|blob):|data:image\/)/;this.aHrefSanitizationWhitelist=function(t){return v(t)?(e=t,this):e},this.imgSrcSanitizationWhitelist=function(e){return v(e)?(t=e,this):t},this.$get=function(){return function(n,r){var i=r?t:e,o=en(n&&n.trim()).href;return""===o||o.match(i)?n:"unsafe:"+o}}}function zt(e){var t=[];return v(e)&&o(e,function(e){t.push(function(e){if("self"===e)return e;if(x(e)){if(-1<e.indexOf("***"))throw Di("iwcard",e);return e=$r(e).replace(/\\\*\\\*/g,".*").replace(/\\\*/g,"[^:/.?&;]*"),new RegExp("^"+e+"$")}if(A(e))return new RegExp("^"+e.source+"$");throw Di("imatcher")}(e))}),t}function Wt(){this.SCE_CONTEXTS=Ii;var t=["self"],n=[];this.resourceUrlWhitelist=function(e){return arguments.length&&(t=zt(e)),t},this.resourceUrlBlacklist=function(e){return arguments.length&&(n=zt(e)),n},this.$get=["$injector","$$sanitizeUri",function(r,i){function o(t,n){var r;return"self"===t?(r=tn(n,ji))||(e.document.baseURI?r=e.document.baseURI:(Ni||((Ni=e.document.createElement("a")).href=".",Ni=Ni.cloneNode(!1)),r=Ni.href),r=tn(n,r)):r=!!t.exec(n.href),r}function a(e){var t=function(e){this.$$unwrapTrustedValue=function(){return e}};return e&&(t.prototype=new e),t.prototype.valueOf=function(){return this.$$unwrapTrustedValue()},t.prototype.toString=function(){return this.$$unwrapTrustedValue().toString()},t}var s=function(e){throw Di("unsafe")};r.has("$sanitize")&&(s=r.get("$sanitize"));var c=a(),u={};return u[Ii.HTML]=a(c),u[Ii.CSS]=a(c),u[Ii.MEDIA_URL]=a(c),u[Ii.URL]=a(u[Ii.MEDIA_URL]),u[Ii.JS]=a(c),u[Ii.RESOURCE_URL]=a(u[Ii.URL]),{trustAs:function(e,t){var n=u.hasOwnProperty(e)?u[e]:null;if(!n)throw Di("icontext",e,t);if(null===t||m(t)||""===t)return t;if("string"!=typeof t)throw Di("itype",e);return new n(t)},getTrusted:function(e,r){if(null===r||m(r)||""===r)return r;if((l=u.hasOwnProperty(e)?u[e]:null)&&r instanceof l)return r.$$unwrapTrustedValue();if(k(r.$$unwrapTrustedValue)&&(r=r.$$unwrapTrustedValue()),e===Ii.MEDIA_URL||e===Ii.URL)return i(r.toString(),e===Ii.MEDIA_URL);if(e===Ii.RESOURCE_URL){var a,c,l=en(r.toString()),f=!1;for(a=0,c=t.length;a<c;a++)if(o(t[a],l)){f=!0;break}if(f)for(a=0,c=n.length;a<c;a++)if(o(n[a],l)){f=!1;break}if(f)return r;throw Di("insecurl",r.toString())}if(e===Ii.HTML)return s(r);throw Di("unsafe")},valueOf:function(e){return e instanceof c?e.$$unwrapTrustedValue():e}}}]}function Gt(){var e=!0;this.enabled=function(t){return arguments.length&&(e=!!t),e},this.$get=["$parse","$sceDelegate",function(t,n){if(e&&8>Gn)throw Di("iequirks");var r=se(Ii);r.isEnabled=function(){return e},r.trustAs=n.trustAs,r.getTrusted=n.getTrusted,r.valueOf=n.valueOf,e||(r.trustAs=r.getTrusted=function(e,t){return t},r.valueOf=h),r.parseAs=function(e,n){var i=t(n);return i.literal&&i.constant?i:t(n,function(t){return r.getTrusted(e,t)})};var i=r.parseAs,a=r.getTrusted,s=r.trustAs;return o(Ii,function(e,t){var n=er(t);r[("parse_as_"+n).replace(Pi,ue)]=function(t){return i(e,t)},r[("get_trusted_"+n).replace(Pi,ue)]=function(t){return a(e,t)},r[("trust_as_"+n).replace(Pi,ue)]=function(t){return s(e,t)}}),r}]}function Kt(){this.$get=["$window","$document",function(e,t){var n={},r=!((!e.nw||!e.nw.process)&&e.chrome&&(e.chrome.app&&e.chrome.app.runtime||!e.chrome.app&&e.chrome.runtime&&e.chrome.runtime.id))&&e.history&&e.history.pushState,i=f((/android (\d+)/.exec(er((e.navigator||{}).userAgent))||[])[1]),o=/Boxee/i.test((e.navigator||{}).userAgent),a=t[0]||{},s=a.body&&a.body.style,c=!1,u=!1;return s&&(c=!!("transition"in s||"webkitTransition"in s),u=!!("animation"in s||"webkitAnimation"in s)),{history:!(!r||4>i||o),hasEvent:function(e){if("input"===e&&Gn)return!1;if(m(n[e])){var t=a.createElement("div");n[e]="on"+e in t}return n[e]},csp:gr(),transitions:c,animations:u,android:i}}]}function Yt(){this.$get=$(function(e){return new Jt(e)})}function Jt(e){function t(){var e=i.pop();return e&&e.cb}function n(e){for(var t=i.length-1;0<=t;--t){var n=i[t];if(n.type===e)return i.splice(t,1),n.cb}}var r={},i=[],o=this.ALL_TASKS_TYPE="$$all$$",a=this.DEFAULT_TASK_TYPE="$$default$$";this.completeTask=function(i,s){s=s||a;try{i()}finally{var c;r[c=s||a]&&(r[c]--,r[o]--),c=r[s];var u=r[o];if(!u||!c)for(c=u?n:t;u=c(s);)try{u()}catch(t){e.error(t)}}},this.incTaskCount=function(e){r[e=e||a]=(r[e]||0)+1,r[o]=(r[o]||0)+1},this.notifyWhenNoPendingTasks=function(e,t){r[t=t||o]?i.push({type:t,cb:e}):e()}}function Xt(){var e;this.httpOptions=function(t){return t?(e=t,this):e},this.$get=["$exceptionHandler","$templateCache","$http","$q","$sce",function(t,n,r,i,o){function a(s,c){a.totalPendingRequests++,x(s)&&!m(n.get(s))||(s=o.getTrustedResourceUrl(s));var l=r.defaults&&r.defaults.transformResponse;return E(l)?l=l.filter(function(e){return e!==ot}):l===ot&&(l=null),r.get(s,u({cache:n,transformResponse:l},e)).finally(function(){a.totalPendingRequests--}).then(function(e){return n.put(s,e.data)},function(e){return c||(e=Li("tpload",s,e.status,e.statusText),t(e)),i.reject(e)})}return a.totalPendingRequests=0,a}]}function Zt(){this.$get=["$rootScope","$browser","$location",function(e,t,n){return{findBindings:function(e,t,n){e=e.getElementsByClassName("ng-binding");var r=[];return o(e,function(e){var i=cr.element(e).data("$binding");i&&o(i,function(i){n?new RegExp("(^|\\s)"+$r(t)+"(\\s|\\||$)").test(i)&&r.push(e):-1!==i.indexOf(t)&&r.push(e)})}),r},findModels:function(e,t,n){for(var r=["ng-","data-ng-","ng\\:"],i=0;i<r.length;++i){var o=e.querySelectorAll("["+r[i]+"model"+(n?"=":"*=")+'"'+t+'"]');if(o.length)return o}},getLocation:function(){return n.url()},setLocation:function(t){t!==n.url()&&(n.url(t),e.$digest())},whenStable:function(e){t.notifyWhenNoOutstandingRequests(e)}}}]}function Qt(){this.$get=["$rootScope","$browser","$q","$$q","$exceptionHandler",function(e,t,n,r,i){function o(o,s,c){k(o)||(c=s,s=o,o=d);var u,l=nr.call(arguments,3),f=v(c)&&!c,p=(f?r:n).defer(),h=p.promise;return u=t.defer(function(){try{p.resolve(o.apply(null,l))}catch(e){p.reject(e),i(e)}finally{delete a[h.$$timeoutId]}f||e.$apply()},s,"$timeout"),h.$$timeoutId=u,a[u]=p,h}var a={};return o.cancel=function(e){if(!e)return!1;if(!e.hasOwnProperty("$$timeoutId"))throw Ri("badprom");if(!a.hasOwnProperty(e.$$timeoutId))return!1;e=e.$$timeoutId;var n=a[e],r=n.promise;return r.$$state&&(r.$$state.pur=!0),n.reject("canceled"),delete a[e],t.defer.cancel(e)},o}]}function en(e){return x(e)?(Gn&&(Vi.setAttribute("href",e),e=Vi.href),Vi.setAttribute("href",e),e=Vi.hostname,!qi&&-1<e.indexOf(":")&&(e="["+e+"]"),{href:Vi.href,protocol:Vi.protocol?Vi.protocol.replace(/:$/,""):"",host:Vi.host,search:Vi.search?Vi.search.replace(/^\?/,""):"",hash:Vi.hash?Vi.hash.replace(/^#/,""):"",hostname:e,port:Vi.port,pathname:"/"===Vi.pathname.charAt(0)?Vi.pathname:"/"+Vi.pathname}):e}function tn(e,t){return e=en(e),t=en(t),e.protocol===t.protocol&&e.host===t.host}function nn(){this.$get=$(e)}function rn(e){function t(e){try{return decodeURIComponent(e)}catch(t){return e}}var n=e[0]||{},r={},i="";return function(){var e,o,a,s,c;try{e=n.cookie||""}catch(t){e=""}if(e!==i)for(e=(i=e).split("; "),r={},a=0;a<e.length;a++)0<(s=(o=e[a]).indexOf("="))&&(c=t(o.substring(0,s)),m(r[c])&&(r[c]=t(o.substring(s+1))));return r}}function on(){this.$get=rn}function an(e){function t(n,r){if(y(n)){var i={};return o(n,function(e,n){i[n]=t(n,e)}),i}return e.factory(n+"Filter",r)}this.register=t,this.$get=["$injector",function(e){return function(t){return e.get(t+"Filter")}}],t("currency",ln),t("date",yn),t("filter",sn),t("json",bn),t("limitTo",xn),t("lowercase",Wi),t("number",fn),t("orderBy",Cn),t("uppercase",Gi)}function sn(){return function(e,t,n,o){if(!i(e)){if(null==e)return e;throw r("filter")("notarray",e)}var a;switch(o=o||"$",un(t)){case"function":break;case"boolean":case"null":case"number":case"string":a=!0;case"object":t=function(e,t,n,r){var i=y(e)&&n in e;return!0===t?t=R:k(t)||(t=function(e,t){return!(m(e)||(null===e||null===t?e!==t:y(t)||y(e)&&!g(e)||(e=er(""+e),t=er(""+t),-1===e.indexOf(t))))}),function(o){return i&&!y(o)?cn(o,e[n],t,n,!1):cn(o,e,t,n,r)}}(t,n,o,a);break;default:return e}return Array.prototype.filter.call(e,t)}}function cn(e,t,n,r,i,o){var a=un(e),s=un(t);if("string"===s&&"!"===t.charAt(0))return!cn(e,t.substring(1),n,r,i);if(E(e))return e.some(function(e){return cn(e,t,n,r,i)});switch(a){case"object":var c;if(i){for(c in e)if(c.charAt&&"$"!==c.charAt(0)&&cn(e[c],t,n,r,!0))return!0;return!o&&cn(e,t,n,r,!1)}if("object"===s){for(c in t)if(!k(o=t[c])&&!m(o)&&!cn((a=c===r)?e:e[c],o,n,r,a,a))return!1;return!0}return n(e,t);case"function":return!1;default:return n(e,t)}}function un(e){return null===e?"null":_typeof(e)}function ln(e){var t=e.NUMBER_FORMATS;return function(e,n,r){m(n)&&(n=t.CURRENCY_SYM),m(r)&&(r=t.PATTERNS[1].maxFrac);var i=n?/\u00A4/g:/\s*\u00A4\s*/g;return null==e?e:pn(e,t.PATTERNS[1],t.GROUP_SEP,t.DECIMAL_SEP,r).replace(i,n)}}function fn(e){var t=e.NUMBER_FORMATS;return function(e,n){return null==e?e:pn(e,t.PATTERNS[0],t.GROUP_SEP,t.DECIMAL_SEP,n)}}function pn(e,t,n,r,i){if(!x(e)&&!w(e)||isNaN(e))return"";var o=!isFinite(e),a=!1,s=Math.abs(e)+"",c="";if(o)c="â";else{for(function(e,t,n,r){var i=e.d,o=i.length-e.i;if(r=i[n=(t=m(t)?Math.min(Math.max(n,o),r):+t)+e.i],0<n){i.splice(Math.max(e.i,n));for(var a=n;a<i.length;a++)i[a]=0}else for(o=Math.max(0,o),e.i=1,i.length=Math.max(1,n=t+1),i[0]=0,a=1;a<n;a++)i[a]=0;if(5<=r)if(0>n-1){for(r=0;r>n;r--)i.unshift(0),e.i++;i.unshift(1),e.i++}else i[n-1]++;for(;o<Math.max(0,t);o++)i.push(0);(t=i.reduceRight(function(e,t,n,r){return t+=e,r[n]=t%10,Math.floor(t/10)},0))&&(i.unshift(t),e.i++)}(a=function(e){var t,n,r,i,o,a=0;for(-1<(n=e.indexOf(Ui))&&(e=e.replace(Ui,"")),0<(r=e.search(/e/i))?(0>n&&(n=r),n+=+e.slice(r+1),e=e.substring(0,r)):0>n&&(n=e.length),r=0;e.charAt(r)===_i;r++);if(r===(o=e.length))t=[0],n=1;else{for(o--;e.charAt(o)===_i;)o--;for(n-=r,t=[],i=0;r<=o;r++,i++)t[i]=+e.charAt(r)}return n>Fi&&(t=t.splice(0,Fi-1),a=n-1,n=1),{d:t,e:a,i:n}}(s),i,t.minFrac,t.maxFrac),c=a.d,s=a.i,i=a.e,o=[],a=c.reduce(function(e,t){return e&&!t},!0);0>s;)c.unshift(0),s++;for(0<s?o=c.splice(s,c.length):(o=c,c=[0]),s=[],c.length>=t.lgSize&&s.unshift(c.splice(-t.lgSize,c.length).join(""));c.length>t.gSize;)s.unshift(c.splice(-t.gSize,c.length).join(""));c.length&&s.unshift(c.join("")),c=s.join(n),o.length&&(c+=r+o.join("")),i&&(c+="e+"+i)}return 0>e&&!a?t.negPre+c+t.negSuf:t.posPre+c+t.posSuf}function dn(e,t,n,r){var i="";for((0>e||r&&0>=e)&&(r?e=1-e:(e=-e,i="-")),e=""+e;e.length<t;)e=_i+e;return n&&(e=e.substr(e.length-t)),i+e}function hn(e,t,n,r,i){return n=n||0,function(o){return o=o["get"+e](),(0<n||o>-n)&&(o+=n),0===o&&-12===n&&(o=12),dn(o,t,r,i)}}function $n(e,t,n){return function(r,i){var o=r["get"+e]();return i[tr((n?"STANDALONE":"")+(t?"SHORT":"")+e)][o]}}function gn(e){var t=new Date(e,0,1).getDay();return new Date(e,0,(4>=t?5:12)-t)}function mn(e){return function(t){var n=gn(t.getFullYear());return t=+new Date(t.getFullYear(),t.getMonth(),t.getDate()+(4-t.getDay()))-+n,dn(t=1+Math.round(t/6048e5),e)}}function vn(e,t){return 0>=e.getFullYear()?t.ERAS[0]:t.ERAS[1]}function yn(e){function t(e){var t;if(t=e.match(n)){e=new Date(0);var r=0,i=0,o=t[8]?e.setUTCFullYear:e.setFullYear,a=t[8]?e.setUTCHours:e.setHours;t[9]&&(r=f(t[9]+t[10]),i=f(t[9]+t[11])),o.call(e,f(t[1]),f(t[2])-1,f(t[3])),r=f(t[4]||0)-r,i=f(t[5]||0)-i,o=f(t[6]||0),t=Math.round(1e3*parseFloat("0."+(t[7]||0))),a.call(e,r,i,o,t)}return e}var n=/^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;return function(n,r,i){var a,s,c="",u=[];if(r=r||"mediumDate",r=e.DATETIME_FORMATS[r]||r,x(n)&&(n=zi.test(n)?f(n):t(n)),w(n)&&(n=new Date(n)),!C(n)||!isFinite(n.getTime()))return n;for(;r;)(s=Bi.exec(r))?r=(u=V(u,s,1)).pop():(u.push(r),r=null);var l=n.getTimezoneOffset();return i&&(l=_(i,l),n=B(n,i,!0)),o(u,function(t){a=Hi[t],c+=a?a(n,e.DATETIME_FORMATS,l):"''"===t?"'":t.replace(/(^'|'$)/g,"").replace(/''/g,"'")}),c}}function bn(){return function(e,t){return m(t)&&(t=2),F(e,t)}}function xn(){return function(e,t,n){return t=1/0===Math.abs(Number(t))?Number(t):f(t),lr(t)?e:(w(e)&&(e=e.toString()),i(e)?(n=0>(n=!n||isNaN(n)?0:f(n))?Math.max(0,e.length+n):n,0<=t?wn(e,n,n+t):0===n?wn(e,t,e.length):wn(e,Math.max(0,n+t),n)):e)}}function wn(e,t,n){return x(e)?e.slice(t,n):nr.call(e,t,n)}function Cn(e){function t(t){return t.map(function(t){var n=1,r=h;if(k(t))r=t;else if(x(t)&&("+"!==t.charAt(0)&&"-"!==t.charAt(0)||(n="-"===t.charAt(0)?-1:1,t=t.substring(1)),""!==t&&(r=e(t)).constant)){var i=r();r=function(e){return e[i]}}return{get:r,descending:n}})}function n(e){switch(_typeof(e)){case"number":case"boolean":case"string":return!0;default:return!1}}function o(e,t){var n=0,r=e.type;if(r===(i=t.type)){var i=e.value,o=t.value;"string"===r?(i=i.toLowerCase(),o=o.toLowerCase()):"object"===r&&(y(i)&&(i=e.index),y(o)&&(o=t.index)),i!==o&&(n=i<o?-1:1)}else n="undefined"===r?1:"undefined"===i?-1:"null"===r?1:"null"===i?-1:r<i?-1:1;return n}return function(e,a,s,c){if(null==e)return e;if(!i(e))throw r("orderBy")("notarray",e);E(a)||(a=[a]),0===a.length&&(a=["+"]);var u=t(a),l=s?-1:1,f=k(c)?c:o;return(e=Array.prototype.map.call(e,function(e,t){return{value:e,tieBreaker:{value:t,type:"number",index:t},predicateValues:u.map(function(r){var i=r.get(e);return r=_typeof(i),null===i?r="null":"object"===r&&(k(i.valueOf)&&n(i=i.valueOf())||g(i)&&n(i=i.toString())),{value:i,type:r,index:t}})}})).sort(function(e,t){for(var n=0,r=u.length;n<r;n++){var i=f(e.predicateValues[n],t.predicateValues[n]);if(i)return i*u[n].descending*l}return(f(e.tieBreaker,t.tieBreaker)||o(e.tieBreaker,t.tieBreaker))*l}),e.map(function(e){return e.value})}}function En(e){return k(e)&&(e={link:e}),e.restrict=e.restrict||"AC",$(e)}function Sn(e,t,n,r,i){this.$$controls=[],this.$error={},this.$$success={},this.$pending=void 0,this.$name=i(t.name||t.ngForm||"")(n),this.$dirty=!1,this.$valid=this.$pristine=!0,this.$submitted=this.$invalid=!1,this.$$parentForm=Ji,this.$$element=e,this.$$animate=r,kn(this)}function kn(e){e.$$classCache={},e.$$classCache[Io]=!(e.$$classCache[Do]=e.$$element.hasClass(Do))}function An(e){function t(e,t,n){n&&!e.$$classCache[t]?(e.$$animate.addClass(e.$$element,t),e.$$classCache[t]=!0):!n&&e.$$classCache[t]&&(e.$$animate.removeClass(e.$$element,t),e.$$classCache[t]=!1)}function n(e,n,r){n=n?"-"+ee(n,"-"):"",t(e,Do+n,!0===r),t(e,Io+n,!1===r)}var r=e.set,i=e.unset;e.clazz.prototype.$setValidity=function(e,o,a){m(o)?(this.$pending||(this.$pending={}),r(this.$pending,e,a)):(this.$pending&&i(this.$pending,e,a),Tn(this.$pending)&&(this.$pending=void 0)),M(o)?o?(i(this.$error,e,a),r(this.$$success,e,a)):(r(this.$error,e,a),i(this.$$success,e,a)):(i(this.$error,e,a),i(this.$$success,e,a)),this.$pending?(t(this,"ng-pending",!0),this.$valid=this.$invalid=void 0,n(this,"",null)):(t(this,"ng-pending",!1),this.$valid=Tn(this.$error),this.$invalid=!this.$valid,n(this,"",this.$valid)),n(this,e,o=this.$pending&&this.$pending[e]?void 0:!this.$error[e]&&(!!this.$$success[e]||null)),this.$$parentForm.$setValidity(e,o,this)}}function Tn(e){if(e)for(var t in e)if(e.hasOwnProperty(t))return!1;return!0}function On(e){e.$formatters.push(function(t){return e.$isEmpty(t)?t:t.toString()})}function Mn(e,t,n,r,i,o){var a=er(t[0].type);if(!i.android){var s=!1;t.on("compositionstart",function(){s=!0}),t.on("compositionupdate",function(e){(m(e.data)||""===e.data)&&(s=!1)}),t.on("compositionend",function(){s=!1,u()})}var c,u=function(e){if(c&&(o.defer.cancel(c),c=null),!s){var i=t.val();e=e&&e.type,"password"===a||n.ngTrim&&"false"===n.ngTrim||(i=hr(i)),(r.$viewValue!==i||""===i&&r.$$hasNativeValidators)&&r.$setViewValue(i,e)}};if(i.hasEvent("input"))t.on("input",u);else{var l=function(e,t,n){c||(c=o.defer(function(){c=null,t&&t.value===n||u(e)}))};t.on("keydown",function(e){var t=e.keyCode;91===t||15<t&&19>t||37<=t&&40>=t||l(e,this,this.value)}),i.hasEvent("paste")&&t.on("paste cut drop",l)}t.on("change",u),uo[a]&&r.$$hasNativeValidators&&a===n.type&&t.on("keydown wheel mousedown",function(e){if(!c){var t=this.validity,n=t.badInput,r=t.typeMismatch;c=o.defer(function(){c=null,t.badInput===n&&t.typeMismatch===r||u(e)})}}),r.$render=function(){var e=r.$isEmpty(r.$viewValue)?"":r.$viewValue;t.val()!==e&&t.val(e)}}function Nn(e,t){return function(n,r){var i,a;if(C(n))return n;if(x(n)){if('"'===n.charAt(0)&&'"'===n.charAt(n.length-1)&&(n=n.substring(1,n.length-1)),eo.test(n))return new Date(n);if(e.lastIndex=0,i=e.exec(n))return i.shift(),a=r?{yyyy:r.getFullYear(),MM:r.getMonth()+1,dd:r.getDate(),HH:r.getHours(),mm:r.getMinutes(),ss:r.getSeconds(),sss:r.getMilliseconds()/1e3}:{yyyy:1970,MM:1,dd:1,HH:0,mm:0,ss:0,sss:0},o(i,function(e,n){n<t.length&&(a[t[n]]=+e)}),i=new Date(a.yyyy,a.MM-1,a.dd,a.HH,a.mm,a.ss||0,1e3*a.sss||0),100>a.yyyy&&i.setFullYear(a.yyyy),i}return NaN}}function Dn(e,t,n,r){return function(i,o,a,s,c,u,l,f){function p(e){return e&&!(e.getTime&&e.getTime()!=e.getTime())}function d(e){return v(e)&&!C(e)?h(e)||void 0:e}function h(e,t){var r=s.$options.getOption("timezone");g&&g!==r&&(t=H(t,_(g)));var i=n(e,t);return!isNaN(i)&&r&&(i=B(i,r)),i}In(i,o,a,s,e),Mn(0,o,a,s,c,u);var $,g,y="time"===e||"datetimelocal"===e;if(s.$parsers.push(function(n){return s.$isEmpty(n)?null:t.test(n)?h(n,$):void(s.$$parserName=e)}),s.$formatters.push(function(e){if(e&&!C(e))throw Ro("datefmt",e);if(p(e)){$=e;var t=s.$options.getOption("timezone");t&&(g=t,$=B($,t,!0));var n=r;return y&&x(s.$options.getOption("timeSecondsFormat"))&&(n=r.replace("ss.sss",s.$options.getOption("timeSecondsFormat")).replace(/:$/,"")),e=l("date")(e,n,t),y&&s.$options.getOption("timeStripZeroSeconds")&&(e=e.replace(/(?::00)?(?:\.000)?$/,"")),e}return g=$=null,""}),v(a.min)||a.ngMin){var b=a.min||f(a.ngMin)(i),w=d(b);s.$validators.min=function(e){return!p(e)||m(w)||n(e)>=w},a.$observe("min",function(e){e!==b&&(w=d(e),b=e,s.$validate())})}if(v(a.max)||a.ngMax){var E=a.max||f(a.ngMax)(i),S=d(E);s.$validators.max=function(e){return!p(e)||m(S)||n(e)<=S},a.$observe("max",function(e){e!==E&&(S=d(e),E=e,s.$validate())})}}}function In(e,t,n,r,i){(r.$$hasNativeValidators=y(t[0].validity))&&r.$parsers.push(function(e){var n=t.prop("validity")||{};if(!n.badInput&&!n.typeMismatch)return e;r.$$parserName=i})}function Pn(e){e.$parsers.push(function(t){return e.$isEmpty(t)?null:ro.test(t)?parseFloat(t):void(e.$$parserName="number")}),e.$formatters.push(function(t){if(!e.$isEmpty(t)){if(!w(t))throw Ro("numfmt",t);t=t.toString()}return t})}function Ln(e){return v(e)&&!w(e)&&(e=parseFloat(e)),lr(e)?void 0:e}function Rn(e){var t=e.toString(),n=t.indexOf(".");return-1===n?-1<e&&1>e&&(e=/e-(\d+)$/.exec(t))?Number(e[1]):0:t.length-n-1}function Vn(e,t,n){var r=(0|(e=Number(e)))!==e,i=(0|t)!==t,o=(0|n)!==n;if(r||i||o){var a=r?Rn(e):0,s=i?Rn(t):0,c=o?Rn(n):0;a=Math.max(a,s,c);e*=a=Math.pow(10,a),t*=a,n*=a,r&&(e=Math.round(e)),i&&(t=Math.round(t)),o&&(n=Math.round(n))}return 0==(e-t)%n}function jn(e,t,n,r,i){if(v(r)){if(!(e=e(r)).constant)throw Ro("constexpr",n,r);return e(t)}return i}function qn(e,t){function n(e,t){if(!e||!e.length)return[];if(!t||!t.length)return e;var n=[],r=0;e:for(;r<e.length;r++){for(var i=e[r],o=0;o<t.length;o++)if(i===t[o])continue e;n.push(i)}return n}function r(e){if(!e)return e;var t=e;return E(e)?t=e.map(r).join(" "):y(e)?t=Object.keys(e).filter(function(t){return e[t]}).join(" "):x(e)||(t=e+""),t}var i;return e="ngClass"+e,["$parse",function(a){return{restrict:"AC",link:function(s,c,u){function l(e,t){var n=[];return o(e,function(e){(0<t||p[e])&&(p[e]=(p[e]||0)+t,p[e]===+(0<t)&&n.push(e))}),n.join(" ")}var f,p=c.data("$classCounts"),d=!0;p||(p=oe(),c.data("$classCounts",p)),"ngClass"!==e&&(i||(i=a("$index",function(e){return 1&e})),s.$watch(i,function(e){if(e===t){var n=l((n=f)&&n.split(" "),1);u.$addClass(n)}else n=l((n=f)&&n.split(" "),-1),u.$removeClass(n);d=e})),s.$watch(a(u[e],r),function(e){if(d===t){var r=f&&f.split(" "),i=e&&e.split(" "),o=n(r,i);r=n(i,r),o=l(o,-1),r=l(r,1);u.$addClass(r),u.$removeClass(o)}f=e})}}}]}function Fn(e,t,n,r,i,o){return{restrict:"A",compile:function(a,s){var c=e(s[r]);return function(e,r){r.on(i,function(r){var i=function(){c(e,{$event:r})};if(t.$$phase)if(o)e.$evalAsync(i);else try{i()}catch(e){n(e)}else e.$apply(i)})}}}}function Un(e,t,n,r,i,o,a,s,c){this.$modelValue=this.$viewValue=Number.NaN,this.$$rawModelValue=void 0,this.$validators={},this.$asyncValidators={},this.$parsers=[],this.$formatters=[],this.$viewChangeListeners=[],this.$untouched=!0,this.$touched=!1,this.$pristine=!0,this.$dirty=!1,this.$valid=!0,this.$invalid=!1,this.$error={},this.$$success={},this.$pending=void 0,this.$name=c(n.name||"",!1)(e),this.$$parentForm=Ji,this.$options=Vo,this.$$updateEvents="",this.$$updateEventHandler=this.$$updateEventHandler.bind(this),this.$$parsedNgModel=i(n.ngModel),this.$$parsedNgModelAssign=this.$$parsedNgModel.assign,this.$$ngModelGet=this.$$parsedNgModel,this.$$ngModelSet=this.$$parsedNgModelAssign,this.$$pendingDebounce=null,this.$$parserValid=void 0,this.$$parserName="parse",this.$$currentValidationRunId=0,this.$$scope=e,this.$$rootScope=e.$root,this.$$attr=n,this.$$element=r,this.$$animate=o,this.$$timeout=a,this.$$parse=i,this.$$q=s,this.$$exceptionHandler=t,kn(this),function(e){e.$$scope.$watch(function(t){return(t=e.$$ngModelGet(t))===e.$modelValue||e.$modelValue!=e.$modelValue&&t!=t||e.$$setModelValue(t),t})}(this)}function _n(e){this.$$options=e}function Hn(e,t){o(t,function(t,n){v(e[n])||(e[n]=t)})}function Bn(e,t){e.prop("selected",t),e.attr("selected",t)}function zn(e,t,n){if(e){if(x(e)&&(e=new RegExp("^"+e+"$")),!e.test)throw r("ngPattern")("noregexp",t,e,z(n));return e}}function Wn(e){return e=f(e),lr(e)?-1:e}var Gn,Kn,Yn,Jn,Xn={objectMaxDepth:5,urlErrorParamsEnabled:!0},Zn=/^\/(.+)\/([a-z]*)$/,Qn=Object.prototype.hasOwnProperty,er=function(e){return x(e)?e.toLowerCase():e},tr=function(e){return x(e)?e.toUpperCase():e},nr=[].slice,rr=[].splice,ir=[].push,or=Object.prototype.toString,ar=Object.getPrototypeOf,sr=r("ng"),cr=e.angular||(e.angular={}),ur=0;Gn=e.document.documentMode;var lr=Number.isNaN||function(e){return e!=e};d.$inject=[],h.$inject=[];var fr,pr,dr=/^\[object (?:Uint8|Uint8Clamped|Uint16|Uint32|Int8|Int16|Int32|Float32|Float64)Array]$/,hr=function(e){return x(e)?e.trim():e},$r=function(e){return e.replace(/([-()[\]{}+?*.$^|,:#<!\\])/g,"\\$1").replace(/\x08/g,"\\x08")},gr=function t(){if(!v(t.rules)){var n=e.document.querySelector("[ng-csp]")||e.document.querySelector("[data-ng-csp]");if(n){var r=n.getAttribute("ng-csp")||n.getAttribute("data-ng-csp");t.rules={noUnsafeEval:!r||-1!==r.indexOf("no-unsafe-eval"),noInlineStyle:!r||-1!==r.indexOf("no-inline-style")}}else{n=t;try{new Function(""),r=!1}catch(e){r=!0}n.rules={noUnsafeEval:r,noInlineStyle:!1}}}return t.rules},mr=function t(){if(v(t.name_))return t.name_;var n,r,i,o,a=yr.length;for(r=0;r<a;++r)if(i=yr[r],n=e.document.querySelector("["+i.replace(":","\\:")+"jq]")){o=n.getAttribute(i+"jq");break}return t.name_=o},vr=/:/g,yr=["ng-","data-ng-","ng:","x-ng-"],br=(fr=e.document,!(pr=fr.currentScript)||(pr instanceof e.HTMLScriptElement||pr instanceof e.SVGScriptElement)&&[(pr=pr.attributes).getNamedItem("src"),pr.getNamedItem("href"),pr.getNamedItem("xlink:href")].every(function(e){if(!e)return!0;if(!e.value)return!1;var t=fr.createElement("a");if(t.href=e.value,fr.location.origin===t.origin)return!0;switch(t.protocol){case"http:":case"https:":case"ftp:":case"blob:":case"file:":case"data:":return!0;default:return!1}})),xr=/[A-Z]/g,wr=!1,Cr=3,Er={full:"1.7.8",major:1,minor:7,dot:8,codeName:"enthusiastic-oblation"};de.expando="ng339";var Sr=de.cache={},kr=1;de._data=function(e){return this.cache[e[this.expando]]||{}};var Ar=/-([a-z])/g,Tr=/^-ms-/,Or={mouseleave:"mouseout",mouseenter:"mouseover"},Mr=r("jqLite"),Nr=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,Dr=/<|&#?\w+;/,Ir=/<([\w:-]+)/,Pr=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,Lr={option:[1,'<select multiple="multiple">',"</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Lr.optgroup=Lr.option,Lr.tbody=Lr.tfoot=Lr.colgroup=Lr.caption=Lr.thead,Lr.th=Lr.td;var Rr=e.Node.prototype.contains||function(e){return!!(16&this.compareDocumentPosition(e))},Vr=de.prototype={ready:Me,toString:function(){var e=[];return o(this,function(t){e.push(""+t)}),"["+e.join(", ")+"]"},eq:function(e){return Kn(0<=e?this[e]:this[this.length+e])},length:0,push:ir,sort:[].sort,splice:[].splice},jr={};o("multiple selected checked disabled readOnly required open".split(" "),function(e){jr[er(e)]=e});var qr={};o("input select option textarea button form details".split(" "),function(e){qr[e]=!0});var Fr={ngMinlength:"minlength",ngMaxlength:"maxlength",ngMin:"min",ngMax:"max",ngPattern:"pattern",ngStep:"step"};o({data:xe,removeData:ye,hasData:function(e){for(var t in Sr[e.ng339])return!0;return!1},cleanData:function(e){for(var t=0,n=e.length;t<n;t++)ye(e[t]),ve(e[t])}},function(e,t){de[t]=e}),o({data:xe,inheritedData:Ae,scope:function(e){return Kn.data(e,"$scope")||Ae(e.parentNode||e,["$isolateScope","$scope"])},isolateScope:function(e){return Kn.data(e,"$isolateScope")||Kn.data(e,"$isolateScopeNoTemplate")},controller:ke,injector:function(e){return Ae(e,"$injector")},removeAttr:function(e,t){e.removeAttribute(t)},hasClass:we,css:function(e,t,n){if(t=le(t.replace(Tr,"ms-")),!v(n))return e.style[t];e.style[t]=n},attr:function(e,t,n){if((r=e.nodeType)!==Cr&&2!==r&&8!==r&&e.getAttribute){var r=er(t),i=jr[r];if(!v(n))return e=e.getAttribute(t),i&&null!==e&&(e=r),null===e?void 0:e;null===n||!1===n&&i?e.removeAttribute(t):e.setAttribute(t,i?r:n)}},prop:function(e,t,n){if(!v(n))return e[t];e[t]=n},text:function(){function e(e,t){if(m(t)){var n=e.nodeType;return 1===n||n===Cr?e.textContent:""}e.textContent=t}return e.$dv="",e}(),val:function(e,t){if(m(t)){if(e.multiple&&"select"===D(e)){var n=[];return o(e.options,function(e){e.selected&&n.push(e.value||e.text)}),n}return e.value}e.value=t},html:function(e,t){if(m(t))return e.innerHTML;$e(e,!0),e.innerHTML=t},empty:Te},function(e,t){de.prototype[t]=function(t,n){var r,i,o=this.length;if(e!==Te&&m(2===e.length&&e!==we&&e!==ke?t:n)){if(y(t)){for(r=0;r<o;r++)if(e===xe)e(this[r],t);else for(i in t)e(this[r],i,t[i]);return this}for(o=m(r=e.$dv)?Math.min(o,1):o,i=0;i<o;i++){var a=e(this[i],t,n);r=r?r+a:a}return r}for(r=0;r<o;r++)e(this[r],t,n);return this}}),o({removeData:ye,on:function(e,t,n,r){if(v(r))throw Mr("onargs");if(fe(e)){var i=(r=be(e,!0)).events,o=r.handle;o||(o=r.handle=function(e,t){var n=function(n,r){n.isDefaultPrevented=function(){return n.defaultPrevented};var i=t[r||n.type],o=i?i.length:0;if(o){if(m(n.immediatePropagationStopped)){var a=n.stopImmediatePropagation;n.stopImmediatePropagation=function(){n.immediatePropagationStopped=!0,n.stopPropagation&&n.stopPropagation(),a&&a.call(n)}}n.isImmediatePropagationStopped=function(){return!0===n.immediatePropagationStopped};var s=i.specialHandlerWrapper||De;1<o&&(i=se(i));for(var c=0;c<o;c++)n.isImmediatePropagationStopped()||s(e,n,i[c])}};return n.elem=e,n}(e,i));for(var a=(r=0<=t.indexOf(" ")?t.split(" "):[t]).length,s=function(t,r,a){var s=i[t];s||(s=i[t]=[],s.specialHandlerWrapper=r,"$destroy"===t||a||e.addEventListener(t,o)),s.push(n)};a--;)t=r[a],Or[t]?(s(Or[t],Ie),s(t,void 0,!0)):s(t)}},off:ve,one:function(e,t,n){(e=Kn(e)).on(t,function r(){e.off(t,n),e.off(t,r)}),e.on(t,n)},replaceWith:function(e,t){var n,r=e.parentNode;$e(e),o(new de(t),function(t){n?r.insertBefore(t,n.nextSibling):r.replaceChild(t,e),n=t})},children:function(e){var t=[];return o(e.childNodes,function(e){1===e.nodeType&&t.push(e)}),t},contents:function(e){return e.contentDocument||e.childNodes||[]},append:function(e,t){if(1===(n=e.nodeType)||11===n)for(var n=0,r=(t=new de(t)).length;n<r;n++)e.appendChild(t[n])},prepend:function(e,t){if(1===e.nodeType){var n=e.firstChild;o(new de(t),function(t){e.insertBefore(t,n)})}},wrap:function(e,t){var n=Kn(t).eq(0).clone()[0],r=e.parentNode;r&&r.replaceChild(n,e),n.appendChild(e)},remove:Oe,detach:function(e){Oe(e,!0)},after:function(e,t){var n=e,r=e.parentNode;if(r)for(var i=0,o=(t=new de(t)).length;i<o;i++){var a=t[i];r.insertBefore(a,n.nextSibling),n=a}},addClass:Ee,removeClass:Ce,toggleClass:function(e,t,n){t&&o(t.split(" "),function(t){var r=n;m(r)&&(r=!we(e,t)),(r?Ee:Ce)(e,t)})},parent:function(e){return(e=e.parentNode)&&11!==e.nodeType?e:null},next:function(e){return e.nextElementSibling},find:function(e,t){return e.getElementsByTagName?e.getElementsByTagName(t):[]},clone:he,triggerHandler:function(e,t,n){var r,i,a=t.type||t,s=be(e);(s=(s=s&&s.events)&&s[a])&&(r={preventDefault:function(){this.defaultPrevented=!0},isDefaultPrevented:function(){return!0===this.defaultPrevented},stopImmediatePropagation:function(){this.immediatePropagationStopped=!0},isImmediatePropagationStopped:function(){return!0===this.immediatePropagationStopped},stopPropagation:d,type:a,target:e},t.type&&(r=u(r,t)),t=se(s),i=n?[r].concat(n):[r],o(t,function(t){r.isImmediatePropagationStopped()||t.apply(e,i)}))}},function(e,t){de.prototype[t]=function(t,n,r){for(var i,o=0,a=this.length;o<a;o++)m(i)?v(i=e(this[o],t,n,r))&&(i=Kn(i)):Se(i,e(this[o],t,n,r));return v(i)?i:this}}),de.prototype.bind=de.prototype.on,de.prototype.unbind=de.prototype.off;var Ur=Object.create(null);Re.prototype={_idx:function(e){return e!==this._lastKey&&(this._lastKey=e,this._lastIndex=this._keys.indexOf(e)),this._lastIndex},_transformKey:function(e){return lr(e)?Ur:e},get:function(e){if(e=this._transformKey(e),-1!==(e=this._idx(e)))return this._values[e]},has:function(e){return e=this._transformKey(e),-1!==this._idx(e)},set:function(e,t){e=this._transformKey(e);var n=this._idx(e);-1===n&&(n=this._lastIndex=this._keys.length),this._keys[n]=e,this._values[n]=t},delete:function(e){return e=this._transformKey(e),-1!==(e=this._idx(e))&&(this._keys.splice(e,1),this._values.splice(e,1),this._lastKey=NaN,this._lastIndex=-1,!0)}};var _r=Re,Hr=[function(){this.$get=[function(){return _r}]}],Br=/^([^(]+?)=>/,zr=/^[^(]*\(\s*([^)]*)\)/m,Wr=/,/,Gr=/^\s*(_?)(\S+?)\1\s*$/,Kr=/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/gm,Yr=r("$injector");je.$$annotate=function(e,t,n){var r;if("function"==typeof e){if(!(r=e.$inject)){if(r=[],e.length){if(t)throw x(n)&&n||(n=e.name||function(e){return(e=Ve(e))?"function("+(e[1]||"").replace(/[\s\r\n]+/," ")+")":"fn"}(e)),Yr("strictdi",n);o((t=Ve(e))[1].split(Wr),function(e){e.replace(Gr,function(e,t,n){r.push(n)})})}e.$inject=r}}else E(e)?(ne(e[t=e.length-1],"fn"),r=e.slice(0,t)):ne(e,"fn",!0);return r};var Jr=r("$animate"),Xr=function(){this.$get=d},Zr=function(){var e=new _r,t=[];this.$get=["$$AnimateRunner","$rootScope",function(n,r){function i(e,t,n){var r=!1;return t&&o(t=x(t)?t.split(" "):E(t)?t:[],function(t){t&&(r=!0,e[t]=n)}),r}function a(){o(t,function(t){var n=e.get(t);if(n){var r=function(e){x(e)&&(e=e.split(" "));var t=oe();return o(e,function(e){e.length&&(t[e]=!0)}),t}(t.attr("class")),i="",a="";o(n,function(e,t){e!==!!r[t]&&(e?i+=(i.length?" ":"")+t:a+=(a.length?" ":"")+t)}),o(t,function(e){i&&Ee(e,i),a&&Ce(e,a)}),e.delete(t)}}),t.length=0}return{enabled:d,on:d,off:d,pin:d,push:function(o,s,c,u){return u&&u(),(c=c||{}).from&&o.css(c.from),c.to&&o.css(c.to),(c.addClass||c.removeClass)&&(s=c.addClass,u=c.removeClass,s=i(c=e.get(o)||{},s,!0),u=i(c,u,!1),(s||u)&&(e.set(o,c),t.push(o),1===t.length&&r.$$postDigest(a))),(o=new n).complete(),o}}}]},Qr=["$provide",function(e){var t=this,n=null,r=null;this.$$registeredAnimations=Object.create(null),this.register=function(n,r){if(n&&"."!==n.charAt(0))throw Jr("notcsel",n);var i=n+"-animation";t.$$registeredAnimations[n.substr(1)]=i,e.factory(i,r)},this.customFilter=function(e){return 1===arguments.length&&(r=k(e)?e:null),r},this.classNameFilter=function(e){if(1===arguments.length&&(n=e instanceof RegExp?e:null)&&/[(\s|\/)]ng-animate[(\s|\/)]/.test(n.toString()))throw n=null,Jr("nongcls","ng-animate");return n},this.$get=["$$animateQueue",function(e){function t(e,t,n){if(n){var r;e:{for(r=0;r<n.length;r++){var i=n[r];if(1===i.nodeType){r=i;break e}}r=void 0}!r||r.parentNode||r.previousElementSibling||(n=null)}n?n.after(e):t.prepend(e)}return{on:e.on,off:e.off,pin:e.pin,enabled:e.enabled,cancel:function(e){e.cancel&&e.cancel()},enter:function(n,r,i,o){return r=r&&Kn(r),i=i&&Kn(i),t(n,r=r||i.parent(),i),e.push(n,"enter",Ue(o))},move:function(n,r,i,o){return r=r&&Kn(r),i=i&&Kn(i),t(n,r=r||i.parent(),i),e.push(n,"move",Ue(o))},leave:function(t,n){return e.push(t,"leave",Ue(n),function(){t.remove()})},addClass:function(t,n,r){return(r=Ue(r)).addClass=Fe(r.addclass,n),e.push(t,"addClass",r)},removeClass:function(t,n,r){return(r=Ue(r)).removeClass=Fe(r.removeClass,n),e.push(t,"removeClass",r)},setClass:function(t,n,r,i){return(i=Ue(i)).addClass=Fe(i.addClass,n),i.removeClass=Fe(i.removeClass,r),e.push(t,"setClass",i)},animate:function(t,n,r,i,o){return(o=Ue(o)).from=o.from?u(o.from,n):n,o.to=o.to?u(o.to,r):r,o.tempClasses=Fe(o.tempClasses,i||"ng-inline-animate"),e.push(t,"animate",o)}}}]}],ei=function(){this.$get=["$$rAF",function(e){function t(t){n.push(t),1<n.length||e(function(){for(var e=0;e<n.length;e++)n[e]();n=[]})}var n=[];return function(){var e=!1;return t(function(){e=!0}),function(n){e?n():t(n)}}}]},ti=function(){this.$get=["$q","$sniffer","$$animateAsyncRun","$$isDocumentHidden","$timeout",function(e,t,n,r,i){function a(e){this.setHost(e);var t=n();this._doneCallbacks=[],this._tick=function(e){r()?i(e,0,!1):t(e)},this._state=0}return a.chain=function(e,t){var n=0;!function r(){n===e.length?t(!0):e[n](function(e){!1===e?t(!1):(n++,r())})}()},a.all=function(e,t){function n(n){i=i&&n,++r===e.length&&t(i)}var r=0,i=!0;o(e,function(e){e.done(n)})},a.prototype={setHost:function(e){this.host=e||{}},done:function(e){2===this._state?e():this._doneCallbacks.push(e)},progress:d,getPromise:function(){if(!this.promise){var t=this;this.promise=e(function(e,n){t.done(function(t){!1===t?n():e()})})}return this.promise},then:function(e,t){return this.getPromise().then(e,t)},catch:function(e){return this.getPromise().catch(e)},finally:function(e){return this.getPromise().finally(e)},pause:function(){this.host.pause&&this.host.pause()},resume:function(){this.host.resume&&this.host.resume()},end:function(){this.host.end&&this.host.end(),this._resolve(!0)},cancel:function(){this.host.cancel&&this.host.cancel(),this._resolve(!1)},complete:function(e){var t=this;0===t._state&&(t._state=1,t._tick(function(){t._resolve(e)}))},_resolve:function(e){2!==this._state&&(o(this._doneCallbacks,function(t){t(e)}),this._doneCallbacks.length=0,this._state=2)}},a}]},ni=function(){this.$get=["$$rAF","$q","$$AnimateRunner",function(e,t,n){return function(t,r){function i(){return e(function(){o.addClass&&(t.addClass(o.addClass),o.addClass=null),o.removeClass&&(t.removeClass(o.removeClass),o.removeClass=null),o.to&&(t.css(o.to),o.to=null),a||s.complete(),a=!0}),s}var o=r||{};o.$$prepared||(o=P(o)),o.cleanupStyles&&(o.from=o.to=null),o.from&&(t.css(o.from),o.from=null);var a,s=new n;return{start:i,end:i}}}]},ri=r("$compile"),ii=new function(){};We.$inject=["$provide","$$sanitizeUriProvider"],Ge.prototype.isFirstChange=function(){return this.previousValue===ii};var oi=/^((?:x|data)[:\-_])/i,ai=/[:\-_]+(.)/g,si=r("$controller"),ci=/^(\S+)(\s+as\s+([\w$]+))?$/,ui=function(){this.$get=["$document",function(e){return function(t){return t?!t.nodeType&&t instanceof Kn&&(t=t[0]):t=e[0].body,t.offsetWidth+1}}]},li="application/json",fi={"Content-Type":li+";charset=utf-8"},pi=/^\[|^\{(?!\{)/,di={"[":/]$/,"{":/}$/},hi=/^\)]\}',?\n/,$i=r("$http"),gi=cr.$interpolateMinErr=r("$interpolate");gi.throwNoconcat=function(e){throw gi("noconcat",e)},gi.interr=function(e,t){return gi("interr",e,t.toString())};var mi=r("$interval"),vi=function(){this.$get=function(){var e=cr.callbacks,t={};return{createCallback:function(n){var r="angular.callbacks."+(n="_"+(e.$$counter++).toString(36)),i=function(e){var t=function e(t){e.data=t,e.called=!0};return t.id=e,t}(n);return t[r]=e[n]=i,r},wasCalled:function(e){return t[e].called},getResponse:function(e){return t[e].data},removeCallback:function(n){delete e[t[n].id],delete t[n]}}}},yi=/^([^?#]*)(\?([^#]*))?(#(.*))?$/,bi={http:80,https:443,ftp:21},xi=r("$location"),wi=/^\s*[\\\/]{2,}/,Ci={$$absUrl:"",$$html5:!1,$$replace:!1,$$compose:function(){for(var e=this.$$path,t=this.$$hash,n=function(e){var t=[];return o(e,function(e,n){E(e)?o(e,function(e){t.push(Y(n,!0)+(!0===e?"":"="+Y(e,!0)))}):t.push(Y(n,!0)+(!0===e?"":"="+Y(e,!0)))}),t.length?t.join("&"):""}(this.$$search),r=(t=t?"#"+K(t):"",(e=e.split("/")).length);r--;)e[r]=K(e[r].replace(/%2F/g,"/"));this.$$url=e.join("/")+(n?"?"+n:"")+t,this.$$absUrl=this.$$normalizeUrl(this.$$url),this.$$urlUpdatedByLocation=!0},absUrl:Ct("$$absUrl"),url:function(e){if(m(e))return this.$$url;var t=yi.exec(e);return(t[1]||""===e)&&this.path(decodeURIComponent(t[1])),(t[2]||t[1]||""===e)&&this.search(t[3]||""),this.hash(t[5]||""),this},protocol:Ct("$$protocol"),host:Ct("$$host"),port:Ct("$$port"),path:Et("$$path",function(e){return"/"===(e=null!==e?e.toString():"").charAt(0)?e:"/"+e}),search:function(e,t){switch(arguments.length){case 0:return this.$$search;case 1:if(x(e)||w(e))e=e.toString(),this.$$search=G(e);else{if(!y(e))throw xi("isrcharg");o(e=P(e,{}),function(t,n){null==t&&delete e[n]}),this.$$search=e}break;default:m(t)||null===t?delete this.$$search[e]:this.$$search[e]=t}return this.$$compose(),this},hash:Et("$$hash",function(e){return null!==e?e.toString():""}),replace:function(){return this.$$replace=!0,this}};o([wt,xt,bt],function(e){e.prototype=Object.create(Ci),e.prototype.state=function(t){if(!arguments.length)return this.$$state;if(e!==bt||!this.$$html5)throw xi("nostate");return this.$$state=m(t)?null:t,this.$$urlUpdatedByLocation=!0,this}});var Ei=r("$parse"),Si={}.constructor.prototype.valueOf,ki=oe();o("+ - * / % === !== == != < > <= >= && || ! = |".split(" "),function(e){ki[e]=!0});var Ai={n:"\n",f:"\f",r:"\r",t:"\t",v:"\v","'":"'",'"':'"'},Ti=function(e){this.options=e};Ti.prototype={constructor:Ti,lex:function(e){for(this.text=e,this.index=0,this.tokens=[];this.index<this.text.length;)if('"'===(e=this.text.charAt(this.index))||"'"===e)this.readString(e);else if(this.isNumber(e)||"."===e&&this.isNumber(this.peek()))this.readNumber();else if(this.isIdentifierStart(this.peekMultichar()))this.readIdent();else if(this.is(e,"(){}[].,;:?"))this.tokens.push({index:this.index,text:e}),this.index++;else if(this.isWhitespace(e))this.index++;else{var t=e+this.peek(),n=t+this.peek(2),r=ki[t],i=ki[n];ki[e]||r||i?(e=i?n:r?t:e,this.tokens.push({index:this.index,text:e,operator:!0}),this.index+=e.length):this.throwError("Unexpected next character ",this.index,this.index+1)}return this.tokens},is:function(e,t){return-1!==t.indexOf(e)},peek:function(e){return e=e||1,this.index+e<this.text.length&&this.text.charAt(this.index+e)},isNumber:function(e){return"0"<=e&&"9">=e&&"string"==typeof e},isWhitespace:function(e){return" "===e||"\r"===e||"\t"===e||"\n"===e||"\v"===e||"Â "===e},isIdentifierStart:function(e){return this.options.isIdentifierStart?this.options.isIdentifierStart(e,this.codePointAt(e)):this.isValidIdentifierStart(e)},isValidIdentifierStart:function(e){return"a"<=e&&"z">=e||"A"<=e&&"Z">=e||"_"===e||"$"===e},isIdentifierContinue:function(e){return this.options.isIdentifierContinue?this.options.isIdentifierContinue(e,this.codePointAt(e)):this.isValidIdentifierContinue(e)},isValidIdentifierContinue:function(e,t){return this.isValidIdentifierStart(e,t)||this.isNumber(e)},codePointAt:function(e){return 1===e.length?e.charCodeAt(0):(e.charCodeAt(0)<<10)+e.charCodeAt(1)-56613888},peekMultichar:function(){var e=this.text.charAt(this.index),t=this.peek();if(!t)return e;var n=e.charCodeAt(0),r=t.charCodeAt(0);return 55296<=n&&56319>=n&&56320<=r&&57343>=r?e+t:e},isExpOperator:function(e){return"-"===e||"+"===e||this.isNumber(e)},throwError:function(e,t,n){throw n=n||this.index,t=v(t)?"s "+t+"-"+this.index+" ["+this.text.substring(t,n)+"]":" "+n,Ei("lexerr",e,t,this.text)},readNumber:function(){for(var e="",t=this.index;this.index<this.text.length;){var n=er(this.text.charAt(this.index));if("."===n||this.isNumber(n))e+=n;else{var r=this.peek();if("e"===n&&this.isExpOperator(r))e+=n;else if(this.isExpOperator(n)&&r&&this.isNumber(r)&&"e"===e.charAt(e.length-1))e+=n;else{if(!this.isExpOperator(n)||r&&this.isNumber(r)||"e"!==e.charAt(e.length-1))break;this.throwError("Invalid exponent")}}this.index++}this.tokens.push({index:t,text:e,constant:!0,value:Number(e)})},readIdent:function(){var e=this.index;for(this.index+=this.peekMultichar().length;this.index<this.text.length;){var t=this.peekMultichar();if(!this.isIdentifierContinue(t))break;this.index+=t.length}this.tokens.push({index:e,text:this.text.slice(e,this.index),identifier:!0})},readString:function(e){var t=this.index;this.index++;for(var n="",r=e,i=!1;this.index<this.text.length;){var o=this.text.charAt(this.index);r=r+o;if(i)"u"===o?((i=this.text.substring(this.index+1,this.index+5)).match(/[\da-f]{4}/i)||this.throwError("Invalid unicode escape [\\u"+i+"]"),this.index+=4,n+=String.fromCharCode(parseInt(i,16))):n+=Ai[o]||o,i=!1;else if("\\"===o)i=!0;else{if(o===e)return this.index++,void this.tokens.push({index:t,text:r,constant:!0,value:n});n+=o}this.index++}this.throwError("Unterminated quote",t)}};var Oi=function(e,t){this.lexer=e,this.options=t};Oi.Program="Program",Oi.ExpressionStatement="ExpressionStatement",Oi.AssignmentExpression="AssignmentExpression",Oi.ConditionalExpression="ConditionalExpression",Oi.LogicalExpression="LogicalExpression",Oi.BinaryExpression="BinaryExpression",Oi.UnaryExpression="UnaryExpression",Oi.CallExpression="CallExpression",Oi.MemberExpression="MemberExpression",Oi.Identifier="Identifier",Oi.Literal="Literal",Oi.ArrayExpression="ArrayExpression",Oi.Property="Property",Oi.ObjectExpression="ObjectExpression",Oi.ThisExpression="ThisExpression",Oi.LocalsExpression="LocalsExpression",Oi.NGValueParameter="NGValueParameter",Oi.prototype={ast:function(e){return this.text=e,this.tokens=this.lexer.lex(e),e=this.program(),0!==this.tokens.length&&this.throwError("is an unexpected token",this.tokens[0]),e},program:function(){for(var e=[];;)if(0<this.tokens.length&&!this.peek("}",")",";","]")&&e.push(this.expressionStatement()),!this.expect(";"))return{type:Oi.Program,body:e}},expressionStatement:function(){return{type:Oi.ExpressionStatement,expression:this.filterChain()}},filterChain:function(){for(var e=this.expression();this.expect("|");)e=this.filter(e);return e},expression:function(){return this.assignment()},assignment:function(){var e=this.ternary();if(this.expect("=")){if(!Dt(e))throw Ei("lval");e={type:Oi.AssignmentExpression,left:e,right:this.assignment(),operator:"="}}return e},ternary:function(){var e,t,n=this.logicalOR();return this.expect("?")&&(e=this.expression(),this.consume(":"))?(t=this.expression(),{type:Oi.ConditionalExpression,test:n,alternate:e,consequent:t}):n},logicalOR:function(){for(var e=this.logicalAND();this.expect("||");)e={type:Oi.LogicalExpression,operator:"||",left:e,right:this.logicalAND()};return e},logicalAND:function(){for(var e=this.equality();this.expect("&&");)e={type:Oi.LogicalExpression,operator:"&&",left:e,right:this.equality()};return e},equality:function(){for(var e,t=this.relational();e=this.expect("==","!=","===","!==");)t={type:Oi.BinaryExpression,operator:e.text,left:t,right:this.relational()};return t},relational:function(){for(var e,t=this.additive();e=this.expect("<",">","<=",">=");)t={type:Oi.BinaryExpression,operator:e.text,left:t,right:this.additive()};return t},additive:function(){for(var e,t=this.multiplicative();e=this.expect("+","-");)t={type:Oi.BinaryExpression,operator:e.text,left:t,right:this.multiplicative()};return t},multiplicative:function(){for(var e,t=this.unary();e=this.expect("*","/","%");)t={type:Oi.BinaryExpression,operator:e.text,left:t,right:this.unary()};return t},unary:function(){var e;return(e=this.expect("+","-","!"))?{type:Oi.UnaryExpression,operator:e.text,prefix:!0,argument:this.unary()}:this.primary()},primary:function(){var e,t;for(this.expect("(")?(e=this.filterChain(),this.consume(")")):this.expect("[")?e=this.arrayDeclaration():this.expect("{")?e=this.object():this.selfReferential.hasOwnProperty(this.peek().text)?e=P(this.selfReferential[this.consume().text]):this.options.literals.hasOwnProperty(this.peek().text)?e={type:Oi.Literal,value:this.options.literals[this.consume().text]}:this.peek().identifier?e=this.identifier():this.peek().constant?e=this.constant():this.throwError("not a primary expression",this.peek());t=this.expect("(","[",".");)"("===t.text?(e={type:Oi.CallExpression,callee:e,arguments:this.parseArguments()},this.consume(")")):"["===t.text?(e={type:Oi.MemberExpression,object:e,property:this.expression(),computed:!0},this.consume("]")):"."===t.text?e={type:Oi.MemberExpression,object:e,property:this.identifier(),computed:!1}:this.throwError("IMPOSSIBLE");return e},filter:function(e){e=[e];for(var t={type:Oi.CallExpression,callee:this.identifier(),arguments:e,filter:!0};this.expect(":");)e.push(this.expression());return t},parseArguments:function(){var e=[];if(")"!==this.peekToken().text)do{e.push(this.filterChain())}while(this.expect(","));return e},identifier:function(){var e=this.consume();return e.identifier||this.throwError("is not a valid identifier",e),{type:Oi.Identifier,name:e.text}},constant:function(){return{type:Oi.Literal,value:this.consume().value}},arrayDeclaration:function(){var e=[];if("]"!==this.peekToken().text)do{if(this.peek("]"))break;e.push(this.expression())}while(this.expect(","));return this.consume("]"),{type:Oi.ArrayExpression,elements:e}},object:function(){var e,t=[];if("}"!==this.peekToken().text)do{if(this.peek("}"))break;e={type:Oi.Property,kind:"init"},this.peek().constant?(e.key=this.constant(),e.computed=!1,this.consume(":"),e.value=this.expression()):this.peek().identifier?(e.key=this.identifier(),e.computed=!1,this.peek(":")?(this.consume(":"),e.value=this.expression()):e.value=e.key):this.peek("[")?(this.consume("["),e.key=this.expression(),this.consume("]"),e.computed=!0,this.consume(":"),e.value=this.expression()):this.throwError("invalid key",this.peek()),t.push(e)}while(this.expect(","));return this.consume("}"),{type:Oi.ObjectExpression,properties:t}},throwError:function(e,t){throw Ei("syntax",t.text,e,t.index+1,this.text,this.text.substring(t.index))},consume:function(e){if(0===this.tokens.length)throw Ei("ueoe",this.text);var t=this.expect(e);return t||this.throwError("is unexpected, expecting ["+e+"]",this.peek()),t},peekToken:function(){if(0===this.tokens.length)throw Ei("ueoe",this.text);return this.tokens[0]},peek:function(e,t,n,r){return this.peekAhead(0,e,t,n,r)},peekAhead:function(e,t,n,r,i){if(this.tokens.length>e){var o=(e=this.tokens[e]).text;if(o===t||o===n||o===r||o===i||!(t||n||r||i))return e}return!1},expect:function(e,t,n,r){return!!(e=this.peek(e,t,n,r))&&(this.tokens.shift(),e)},selfReferential:{this:{type:Oi.ThisExpression},$locals:{type:Oi.LocalsExpression}}};var Mi=2;Pt.prototype={compile:function(e){var t=this;this.state={nextId:0,filters:{},fn:{vars:[],body:[],own:{}},assign:{vars:[],body:[],own:{}},inputs:[]},Mt(e,t.$filter);var n,r="";return this.stage="assign",(n=It(e))&&(this.state.computing="assign",r=this.nextId(),this.recurse(n,r),this.return_(r),r="fn.assign="+this.generateFunction("assign","s,v,l")),n=Nt(e.body),t.stage="inputs",o(n,function(e,n){var r="fn"+n;t.state[r]={vars:[],body:[],own:{}},t.state.computing=r;var i=t.nextId();t.recurse(e,i),t.return_(i),t.state.inputs.push({name:r,isPure:e.isPure}),e.watchId=n}),this.state.computing="fn",this.stage="main",this.recurse(e),e='"'+this.USE+" "+this.STRICT+'";\n'+this.filterPrefix()+"var fn="+this.generateFunction("fn","s,l,a,i")+r+this.watchFns()+"return fn;",e=new Function("$filter","getStringValue","ifDefined","plus",e)(this.$filter,At,Tt,Ot),this.state=this.stage=void 0,e},USE:"use",STRICT:"strict",watchFns:function(){var e=[],t=this.state.inputs,n=this;return o(t,function(t){e.push("var "+t.name+"="+n.generateFunction(t.name,"s")),t.isPure&&e.push(t.name,".isPure="+JSON.stringify(t.isPure)+";")}),t.length&&e.push("fn.inputs=["+t.map(function(e){return e.name}).join(",")+"];"),e.join("")},generateFunction:function(e,t){return"function("+t+"){"+this.varsPrefix(e)+this.body(e)+"};"},filterPrefix:function(){var e=[],t=this;return o(this.state.filters,function(n,r){e.push(n+"=$filter("+t.escape(r)+")")}),e.length?"var "+e.join(",")+";":""},varsPrefix:function(e){return this.state[e].vars.length?"var "+this.state[e].vars.join(",")+";":""},body:function(e){return this.state[e].body.join("")},recurse:function(e,t,n,r,i,a){var s,c,u,l,f,p=this;if(r=r||d,!a&&v(e.watchId))t=t||this.nextId(),this.if_("i",this.lazyAssign(t,this.computedMember("i",e.watchId)),this.lazyRecurse(e,t,n,r,i,!0));else switch(e.type){case Oi.Program:o(e.body,function(t,n){p.recurse(t.expression,void 0,void 0,function(e){c=e}),n!==e.body.length-1?p.current().body.push(c,";"):p.return_(c)});break;case Oi.Literal:l=this.escape(e.value),this.assign(t,l),r(t||l);break;case Oi.UnaryExpression:this.recurse(e.argument,void 0,void 0,function(e){c=e}),l=e.operator+"("+this.ifDefined(c,0)+")",this.assign(t,l),r(l);break;case Oi.BinaryExpression:this.recurse(e.left,void 0,void 0,function(e){s=e}),this.recurse(e.right,void 0,void 0,function(e){c=e}),l="+"===e.operator?this.plus(s,c):"-"===e.operator?this.ifDefined(s,0)+e.operator+this.ifDefined(c,0):"("+s+")"+e.operator+"("+c+")",this.assign(t,l),r(l);break;case Oi.LogicalExpression:t=t||this.nextId(),p.recurse(e.left,t),p.if_("&&"===e.operator?t:p.not(t),p.lazyRecurse(e.right,t)),r(t);break;case Oi.ConditionalExpression:t=t||this.nextId(),p.recurse(e.test,t),p.if_(t,p.lazyRecurse(e.alternate,t),p.lazyRecurse(e.consequent,t)),r(t);break;case Oi.Identifier:t=t||this.nextId(),n&&(n.context="inputs"===p.stage?"s":this.assign(this.nextId(),this.getHasOwnProperty("l",e.name)+"?l:s"),n.computed=!1,n.name=e.name),p.if_("inputs"===p.stage||p.not(p.getHasOwnProperty("l",e.name)),function(){p.if_("inputs"===p.stage||"s",function(){i&&1!==i&&p.if_(p.isNull(p.nonComputedMember("s",e.name)),p.lazyAssign(p.nonComputedMember("s",e.name),"{}")),p.assign(t,p.nonComputedMember("s",e.name))})},t&&p.lazyAssign(t,p.nonComputedMember("l",e.name))),r(t);break;case Oi.MemberExpression:s=n&&(n.context=this.nextId())||this.nextId(),t=t||this.nextId(),p.recurse(e.object,s,void 0,function(){p.if_(p.notNull(s),function(){e.computed?(c=p.nextId(),p.recurse(e.property,c),p.getStringValue(c),i&&1!==i&&p.if_(p.not(p.computedMember(s,c)),p.lazyAssign(p.computedMember(s,c),"{}")),l=p.computedMember(s,c),p.assign(t,l),n&&(n.computed=!0,n.name=c)):(i&&1!==i&&p.if_(p.isNull(p.nonComputedMember(s,e.property.name)),p.lazyAssign(p.nonComputedMember(s,e.property.name),"{}")),l=p.nonComputedMember(s,e.property.name),p.assign(t,l),n&&(n.computed=!1,n.name=e.property.name))},function(){p.assign(t,"undefined")}),r(t)},!!i);break;case Oi.CallExpression:t=t||this.nextId(),e.filter?(c=p.filter(e.callee.name),u=[],o(e.arguments,function(e){var t=p.nextId();p.recurse(e,t),u.push(t)}),l=c+"("+u.join(",")+")",p.assign(t,l),r(t)):(c=p.nextId(),s={},u=[],p.recurse(e.callee,c,s,function(){p.if_(p.notNull(c),function(){o(e.arguments,function(t){p.recurse(t,e.constant?void 0:p.nextId(),void 0,function(e){u.push(e)})}),l=s.name?p.member(s.context,s.name,s.computed)+"("+u.join(",")+")":c+"("+u.join(",")+")",p.assign(t,l)},function(){p.assign(t,"undefined")}),r(t)}));break;case Oi.AssignmentExpression:c=this.nextId(),s={},this.recurse(e.left,void 0,s,function(){p.if_(p.notNull(s.context),function(){p.recurse(e.right,c),l=p.member(s.context,s.name,s.computed)+e.operator+c,p.assign(t,l),r(t||l)})},1);break;case Oi.ArrayExpression:u=[],o(e.elements,function(t){p.recurse(t,e.constant?void 0:p.nextId(),void 0,function(e){u.push(e)})}),l="["+u.join(",")+"]",this.assign(t,l),r(t||l);break;case Oi.ObjectExpression:u=[],f=!1,o(e.properties,function(e){e.computed&&(f=!0)}),f?(t=t||this.nextId(),this.assign(t,"{}"),o(e.properties,function(e){e.computed?(s=p.nextId(),p.recurse(e.key,s)):s=e.key.type===Oi.Identifier?e.key.name:""+e.key.value,c=p.nextId(),p.recurse(e.value,c),p.assign(p.member(t,s,e.computed),c)})):(o(e.properties,function(t){p.recurse(t.value,e.constant?void 0:p.nextId(),void 0,function(e){u.push(p.escape(t.key.type===Oi.Identifier?t.key.name:""+t.key.value)+":"+e)})}),l="{"+u.join(",")+"}",this.assign(t,l)),r(t||l);break;case Oi.ThisExpression:this.assign(t,"s"),r(t||"s");break;case Oi.LocalsExpression:this.assign(t,"l"),r(t||"l");break;case Oi.NGValueParameter:this.assign(t,"v"),r(t||"v")}},getHasOwnProperty:function(e,t){var n=e+"."+t,r=this.current().own;return r.hasOwnProperty(n)||(r[n]=this.nextId(!1,e+"&&("+this.escape(t)+" in "+e+")")),r[n]},assign:function(e,t){if(e)return this.current().body.push(e,"=",t,";"),e},filter:function(e){return this.state.filters.hasOwnProperty(e)||(this.state.filters[e]=this.nextId(!0)),this.state.filters[e]},ifDefined:function(e,t){return"ifDefined("+e+","+this.escape(t)+")"},plus:function(e,t){return"plus("+e+","+t+")"},return_:function(e){this.current().body.push("return ",e,";")},if_:function(e,t,n){if(!0===e)t();else{var r=this.current().body;r.push("if(",e,"){"),t(),r.push("}"),n&&(r.push("else{"),n(),r.push("}"))}},not:function(e){return"!("+e+")"},isNull:function(e){return e+"==null"},notNull:function(e){return e+"!=null"},nonComputedMember:function(e,t){return/^[$_a-zA-Z][$_a-zA-Z0-9]*$/.test(t)?e+"."+t:e+'["'+t.replace(/[^$_a-zA-Z0-9]/g,this.stringEscapeFn)+'"]'},computedMember:function(e,t){return e+"["+t+"]"},member:function(e,t,n){return n?this.computedMember(e,t):this.nonComputedMember(e,t)},getStringValue:function(e){this.assign(e,"getStringValue("+e+")")},lazyRecurse:function(e,t,n,r,i,o){var a=this;return function(){a.recurse(e,t,n,r,i,o)}},lazyAssign:function(e,t){var n=this;return function(){n.assign(e,t)}},stringEscapeRegex:/[^ a-zA-Z0-9]/g,stringEscapeFn:function(e){return"\\u"+("0000"+e.charCodeAt(0).toString(16)).slice(-4)},escape:function(e){if(x(e))return"'"+e.replace(this.stringEscapeRegex,this.stringEscapeFn)+"'";if(w(e))return e.toString();if(!0===e)return"true";if(!1===e)return"false";if(null===e)return"null";if(void 0===e)return"undefined";throw Ei("esc")},nextId:function(e,t){var n="v"+this.state.nextId++;return e||this.current().vars.push(n+(t?"="+t:"")),n},current:function(){return this.state[this.state.computing]}},Lt.prototype={compile:function(e){var t,n,r,i=this;Mt(e,i.$filter),(t=It(e))&&(n=this.recurse(t)),(t=Nt(e.body))&&(r=[],o(t,function(e,t){var n=i.recurse(e);n.isPure=e.isPure,e.input=n,r.push(n),e.watchId=t}));var a=[];return o(e.body,function(e){a.push(i.recurse(e.expression))}),e=0===e.body.length?d:1===e.body.length?a[0]:function(e,t){var n;return o(a,function(r){n=r(e,t)}),n},n&&(e.assign=function(e,t,r){return n(e,r,t)}),r&&(e.inputs=r),e},recurse:function(e,t,n){var r,i,a,s=this;if(e.input)return this.inputs(e.input,e.watchId);switch(e.type){case Oi.Literal:return this.value(e.value,t);case Oi.UnaryExpression:return i=this.recurse(e.argument),this["unary"+e.operator](i,t);case Oi.BinaryExpression:case Oi.LogicalExpression:return r=this.recurse(e.left),i=this.recurse(e.right),this["binary"+e.operator](r,i,t);case Oi.ConditionalExpression:return this["ternary?:"](this.recurse(e.test),this.recurse(e.alternate),this.recurse(e.consequent),t);case Oi.Identifier:return s.identifier(e.name,t,n);case Oi.MemberExpression:return r=this.recurse(e.object,!1,!!n),e.computed||(i=e.property.name),e.computed&&(i=this.recurse(e.property)),e.computed?this.computedMember(r,i,t,n):this.nonComputedMember(r,i,t,n);case Oi.CallExpression:return a=[],o(e.arguments,function(e){a.push(s.recurse(e))}),e.filter&&(i=this.$filter(e.callee.name)),e.filter||(i=this.recurse(e.callee,!0)),e.filter?function(e,n,r,o){for(var s=[],c=0;c<a.length;++c)s.push(a[c](e,n,r,o));return e=i.apply(void 0,s,o),t?{context:void 0,name:void 0,value:e}:e}:function(e,n,r,o){var s,c=i(e,n,r,o);if(null!=c.value){s=[];for(var u=0;u<a.length;++u)s.push(a[u](e,n,r,o));s=c.value.apply(c.context,s)}return t?{value:s}:s};case Oi.AssignmentExpression:return r=this.recurse(e.left,!0,1),i=this.recurse(e.right),function(e,n,o,a){var s=r(e,n,o,a);return e=i(e,n,o,a),s.context[s.name]=e,t?{value:e}:e};case Oi.ArrayExpression:return a=[],o(e.elements,function(e){a.push(s.recurse(e))}),function(e,n,r,i){for(var o=[],s=0;s<a.length;++s)o.push(a[s](e,n,r,i));return t?{value:o}:o};case Oi.ObjectExpression:return a=[],o(e.properties,function(e){e.computed?a.push({key:s.recurse(e.key),computed:!0,value:s.recurse(e.value)}):a.push({key:e.key.type===Oi.Identifier?e.key.name:""+e.key.value,computed:!1,value:s.recurse(e.value)})}),function(e,n,r,i){for(var o={},s=0;s<a.length;++s)a[s].computed?o[a[s].key(e,n,r,i)]=a[s].value(e,n,r,i):o[a[s].key]=a[s].value(e,n,r,i);return t?{value:o}:o};case Oi.ThisExpression:return function(e){return t?{value:e}:e};case Oi.LocalsExpression:return function(e,n){return t?{value:n}:n};case Oi.NGValueParameter:return function(e,n,r){return t?{value:r}:r}}},"unary+":function(e,t){return function(n,r,i,o){return n=v(n=e(n,r,i,o))?+n:0,t?{value:n}:n}},"unary-":function(e,t){return function(n,r,i,o){return n=v(n=e(n,r,i,o))?-n:-0,t?{value:n}:n}},"unary!":function(e,t){return function(n,r,i,o){return n=!e(n,r,i,o),t?{value:n}:n}},"binary+":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a);return s=Ot(s,r=t(r,i,o,a)),n?{value:s}:s}},"binary-":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a);return r=t(r,i,o,a),s=(v(s)?s:0)-(v(r)?r:0),n?{value:s}:s}},"binary*":function(e,t,n){return function(r,i,o,a){return r=e(r,i,o,a)*t(r,i,o,a),n?{value:r}:r}},"binary/":function(e,t,n){return function(r,i,o,a){return r=e(r,i,o,a)/t(r,i,o,a),n?{value:r}:r}},"binary%":function(e,t,n){return function(r,i,o,a){return r=e(r,i,o,a)%t(r,i,o,a),n?{value:r}:r}},"binary===":function(e,t,n){return function(r,i,o,a){return r=e(r,i,o,a)===t(r,i,o,a),n?{value:r}:r}},"binary!==":function(e,t,n){return function(r,i,o,a){return r=e(r,i,o,a)!==t(r,i,o,a),n?{value:r}:r}},"binary==":function(e,t,n){return function(r,i,o,a){return r=e(r,i,o,a)==t(r,i,o,a),n?{value:r}:r}},"binary!=":function(e,t,n){return function(r,i,o,a){return r=e(r,i,o,a)!=t(r,i,o,a),n?{value:r}:r}},"binary<":function(e,t,n){return function(r,i,o,a){return r=e(r,i,o,a)<t(r,i,o,a),n?{value:r}:r}},"binary>":function(e,t,n){return function(r,i,o,a){return r=e(r,i,o,a)>t(r,i,o,a),n?{value:r}:r}},"binary<=":function(e,t,n){return function(r,i,o,a){return r=e(r,i,o,a)<=t(r,i,o,a),n?{value:r}:r}},"binary>=":function(e,t,n){return function(r,i,o,a){return r=e(r,i,o,a)>=t(r,i,o,a),n?{value:r}:r}},"binary&&":function(e,t,n){return function(r,i,o,a){return r=e(r,i,o,a)&&t(r,i,o,a),n?{value:r}:r}},"binary||":function(e,t,n){return function(r,i,o,a){return r=e(r,i,o,a)||t(r,i,o,a),n?{value:r}:r}},"ternary?:":function(e,t,n,r){return function(i,o,a,s){return i=e(i,o,a,s)?t(i,o,a,s):n(i,o,a,s),r?{value:i}:i}},value:function(e,t){return function(){return t?{context:void 0,name:void 0,value:e}:e}},identifier:function(e,t,n){return function(r,i,o,a){return r=i&&e in i?i:r,n&&1!==n&&r&&null==r[e]&&(r[e]={}),i=r?r[e]:void 0,t?{context:r,name:e,value:i}:i}},computedMember:function(e,t,n,r){return function(i,o,a,s){var c,u,l=e(i,o,a,s);return null!=l&&(c=t(i,o,a,s),c+="",r&&1!==r&&l&&!l[c]&&(l[c]={}),u=l[c]),n?{context:l,name:c,value:u}:u}},nonComputedMember:function(e,t,n,r){return function(i,o,a,s){return i=e(i,o,a,s),r&&1!==r&&i&&null==i[t]&&(i[t]={}),o=null!=i?i[t]:void 0,n?{context:i,name:t,value:o}:o}},inputs:function(e,t){return function(n,r,i,o){return o?o[t]:e(n,r,i)}}},Rt.prototype={constructor:Rt,parse:function(e){e=this.getAst(e);var t=this.astCompiler.compile(e.ast),n=e.ast;return t.literal=0===n.body.length||1===n.body.length&&(n.body[0].expression.type===Oi.Literal||n.body[0].expression.type===Oi.ArrayExpression||n.body[0].expression.type===Oi.ObjectExpression),t.constant=e.ast.constant,t.oneTime=e.oneTime,t},getAst:function(e){var t=!1;return":"===(e=e.trim()).charAt(0)&&":"===e.charAt(1)&&(t=!0,e=e.substring(2)),{ast:this.ast.ast(e),oneTime:t}}};var Ni,Di=r("$sce"),Ii={HTML:"html",CSS:"css",MEDIA_URL:"mediaUrl",URL:"url",RESOURCE_URL:"resourceUrl",JS:"js"},Pi=/_([a-z])/g,Li=r("$templateRequest"),Ri=r("$timeout"),Vi=e.document.createElement("a"),ji=en(e.location.href);Vi.href="http://[::1]";var qi="[::1]"===Vi.hostname;rn.$inject=["$document"],an.$inject=["$provide"];var Fi=22,Ui=".",_i="0";ln.$inject=["$locale"],fn.$inject=["$locale"];var Hi={yyyy:hn("FullYear",4,0,!1,!0),yy:hn("FullYear",2,0,!0,!0),y:hn("FullYear",1,0,!1,!0),MMMM:$n("Month"),MMM:$n("Month",!0),MM:hn("Month",2,1),M:hn("Month",1,1),LLLL:$n("Month",!1,!0),dd:hn("Date",2),d:hn("Date",1),HH:hn("Hours",2),H:hn("Hours",1),hh:hn("Hours",2,-12),h:hn("Hours",1,-12),mm:hn("Minutes",2),m:hn("Minutes",1),ss:hn("Seconds",2),s:hn("Seconds",1),sss:hn("Milliseconds",3),EEEE:$n("Day"),EEE:$n("Day",!0),a:function(e,t){return 12>e.getHours()?t.AMPMS[0]:t.AMPMS[1]},Z:function(e,t,n){return(0<=(e=-1*n)?"+":"")+(dn(Math[0<e?"floor":"ceil"](e/60),2)+dn(Math.abs(e%60),2))},ww:mn(2),w:mn(1),G:vn,GG:vn,GGG:vn,GGGG:function(e,t){return 0>=e.getFullYear()?t.ERANAMES[0]:t.ERANAMES[1]}},Bi=/((?:[^yMLdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|m+|s+|a|Z|G+|w+))([\s\S]*)/,zi=/^-?\d+$/;yn.$inject=["$locale"];var Wi=$(er),Gi=$(tr);Cn.$inject=["$parse"];var Ki=$({restrict:"E",compile:function(e,t){if(!t.href&&!t.xlinkHref)return function(e,t){if("a"===t[0].nodeName.toLowerCase()){var n="[object SVGAnimatedString]"===or.call(t.prop("href"))?"xlink:href":"href";t.on("click",function(e){t.attr(n)||e.preventDefault()})}}}}),Yi={};o(jr,function(e,t){function n(e,n,i){e.$watch(i[r],function(e){i.$set(t,!!e)})}if("multiple"!==e){var r=Ke("ng-"+t),i=n;"checked"===e&&(i=function(e,t,i){i.ngModel!==i[r]&&n(e,0,i)}),Yi[r]=function(){return{restrict:"A",priority:100,link:i}}}}),o(Fr,function(e,t){Yi[t]=function(){return{priority:100,link:function(e,n,r){"ngPattern"===t&&"/"===r.ngPattern.charAt(0)&&(n=r.ngPattern.match(Zn))?r.$set("ngPattern",new RegExp(n[1],n[2])):e.$watch(r[t],function(e){r.$set(t,e)})}}}}),o(["src","srcset","href"],function(e){var t=Ke("ng-"+e);Yi[t]=["$sce",function(n){return{priority:99,link:function(r,i,o){var a=e,s=e;"href"===e&&"[object SVGAnimatedString]"===or.call(i.prop("href"))&&(s="xlinkHref",o.$attr[s]="xlink:href",a=null),o.$set(t,n.getTrustedMediaUrl(o[t])),o.$observe(t,function(t){t?(o.$set(s,t),Gn&&a&&i.prop(a,o[s])):"href"===e&&o.$set(s,null)})}}}]});var Ji={$addControl:d,$getControls:$([]),$$renameControl:function(e,t){e.$name=t},$removeControl:d,$setValidity:d,$setDirty:d,$setPristine:d,$setSubmitted:d,$$setSubmitted:d};Sn.$inject=["$element","$attrs","$scope","$animate","$interpolate"],Sn.prototype={$rollbackViewValue:function(){o(this.$$controls,function(e){e.$rollbackViewValue()})},$commitViewValue:function(){o(this.$$controls,function(e){e.$commitViewValue()})},$addControl:function(e){re(e.$name,"input"),this.$$controls.push(e),e.$name&&(this[e.$name]=e),e.$$parentForm=this},$getControls:function(){return se(this.$$controls)},$$renameControl:function(e,t){var n=e.$name;this[n]===e&&delete this[n],this[t]=e,e.$name=t},$removeControl:function(e){e.$name&&this[e.$name]===e&&delete this[e.$name],o(this.$pending,function(t,n){this.$setValidity(n,null,e)},this),o(this.$error,function(t,n){this.$setValidity(n,null,e)},this),o(this.$$success,function(t,n){this.$setValidity(n,null,e)},this),I(this.$$controls,e),e.$$parentForm=Ji},$setDirty:function(){this.$$animate.removeClass(this.$$element,Po),this.$$animate.addClass(this.$$element,Lo),this.$dirty=!0,this.$pristine=!1,this.$$parentForm.$setDirty()},$setPristine:function(){this.$$animate.setClass(this.$$element,Po,Lo+" ng-submitted"),this.$dirty=!1,this.$pristine=!0,this.$submitted=!1,o(this.$$controls,function(e){e.$setPristine()})},$setUntouched:function(){o(this.$$controls,function(e){e.$setUntouched()})},$setSubmitted:function(){for(var e=this;e.$$parentForm&&e.$$parentForm!==Ji;)e=e.$$parentForm;e.$$setSubmitted()},$$setSubmitted:function(){this.$$animate.addClass(this.$$element,"ng-submitted"),this.$submitted=!0,o(this.$$controls,function(e){e.$$setSubmitted&&e.$$setSubmitted()})}},An({clazz:Sn,set:function(e,t,n){var r=e[t];r?-1===r.indexOf(n)&&r.push(n):e[t]=[n]},unset:function(e,t,n){var r=e[t];r&&(I(r,n),0===r.length&&delete e[t])}});var Xi=function(e){return["$timeout","$parse",function(t,n){function r(e){return""===e?n('this[""]').assign:n(e).assign||d}return{name:"form",restrict:e?"EAC":"E",require:["form","^^?form"],controller:Sn,compile:function(n,i){n.addClass(Po).addClass(Do);var o=i.name?"name":!(!e||!i.ngForm)&&"ngForm";return{pre:function(e,n,i,a){var s=a[0];if(!("action"in i)){var c=function(t){e.$apply(function(){s.$commitViewValue(),s.$setSubmitted()}),t.preventDefault()};n[0].addEventListener("submit",c),n.on("$destroy",function(){t(function(){n[0].removeEventListener("submit",c)},0,!1)})}(a[1]||s.$$parentForm).$addControl(s);var l=o?r(s.$name):d;o&&(l(e,s),i.$observe(o,function(t){s.$name!==t&&(l(e,void 0),s.$$parentForm.$$renameControl(s,t),(l=r(s.$name))(e,s))})),n.on("$destroy",function(){s.$$parentForm.$removeControl(s),l(e,void 0),u(s,Ji)})}}}}}]},Zi=Xi(),Qi=Xi(!0),eo=/^\d{4,}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+(?:[+-][0-2]\d:[0-5]\d|Z)$/,to=/^[a-z][a-z\d.+-]*:\/*(?:[^:@]+(?::[^@]+)?@)?(?:[^\s:\/?#]+|\[[a-f\d:]+])(?::\d+)?(?:\/[^?#]*)?(?:\?[^#]*)?(?:#.*)?$/i,no=/^(?=.{1,254}$)(?=.{1,64}@)[-!#$%&'*+\/0-9=?A-Z^_`a-z{|}~]+(\.[-!#$%&'*+\/0-9=?A-Z^_`a-z{|}~]+)*@[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$/,ro=/^\s*(-|\+)?(\d+|(\d*(\.\d*)))([eE][+-]?\d+)?\s*$/,io=/^(\d{4,})-(\d{2})-(\d{2})$/,oo=/^(\d{4,})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,ao=/^(\d{4,})-W(\d\d)$/,so=/^(\d{4,})-(\d\d)$/,co=/^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,uo=oe();o(["date","datetime-local","month","time","week"],function(e){uo[e]=!0});var lo={text:function(e,t,n,r,i,o){Mn(0,t,n,r,i,o),On(r)},date:Dn("date",io,Nn(io,["yyyy","MM","dd"]),"yyyy-MM-dd"),"datetime-local":Dn("datetimelocal",oo,Nn(oo,"yyyy MM dd HH mm ss sss".split(" ")),"yyyy-MM-ddTHH:mm:ss.sss"),time:Dn("time",co,Nn(co,["HH","mm","ss","sss"]),"HH:mm:ss.sss"),week:Dn("week",ao,function(e,t){if(C(e))return e;if(x(e)){ao.lastIndex=0;var n=ao.exec(e);if(n){var r=+n[1],i=+n[2],o=n=0,a=0,s=0,c=gn(r);i=7*(i-1);return t&&(n=t.getHours(),o=t.getMinutes(),a=t.getSeconds(),s=t.getMilliseconds()),new Date(r,0,c.getDate()+i,n,o,a,s)}}return NaN},"yyyy-Www"),month:Dn("month",so,Nn(so,["yyyy","MM"]),"yyyy-MM"),number:function(e,t,n,r,i,o,a,s){var c;if(In(0,t,0,r,"number"),Pn(r),Mn(0,t,n,r,i,o),v(n.min)||n.ngMin){var u=n.min||s(n.ngMin)(e);c=Ln(u),r.$validators.min=function(e,t){return r.$isEmpty(t)||m(c)||t>=c},n.$observe("min",function(e){e!==u&&(c=Ln(e),u=e,r.$validate())})}if(v(n.max)||n.ngMax){var l=n.max||s(n.ngMax)(e),f=Ln(l);r.$validators.max=function(e,t){return r.$isEmpty(t)||m(f)||t<=f},n.$observe("max",function(e){e!==l&&(f=Ln(e),l=e,r.$validate())})}if(v(n.step)||n.ngStep){var p=n.step||s(n.ngStep)(e),d=Ln(p);r.$validators.step=function(e,t){return r.$isEmpty(t)||m(d)||Vn(t,c||0,d)},n.$observe("step",function(e){e!==p&&(d=Ln(e),p=e,r.$validate())})}},url:function(e,t,n,r,i,o){Mn(0,t,n,r,i,o),On(r),r.$validators.url=function(e,t){var n=e||t;return r.$isEmpty(n)||to.test(n)}},email:function(e,t,n,r,i,o){Mn(0,t,n,r,i,o),On(r),r.$validators.email=function(e,t){var n=e||t;return r.$isEmpty(n)||no.test(n)}},radio:function(e,t,n,r){var i=!n.ngTrim||"false"!==hr(n.ngTrim);m(n.name)&&t.attr("name",++ur),t.on("change",function(e){var o;t[0].checked&&(o=n.value,i&&(o=hr(o)),r.$setViewValue(o,e&&e.type))}),r.$render=function(){var e=n.value;i&&(e=hr(e)),t[0].checked=e===r.$viewValue},n.$observe("value",r.$render)},range:function(e,t,n,r,i,o){function a(e,r){t.attr(e,n[e]);var i=n[e];n.$observe(e,function(e){e!==i&&(i=e,r(e))})}In(0,t,0,r,"range"),Pn(r),Mn(0,t,n,r,i,o);var s=r.$$hasNativeValidators&&"range"===t[0].type,c=s?0:void 0,u=s?100:void 0,l=s?1:void 0,f=t[0].validity;e=v(n.min),i=v(n.max),o=v(n.step);var p=r.$render;r.$render=s&&v(f.rangeUnderflow)&&v(f.rangeOverflow)?function(){p(),r.$setViewValue(t.val())}:p,e&&(c=Ln(n.min),r.$validators.min=s?function(){return!0}:function(e,t){return r.$isEmpty(t)||m(c)||t>=c},a("min",function(e){c=Ln(e),lr(r.$modelValue)||(s?(e=t.val(),c>e&&(e=c,t.val(e)),r.$setViewValue(e)):r.$validate())})),i&&(u=Ln(n.max),r.$validators.max=s?function(){return!0}:function(e,t){return r.$isEmpty(t)||m(u)||t<=u},a("max",function(e){u=Ln(e),lr(r.$modelValue)||(s?(e=t.val(),u<e&&(t.val(u),e=u<c?c:u),r.$setViewValue(e)):r.$validate())})),o&&(l=Ln(n.step),r.$validators.step=s?function(){return!f.stepMismatch}:function(e,t){return r.$isEmpty(t)||m(l)||Vn(t,c||0,l)},a("step",function(e){l=Ln(e),lr(r.$modelValue)||(s?r.$viewValue!==t.val()&&r.$setViewValue(t.val()):r.$validate())}))},checkbox:function(e,t,n,r,i,o,a,s){var c=jn(s,e,"ngTrueValue",n.ngTrueValue,!0),u=jn(s,e,"ngFalseValue",n.ngFalseValue,!1);t.on("change",function(e){r.$setViewValue(t[0].checked,e&&e.type)}),r.$render=function(){t[0].checked=r.$viewValue},r.$isEmpty=function(e){return!1===e},r.$formatters.push(function(e){return R(e,c)}),r.$parsers.push(function(e){return e?c:u})},hidden:d,button:d,submit:d,reset:d,file:d},fo=["$browser","$sniffer","$filter","$parse",function(e,t,n,r){return{restrict:"E",require:["?ngModel"],link:{pre:function(i,o,a,s){s[0]&&(lo[er(a.type)]||lo.text)(i,o,a,s[0],t,e,n,r)}}}}],po=function(){var e={configurable:!0,enumerable:!1,get:function(){return this.getAttribute("value")||""},set:function(e){this.setAttribute("value",e)}};return{restrict:"E",priority:200,compile:function(t,n){if("hidden"===er(n.type))return{pre:function(t,n,r,i){(t=n[0]).parentNode&&t.parentNode.insertBefore(t,t.nextSibling),Object.defineProperty&&Object.defineProperty(t,"value",e)}}}}},ho=/^(true|false|\d+)$/,$o=function(){function e(e,t,n){var r=v(n)?n:9===Gn?"":null;e.prop("value",r),t.$set("value",n)}return{restrict:"A",priority:100,compile:function(t,n){return ho.test(n.ngValue)?function(t,n,r){e(n,r,t=t.$eval(r.ngValue))}:function(t,n,r){t.$watch(r.ngValue,function(t){e(n,r,t)})}}}},go=["$compile",function(e){return{restrict:"AC",compile:function(t){return e.$$addBindingClass(t),function(t,n,r){e.$$addBindingInfo(n,r.ngBind),n=n[0],t.$watch(r.ngBind,function(e){n.textContent=ae(e)})}}}}],mo=["$interpolate","$compile",function(e,t){return{compile:function(n){return t.$$addBindingClass(n),function(n,r,i){n=e(r.attr(i.$attr.ngBindTemplate)),t.$$addBindingInfo(r,n.expressions),r=r[0],i.$observe("ngBindTemplate",function(e){r.textContent=m(e)?"":e})}}}}],vo=["$sce","$parse","$compile",function(e,t,n){return{restrict:"A",compile:function(r,i){var o=t(i.ngBindHtml),a=t(i.ngBindHtml,function(t){return e.valueOf(t)});return n.$$addBindingClass(r),function(t,r,i){n.$$addBindingInfo(r,i.ngBindHtml),t.$watch(a,function(){var n=o(t);r.html(e.getTrustedHtml(n)||"")})}}}}],yo=$({restrict:"A",require:"ngModel",link:function(e,t,n,r){r.$viewChangeListeners.push(function(){e.$eval(n.ngChange)})}}),bo=qn("",!0),xo=qn("Odd",0),wo=qn("Even",1),Co=En({compile:function(e,t){t.$set("ngCloak",void 0),e.removeClass("ng-cloak")}}),Eo=[function(){return{restrict:"A",scope:!0,controller:"@",priority:500}}],So={},ko={blur:!0,focus:!0};o("click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste".split(" "),function(e){var t=Ke("ng-"+e);So[t]=["$parse","$rootScope","$exceptionHandler",function(n,r,i){return Fn(n,r,i,t,e,ko[e])}]});var Ao=["$animate","$compile",function(e,t){return{multiElement:!0,transclude:"element",priority:600,terminal:!0,restrict:"A",$$tlb:!0,link:function(n,r,i,o,a){var s,c,u;n.$watch(i.ngIf,function(n){n?c||a(function(n,o){c=o,n[n.length++]=t.$$createComment("end ngIf",i.ngIf),s={clone:n},e.enter(n,r.parent(),r)}):(u&&(u.remove(),u=null),c&&(c.$destroy(),c=null),s&&(u=ie(s.clone),e.leave(u).done(function(e){!1!==e&&(u=null)}),s=null))})}}}],To=["$templateRequest","$anchorScroll","$animate",function(e,t,n){return{restrict:"ECA",priority:400,terminal:!0,transclude:"element",controller:cr.noop,compile:function(r,i){var o=i.ngInclude||i.src,a=i.onload||"",s=i.autoscroll;return function(r,i,c,u,l){var f,p,d,h=0,$=function(){p&&(p.remove(),p=null),f&&(f.$destroy(),f=null),d&&(n.leave(d).done(function(e){!1!==e&&(p=null)}),p=d,d=null)};r.$watch(o,function(o){var c=function(e){!1===e||!v(s)||s&&!r.$eval(s)||t()},p=++h;o?(e(o,!0).then(function(e){if(!r.$$destroyed&&p===h){var t=r.$new();u.template=e,e=l(t,function(e){$(),n.enter(e,null,i).done(c)}),d=e,(f=t).$emit("$includeContentLoaded",o),r.$eval(a)}},function(){r.$$destroyed||p!==h||($(),r.$emit("$includeContentError",o))}),r.$emit("$includeContentRequested",o)):($(),u.template=null)})}}}}],Oo=["$compile",function(t){return{restrict:"ECA",priority:-400,require:"ngInclude",link:function(n,r,i,o){or.call(r[0]).match(/SVG/)?(r.empty(),t(pe(o.template,e.document).childNodes)(n,function(e){r.append(e)},{futureParentElement:r})):(r.html(o.template),t(r.contents())(n))}}}],Mo=En({priority:450,compile:function(){return{pre:function(e,t,n){e.$eval(n.ngInit)}}}}),No=function(){return{restrict:"A",priority:100,require:"ngModel",link:function(e,t,n,r){var i=n.ngList||", ",a="false"!==n.ngTrim,s=a?hr(i):i;r.$parsers.push(function(e){if(!m(e)){var t=[];return e&&o(e.split(s),function(e){e&&t.push(a?hr(e):e)}),t}}),r.$formatters.push(function(e){if(E(e))return e.join(i)}),r.$isEmpty=function(e){return!e||!e.length}}}},Do="ng-valid",Io="ng-invalid",Po="ng-pristine",Lo="ng-dirty",Ro=r("ngModel");Un.$inject="$scope $exceptionHandler $attrs $element $parse $animate $timeout $q $interpolate".split(" "),Un.prototype={$$initGetterSetters:function(){if(this.$options.getOption("getterSetter")){var e=this.$$parse(this.$$attr.ngModel+"()"),t=this.$$parse(this.$$attr.ngModel+"($$$p)");this.$$ngModelGet=function(t){var n=this.$$parsedNgModel(t);return k(n)&&(n=e(t)),n},this.$$ngModelSet=function(e,n){k(this.$$parsedNgModel(e))?t(e,{$$$p:n}):this.$$parsedNgModelAssign(e,n)}}else if(!this.$$parsedNgModel.assign)throw Ro("nonassign",this.$$attr.ngModel,z(this.$$element))},$render:d,$isEmpty:function(e){return m(e)||""===e||null===e||e!=e},$$updateEmptyClasses:function(e){this.$isEmpty(e)?(this.$$animate.removeClass(this.$$element,"ng-not-empty"),this.$$animate.addClass(this.$$element,"ng-empty")):(this.$$animate.removeClass(this.$$element,"ng-empty"),this.$$animate.addClass(this.$$element,"ng-not-empty"))},$setPristine:function(){this.$dirty=!1,this.$pristine=!0,this.$$animate.removeClass(this.$$element,Lo),this.$$animate.addClass(this.$$element,Po)},$setDirty:function(){this.$dirty=!0,this.$pristine=!1,this.$$animate.removeClass(this.$$element,Po),this.$$animate.addClass(this.$$element,Lo),this.$$parentForm.$setDirty()},$setUntouched:function(){this.$touched=!1,this.$untouched=!0,this.$$animate.setClass(this.$$element,"ng-untouched","ng-touched")},$setTouched:function(){this.$touched=!0,this.$untouched=!1,this.$$animate.setClass(this.$$element,"ng-touched","ng-untouched")},$rollbackViewValue:function(){this.$$timeout.cancel(this.$$pendingDebounce),this.$viewValue=this.$$lastCommittedViewValue,this.$render()},$validate:function(){if(!lr(this.$modelValue)){var e=this.$$lastCommittedViewValue,t=this.$$rawModelValue,n=this.$valid,r=this.$modelValue,i=this.$options.getOption("allowInvalid"),o=this;this.$$runValidators(t,e,function(e){i||n===e||(o.$modelValue=e?t:void 0,o.$modelValue!==r&&o.$$writeModelToScope())})}},$$runValidators:function(e,t,n){function r(e,t){a===s.$$currentValidationRunId&&s.$setValidity(e,t)}function i(e){a===s.$$currentValidationRunId&&n(e)}this.$$currentValidationRunId++;var a=this.$$currentValidationRunId,s=this;!function(){var e=s.$$parserName;return m(s.$$parserValid)?(r(e,null),!0):(s.$$parserValid||(o(s.$validators,function(e,t){r(t,null)}),o(s.$asyncValidators,function(e,t){r(t,null)})),r(e,s.$$parserValid),s.$$parserValid)}()?i(!1):function(){var n=!0;return o(s.$validators,function(i,o){var a=Boolean(i(e,t));n=n&&a,r(o,a)}),!!n||(o(s.$asyncValidators,function(e,t){r(t,null)}),!1)}()?function(){var n=[],a=!0;o(s.$asyncValidators,function(i,o){var s=i(e,t);if(!s||!k(s.then))throw Ro("nopromise",s);r(o,void 0),n.push(s.then(function(){r(o,!0)},function(){a=!1,r(o,!1)}))}),n.length?s.$$q.all(n).then(function(){i(a)},d):i(!0)}():i(!1)},$commitViewValue:function(){var e=this.$viewValue;this.$$timeout.cancel(this.$$pendingDebounce),(this.$$lastCommittedViewValue!==e||""===e&&this.$$hasNativeValidators)&&(this.$$updateEmptyClasses(e),this.$$lastCommittedViewValue=e,this.$pristine&&this.$setDirty(),this.$$parseAndValidate())},$$parseAndValidate:function(){var e=this.$$lastCommittedViewValue,t=this;if(this.$$parserValid=!m(e)||void 0,this.$setValidity(this.$$parserName,null),this.$$parserName="parse",this.$$parserValid)for(var n=0;n<this.$parsers.length;n++)if(m(e=this.$parsers[n](e))){this.$$parserValid=!1;break}lr(this.$modelValue)&&(this.$modelValue=this.$$ngModelGet(this.$$scope));var r=this.$modelValue,i=this.$options.getOption("allowInvalid");this.$$rawModelValue=e,i&&(this.$modelValue=e,t.$modelValue!==r&&t.$$writeModelToScope()),this.$$runValidators(e,this.$$lastCommittedViewValue,function(n){i||(t.$modelValue=n?e:void 0,t.$modelValue!==r&&t.$$writeModelToScope())})},$$writeModelToScope:function(){this.$$ngModelSet(this.$$scope,this.$modelValue),o(this.$viewChangeListeners,function(e){try{e()}catch(e){this.$$exceptionHandler(e)}},this)},$setViewValue:function(e,t){this.$viewValue=e,this.$options.getOption("updateOnDefault")&&this.$$debounceViewValueCommit(t)},$$debounceViewValueCommit:function(e){var t=this.$options.getOption("debounce");w(t[e])?t=t[e]:w(t.default)&&-1===this.$options.getOption("updateOn").indexOf(e)?t=t.default:w(t["*"])&&(t=t["*"]),this.$$timeout.cancel(this.$$pendingDebounce);var n=this;0<t?this.$$pendingDebounce=this.$$timeout(function(){n.$commitViewValue()},t):this.$$rootScope.$$phase?this.$commitViewValue():this.$$scope.$apply(function(){n.$commitViewValue()})},$overrideModelOptions:function(e){this.$options=this.$options.createChild(e),this.$$setUpdateOnEvents()},$processModelValue:function(){var e=this.$$format();this.$viewValue!==e&&(this.$$updateEmptyClasses(e),this.$viewValue=this.$$lastCommittedViewValue=e,this.$render(),this.$$runValidators(this.$modelValue,this.$viewValue,d))},$$format:function(){for(var e=this.$formatters,t=e.length,n=this.$modelValue;t--;)n=e[t](n);return n},$$setModelValue:function(e){this.$modelValue=this.$$rawModelValue=e,this.$$parserValid=void 0,this.$processModelValue()},$$setUpdateOnEvents:function(){this.$$updateEvents&&this.$$element.off(this.$$updateEvents,this.$$updateEventHandler),(this.$$updateEvents=this.$options.getOption("updateOn"))&&this.$$element.on(this.$$updateEvents,this.$$updateEventHandler)},$$updateEventHandler:function(e){this.$$debounceViewValueCommit(e&&e.type)}},An({clazz:Un,set:function(e,t){e[t]=!0},unset:function(e,t){delete e[t]}});var Vo,jo=["$rootScope",function(e){return{restrict:"A",require:["ngModel","^?form","^?ngModelOptions"],controller:Un,priority:1,compile:function(t){return t.addClass(Po).addClass("ng-untouched").addClass(Do),{pre:function(e,t,n,r){var i=r[0];t=r[1]||i.$$parentForm,(r=r[2])&&(i.$options=r.$options),i.$$initGetterSetters(),t.$addControl(i),n.$observe("name",function(e){i.$name!==e&&i.$$parentForm.$$renameControl(i,e)}),e.$on("$destroy",function(){i.$$parentForm.$removeControl(i)})},post:function(t,n,r,i){function o(){a.$setTouched()}var a=i[0];a.$$setUpdateOnEvents(),n.on("blur",function(){a.$touched||(e.$$phase?t.$evalAsync(o):t.$apply(o))})}}}}}],qo=/(\s+|^)default(\s+|$)/;_n.prototype={getOption:function(e){return this.$$options[e]},createChild:function(e){var t=!1;return o(e=u({},e),function(n,r){"$inherit"===n?"*"===r?t=!0:(e[r]=this.$$options[r],"updateOn"===r&&(e.updateOnDefault=this.$$options.updateOnDefault)):"updateOn"===r&&(e.updateOnDefault=!1,e[r]=hr(n.replace(qo,function(){return e.updateOnDefault=!0," "})))},this),t&&(delete e["*"],Hn(e,this.$$options)),Hn(e,Vo.$$options),new _n(e)}},Vo=new _n({updateOn:"",updateOnDefault:!0,debounce:0,getterSetter:!1,allowInvalid:!1,timezone:null});var Fo=function(){function e(e,t){this.$$attrs=e,this.$$scope=t}return e.$inject=["$attrs","$scope"],e.prototype={$onInit:function(){var e=this.parentCtrl?this.parentCtrl.$options:Vo,t=this.$$scope.$eval(this.$$attrs.ngModelOptions);this.$options=e.createChild(t)}},{restrict:"A",priority:10,require:{parentCtrl:"?^^ngModelOptions"},bindToController:!0,controller:e}},Uo=En({terminal:!0,priority:1e3}),_o=r("ngOptions"),Ho=/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?(?:\s+disable\s+when\s+([\s\S]+?))?\s+for\s+(?:([$\w][$\w]*)|(?:\(\s*([$\w][$\w]*)\s*,\s*([$\w][$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/,Bo=["$compile","$document","$parse",function(t,n,r){function a(e,t,n){function o(e,t,n,r,i){this.selectValue=e,this.viewValue=t,this.label=n,this.group=r,this.disabled=i}function a(e){var t;if(!u&&i(e))t=e;else for(var n in t=[],e)e.hasOwnProperty(n)&&"$"!==n.charAt(0)&&t.push(n);return t}var s=e.match(Ho);if(!s)throw _o("iexp",e,z(t));var c=s[5]||s[7],u=s[6];e=/ as /.test(s[0])&&s[1];var l=s[9];t=r(s[2]?s[1]:c);var f=e&&r(e)||t,p=l&&r(l),d=l?function(e,t){return p(n,t)}:function(e){return Le(e)},h=function(e,t){return d(e,b(e,t))},$=r(s[2]||s[1]),g=r(s[3]||""),m=r(s[4]||""),v=r(s[8]),y={},b=u?function(e,t){return y[u]=t,y[c]=e,y}:function(e){return y[c]=e,y};return{trackBy:l,getTrackByValue:h,getWatchables:r(v,function(e){for(var t=[],r=a(e=e||[]),i=r.length,o=0;o<i;o++){var c=e[u=e===r?o:r[o]],u=b(c,u);c=d(c,u);t.push(c),(s[2]||s[1])&&(c=$(n,u),t.push(c)),s[4]&&(u=m(n,u),t.push(u))}return t}),getOptions:function(){for(var e=[],t={},r=v(n)||[],i=a(r),s=i.length,c=0;c<s;c++){var u=r===i?c:i[c],p=b(r[u],u),y=f(n,p);y=new o(u=d(y,p),y,$(n,p),g(n,p),p=m(n,p));e.push(y),t[u]=y}return{items:e,selectValueMap:t,getOptionFromViewValue:function(e){return t[h(e)]},getViewValueFromOption:function(e){return l?P(e.viewValue):e.viewValue}}}}}var s=e.document.createElement("option"),c=e.document.createElement("optgroup");return{restrict:"A",terminal:!0,require:["select","ngModel"],link:{pre:function(e,t,n,r){r[0].registerOption=d},post:function(e,r,i,u){function l(e){var t=(e=m.getOptionFromViewValue(e))&&e.element;return t&&!t.selected&&(t.selected=!0),e}function f(e,t){e.element=t,t.disabled=e.disabled,e.label!==t.label&&(t.label=e.label,t.textContent=e.label),t.value=e.selectValue}var p=u[0],d=u[1],h=i.multiple;u=0;for(var $=r.children(),g=$.length;u<g;u++)if(""===$[u].value){p.hasEmptyOption=!0,p.emptyOption=$.eq(u);break}r.empty(),u=!!p.emptyOption,Kn(s.cloneNode(!1)).val("?");var m,y=a(i.ngOptions,r,e),b=n[0].createDocumentFragment();p.generateUnknownOptionValue=function(e){return"?"},h?(p.writeValue=function(e){if(m){var t=e&&e.map(l)||[];m.items.forEach(function(e){e.element.selected&&-1===Array.prototype.indexOf.call(t,e)&&(e.element.selected=!1)})}},p.readValue=function(){var e=r.val()||[],t=[];return o(e,function(e){(e=m.selectValueMap[e])&&!e.disabled&&t.push(m.getViewValueFromOption(e))}),t},y.trackBy&&e.$watchCollection(function(){if(E(d.$viewValue))return d.$viewValue.map(function(e){return y.getTrackByValue(e)})},function(){d.$render()})):(p.writeValue=function(e){if(m){var t=r[0].options[r[0].selectedIndex],n=m.getOptionFromViewValue(e);t&&t.removeAttribute("selected"),n?(r[0].value!==n.selectValue&&(p.removeUnknownOption(),r[0].value=n.selectValue,n.element.selected=!0),n.element.setAttribute("selected","selected")):p.selectUnknownOrEmptyOption(e)}},p.readValue=function(){var e=m.selectValueMap[r.val()];return e&&!e.disabled?(p.unselectEmptyOption(),p.removeUnknownOption(),m.getViewValueFromOption(e)):null},y.trackBy&&e.$watch(function(){return y.getTrackByValue(d.$viewValue)},function(){d.$render()})),u&&(t(p.emptyOption)(e),r.prepend(p.emptyOption),8===p.emptyOption[0].nodeType?(p.hasEmptyOption=!1,p.registerOption=function(e,t){""===t.val()&&(p.hasEmptyOption=!0,p.emptyOption=t,p.emptyOption.removeClass("ng-scope"),d.$render(),t.on("$destroy",function(){var e=p.$isEmptyOptionSelected();p.hasEmptyOption=!1,p.emptyOption=void 0,e&&d.$render()}))}):p.emptyOption.removeClass("ng-scope")),e.$watchCollection(y.getWatchables,function(){var e=m&&p.readValue();if(m)for(var t=m.items.length-1;0<=t;t--){var n=m.items[t];v(n.group)?Oe(n.element.parentNode):Oe(n.element)}m=y.getOptions();var i={};m.items.forEach(function(e){var t;if(v(e.group)){(t=i[e.group])||(t=c.cloneNode(!1),b.appendChild(t),t.label=null===e.group?"null":e.group,i[e.group]=t);var n=s.cloneNode(!1);t.appendChild(n),f(e,n)}else t=s.cloneNode(!1),b.appendChild(t),f(e,t)}),r[0].appendChild(b),d.$render(),d.$isEmpty(e)||(t=p.readValue(),(y.trackBy||h?R(e,t):e===t)||(d.$setViewValue(t),d.$render()))})}}}}],zo=["$locale","$interpolate","$log",function(e,t,n){var r=/{}/g,i=/^when(Minus)?(.+)$/;return{link:function(a,s,c){function u(e){s.text(e||"")}var l,f=c.count,p=c.$attr.when&&s.attr(c.$attr.when),h=c.offset||0,$=a.$eval(p)||{},g={},v=t.startSymbol(),y=t.endSymbol(),b=v+f+"-"+h+y,x=cr.noop;o(c,function(e,t){var n=i.exec(t);n&&(n=(n[1]?"-":"")+er(n[2]),$[n]=s.attr(c.$attr[t]))}),o($,function(e,n){g[n]=t(e.replace(r,b))}),a.$watch(f,function(t){var r=parseFloat(t),i=lr(r);i||r in $||(r=e.pluralCat(r-h)),r===l||i&&lr(l)||(x(),m(i=g[r])?(null!=t&&n.debug("ngPluralize: no rule defined for '"+r+"' in "+p),x=d,u()):x=a.$watch(i,u),l=r)})}}}],Wo=r("ngRef"),Go=["$parse",function(e){return{priority:-1,restrict:"A",compile:function(t,n){var r=Ke(D(t)),i=e(n.ngRef),o=i.assign||function(){throw Wo("nonassign",n.ngRef)};return function(e,t,a){var s;if(a.hasOwnProperty("ngRefRead")){if("$element"===a.ngRefRead)s=t;else if(!(s=t.data("$"+a.ngRefRead+"Controller")))throw Wo("noctrl",a.ngRefRead,n.ngRef)}else s=t.data("$"+r+"Controller");o(e,s=s||t),t.on("$destroy",function(){i(e)===s&&o(e,null)})}}}}],Ko=["$parse","$animate","$compile",function(e,t,n){var a=r("ngRepeat"),s=function(e,t,n,r,i,o,a){e[n]=r,i&&(e[i]=o),e.$index=t,e.$first=0===t,e.$last=t===a-1,e.$middle=!(e.$first||e.$last),e.$odd=!(e.$even=0==(1&t))},c=function(e,t,n){return Le(n)},u=function(e,t){return t};return{restrict:"A",multiElement:!0,transclude:"element",priority:1e3,terminal:!0,$$tlb:!0,compile:function(r,l){var f=l.ngRepeat,p=n.$$createComment("end ngRepeat",f);if(!(d=f.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/)))throw a("iexp",f);var d,h=d[1],$=d[2],g=d[3],m=d[4];if(!(d=h.match(/^(?:(\s*[$\w]+)|\(\s*([$\w]+)\s*,\s*([$\w]+)\s*\))$/)))throw a("iidexp",h);var v,y=d[3]||d[1],b=d[2];if(g&&(!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(g)||/^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test(g)))throw a("badident",g);if(m){var x={$id:Le},w=e(m);v=function(e,t,n,r){return b&&(x[b]=t),x[y]=n,x.$index=r,w(e,x)}}return function(e,n,r,l,d){var h=oe();e.$watchCollection($,function(r){var l,$,m,w,C,E,S,k,A,T,O=n[0],M=oe();if(g&&(e[g]=r),i(r))k=r,$=v||c;else for(T in $=v||u,k=[],r)Qn.call(r,T)&&"$"!==T.charAt(0)&&k.push(T);for(w=k.length,T=Array(w),l=0;l<w;l++)if(C=r===k?l:k[l],E=r[C],S=$(e,C,E,l),h[S])A=h[S],delete h[S],M[S]=A,T[l]=A;else{if(M[S])throw o(T,function(e){e&&e.scope&&(h[e.id]=e)}),a("dupes",f,S,E);T[l]={id:S,scope:void 0,clone:void 0},M[S]=!0}for(m in x&&(x[y]=void 0),h){if(S=ie((A=h[m]).clone),t.leave(S),S[0].parentNode)for(l=0,$=S.length;l<$;l++)S[l].$$NG_REMOVED=!0;A.scope.$destroy()}for(l=0;l<w;l++)if(C=r===k?l:k[l],E=r[C],(A=T[l]).scope){m=O;do{m=m.nextSibling}while(m&&m.$$NG_REMOVED);A.clone[0]!==m&&t.move(ie(A.clone),null,O),O=A.clone[A.clone.length-1],s(A.scope,l,y,E,b,C,w)}else d(function(e,n){A.scope=n;var r=p.cloneNode(!1);e[e.length++]=r,t.enter(e,null,O),O=r,A.clone=e,M[A.id]=A,s(A.scope,l,y,E,b,C,w)});h=M})}}}}],Yo=["$animate",function(e){return{restrict:"A",multiElement:!0,link:function(t,n,r){t.$watch(r.ngShow,function(t){e[t?"removeClass":"addClass"](n,"ng-hide",{tempClasses:"ng-hide-animate"})})}}}],Jo=["$animate",function(e){return{restrict:"A",multiElement:!0,link:function(t,n,r){t.$watch(r.ngHide,function(t){e[t?"addClass":"removeClass"](n,"ng-hide",{tempClasses:"ng-hide-animate"})})}}}],Xo=En(function(e,t,n){e.$watchCollection(n.ngStyle,function(e,n){n&&e!==n&&(e||(e={}),o(n,function(t,n){null==e[n]&&(e[n]="")})),e&&t.css(e)})}),Zo=["$animate","$compile",function(e,t){return{require:"ngSwitch",controller:["$scope",function(){this.cases={}}],link:function(n,r,i,a){var s=[],c=[],u=[],l=[],f=function(e,t){return function(n){!1!==n&&e.splice(t,1)}};n.$watch(i.ngSwitch||i.on,function(n){for(var r,i;u.length;)e.cancel(u.pop());for(r=0,i=l.length;r<i;++r){var p=ie(c[r].clone);l[r].$destroy(),(u[r]=e.leave(p)).done(f(u,r))}c.length=0,l.length=0,(s=a.cases["!"+n]||a.cases["?"])&&o(s,function(n){n.transclude(function(r,i){l.push(i);var o=n.element;r[r.length++]=t.$$createComment("end ngSwitchWhen"),c.push({clone:r}),e.enter(r,o.parent(),o)})})})}}}],Qo=En({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,link:function(e,t,n,r,i){o(n.ngSwitchWhen.split(n.ngSwitchWhenSeparator).sort().filter(function(e,t,n){return n[t-1]!==e}),function(e){r.cases["!"+e]=r.cases["!"+e]||[],r.cases["!"+e].push({transclude:i,element:t})})}}),ea=En({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,link:function(e,t,n,r,i){r.cases["?"]=r.cases["?"]||[],r.cases["?"].push({transclude:i,element:t})}}),ta=r("ngTransclude"),na=["$compile",function(e){return{restrict:"EAC",compile:function(t){var n=e(t.contents());return t.empty(),function(e,t,r,i,o){function a(){n(e,function(e){t.append(e)})}if(!o)throw ta("orphan",z(t));r.ngTransclude===r.$attr.ngTransclude&&(r.ngTransclude=""),o(function(e,n){var r;if(r=e.length)e:{r=0;for(var i=e.length;r<i;r++){var o=e[r];if(o.nodeType!==Cr||o.nodeValue.trim()){r=!0;break e}}r=void 0}r?t.append(e):(a(),n.$destroy())},null,r=r.ngTransclude||r.ngTranscludeSlot),r&&!o.isSlotFilled(r)&&a()}}}}],ra=["$templateCache",function(e){return{restrict:"E",terminal:!0,compile:function(t,n){"text/ng-template"===n.type&&e.put(n.id,t[0].text)}}}],ia={$setViewValue:d,$render:d},oa=["$element","$scope",function(t,n){function r(){s||(s=!0,n.$$postDigest(function(){s=!1,o.ngModelCtrl.$render()}))}function i(e){c||(c=!0,n.$$postDigest(function(){n.$$destroyed||(c=!1,o.ngModelCtrl.$setViewValue(o.readValue()),e&&o.ngModelCtrl.$render())}))}var o=this,a=new _r;o.selectValueMap={},o.ngModelCtrl=ia,o.multiple=!1,o.unknownOption=Kn(e.document.createElement("option")),o.hasEmptyOption=!1,o.emptyOption=void 0,o.renderUnknownOption=function(e){e=o.generateUnknownOptionValue(e),o.unknownOption.val(e),t.prepend(o.unknownOption),Bn(o.unknownOption,!0),t.val(e)},o.updateUnknownOption=function(e){e=o.generateUnknownOptionValue(e),o.unknownOption.val(e),Bn(o.unknownOption,!0),t.val(e)},o.generateUnknownOptionValue=function(e){return"? "+Le(e)+" ?"},o.removeUnknownOption=function(){o.unknownOption.parent()&&o.unknownOption.remove()},o.selectEmptyOption=function(){o.emptyOption&&(t.val(""),Bn(o.emptyOption,!0))},o.unselectEmptyOption=function(){o.hasEmptyOption&&Bn(o.emptyOption,!1)},n.$on("$destroy",function(){o.renderUnknownOption=d}),o.readValue=function(){var e=(e=t.val())in o.selectValueMap?o.selectValueMap[e]:e;return o.hasOption(e)?e:null},o.writeValue=function(e){var n=t[0].options[t[0].selectedIndex];n&&Bn(Kn(n),!1),o.hasOption(e)?(o.removeUnknownOption(),n=Le(e),t.val(n in o.selectValueMap?n:e),Bn(Kn(t[0].options[t[0].selectedIndex]),!0)):o.selectUnknownOrEmptyOption(e)},o.addOption=function(e,t){if(8!==t[0].nodeType){re(e,'"option value"'),""===e&&(o.hasEmptyOption=!0,o.emptyOption=t);var n=a.get(e)||0;a.set(e,n+1),r()}},o.removeOption=function(e){var t=a.get(e);t&&(1===t?(a.delete(e),""===e&&(o.hasEmptyOption=!1,o.emptyOption=void 0)):a.set(e,t-1))},o.hasOption=function(e){return!!a.get(e)},o.$hasEmptyOption=function(){return o.hasEmptyOption},o.$isUnknownOptionSelected=function(){return t[0].options[0]===o.unknownOption[0]},o.$isEmptyOptionSelected=function(){return o.hasEmptyOption&&t[0].options[t[0].selectedIndex]===o.emptyOption[0]},o.selectUnknownOrEmptyOption=function(e){null==e&&o.emptyOption?(o.removeUnknownOption(),o.selectEmptyOption()):o.unknownOption.parent().length?o.updateUnknownOption(e):o.renderUnknownOption(e)};var s=!1,c=!1;o.registerOption=function(e,t,n,a,s){var c,u;n.$attr.ngValue?n.$observe("value",function(e){var n,r=t.prop("selected");v(u)&&(o.removeOption(c),delete o.selectValueMap[u],n=!0),u=Le(e),c=e,o.selectValueMap[u]=e,o.addOption(e,t),t.attr("value",u),n&&r&&i()}):a?n.$observe("value",function(e){o.readValue();var n,r=t.prop("selected");v(c)&&(o.removeOption(c),n=!0),c=e,o.addOption(e,t),n&&r&&i()}):s?e.$watch(s,function(e,r){n.$set("value",e);var a=t.prop("selected");r!==e&&o.removeOption(r),o.addOption(e,t),r&&a&&i()}):o.addOption(n.value,t);n.$observe("disabled",function(e){("true"===e||e&&t.prop("selected"))&&(o.multiple?i(!0):(o.ngModelCtrl.$setViewValue(null),o.ngModelCtrl.$render()))}),t.on("$destroy",function(){var e=o.readValue(),t=n.value;o.removeOption(t),r(),(o.multiple&&e&&-1!==e.indexOf(t)||e===t)&&i(!0)})}}],aa=function(){return{restrict:"E",require:["select","?ngModel"],controller:oa,priority:1,link:{pre:function(e,t,n,r){var i=r[0],a=r[1];if(a){if(i.ngModelCtrl=a,t.on("change",function(){i.removeUnknownOption(),e.$apply(function(){a.$setViewValue(i.readValue())})}),n.multiple){i.multiple=!0,i.readValue=function(){var e=[];return o(t.find("option"),function(t){t.selected&&!t.disabled&&(t=t.value,e.push(t in i.selectValueMap?i.selectValueMap[t]:t))}),e},i.writeValue=function(e){o(t.find("option"),function(t){var n=!!e&&(-1!==Array.prototype.indexOf.call(e,t.value)||-1!==Array.prototype.indexOf.call(e,i.selectValueMap[t.value]));n!==t.selected&&Bn(Kn(t),n)})};var s,c=NaN;e.$watch(function(){c!==a.$viewValue||R(s,a.$viewValue)||(s=se(a.$viewValue),a.$render()),c=a.$viewValue}),a.$isEmpty=function(e){return!e||0===e.length}}}else i.registerOption=d},post:function(e,t,n,r){var i=r[1];if(i){var o=r[0];i.$render=function(){o.writeValue(i.$viewValue)}}}}}},sa=["$interpolate",function(e){return{restrict:"E",priority:100,compile:function(t,n){var r,i;return v(n.ngValue)||(v(n.value)?r=e(n.value,!0):(i=e(t.text(),!0))||n.$set("value",t.text())),function(e,t,n){var o=t.parent();(o=o.data("$selectController")||o.parent().data("$selectController"))&&o.registerOption(e,t,n,r,i)}}}}],ca=["$parse",function(e){return{restrict:"A",require:"?ngModel",link:function(t,n,r,i){if(i){var o=r.hasOwnProperty("required")||e(r.ngRequired)(t);r.ngRequired||(r.required=!0),i.$validators.required=function(e,t){return!o||!i.$isEmpty(t)},r.$observe("required",function(e){o!==e&&(o=e,i.$validate())})}}}}],ua=["$parse",function(e){return{restrict:"A",require:"?ngModel",compile:function(t,n){var r,i;return n.ngPattern&&(r=n.ngPattern,i="/"===n.ngPattern.charAt(0)&&Zn.test(n.ngPattern)?function(){return n.ngPattern}:e(n.ngPattern)),function(e,t,n,o){if(o){var a=n.pattern;n.ngPattern?a=i(e):r=n.pattern;var s=zn(a,r,t);n.$observe("pattern",function(e){var n=s;s=zn(e,r,t),(n&&n.toString())!==(s&&s.toString())&&o.$validate()}),o.$validators.pattern=function(e,t){return o.$isEmpty(t)||m(s)||s.test(t)}}}}}}],la=["$parse",function(e){return{restrict:"A",require:"?ngModel",link:function(t,n,r,i){if(i){var o=r.maxlength||e(r.ngMaxlength)(t),a=Wn(o);r.$observe("maxlength",function(e){o!==e&&(a=Wn(e),o=e,i.$validate())}),i.$validators.maxlength=function(e,t){return 0>a||i.$isEmpty(t)||t.length<=a}}}}}],fa=["$parse",function(e){return{restrict:"A",require:"?ngModel",link:function(t,n,r,i){if(i){var o=r.minlength||e(r.ngMinlength)(t),a=Wn(o)||-1;r.$observe("minlength",function(e){o!==e&&(a=Wn(e)||-1,o=e,i.$validate())}),i.$validators.minlength=function(e,t){return i.$isEmpty(t)||t.length>=a}}}}}];e.angular.bootstrap?e.console&&console.log("WARNING: Tried to load AngularJS more than once."):(function(){var t;if(!wr){var n=mr();(Yn=m(n)?e.jQuery:n?e[n]:void 0)&&Yn.fn.on?(Kn=Yn,u(Yn.fn,{scope:Vr.scope,isolateScope:Vr.isolateScope,controller:Vr.controller,injector:Vr.injector,inheritedData:Vr.inheritedData})):Kn=de,t=Kn.cleanData,Kn.cleanData=function(e){for(var n,r,i=0;null!=(r=e[i]);i++)(n=(Kn._data(r)||{}).events)&&n.$destroy&&Kn(r).triggerHandler("$destroy");t(e)},cr.element=Kn,wr=!0}}(),function(n){u(n,{errorHandlingConfig:t,bootstrap:X,copy:P,extend:u,merge:l,equals:R,element:Kn,forEach:o,injector:je,noop:d,bind:j,toJson:F,fromJson:U,identity:h,isUndefined:m,isDefined:v,isString:x,isFunction:k,isObject:y,isNumber:w,isElement:N,isArray:E,version:Er,isDate:C,callbacks:{$$counter:0},getTestability:Q,reloadWithDebugInfo:Z,$$minErr:r,$$csp:gr,$$encodeUriSegment:K,$$encodeUriQuery:Y,$$lowercase:er,$$stringify:ae,$$uppercase:tr}),(Jn=function(e){function t(e,t,n){return e[t]||(e[t]=n())}var n=r("$injector"),i=r("ng");return(e=t(e,"angular",Object)).$$minErr=e.$$minErr||r,t(e,"module",function(){var e={};return function(r,o,a){var s={};if("hasOwnProperty"===r)throw i("badname","module");return o&&e.hasOwnProperty(r)&&(e[r]=null),t(e,r,function(){function e(e,t,n,r){return r||(r=c),function(){return r[n||"push"]([e,t,arguments]),p}}function t(e,t,n){return n||(n=c),function(i,o){return o&&k(o)&&(o.$$moduleName=r),n.push([e,t,arguments]),p}}if(!o)throw n("nomod",r);var c=[],u=[],l=[],f=e("$injector","invoke","push",u),p={_invokeQueue:c,_configBlocks:u,_runBlocks:l,info:function(e){if(v(e)){if(!y(e))throw i("aobj","value");return s=e,this}return s},requires:o,name:r,provider:t("$provide","provider"),factory:t("$provide","factory"),service:t("$provide","service"),value:e("$provide","value"),constant:e("$provide","constant","unshift"),decorator:t("$provide","decorator",u),animation:t("$animateProvider","register"),filter:t("$filterProvider","register"),controller:t("$controllerProvider","register"),directive:t("$compileProvider","directive"),component:t("$compileProvider","component"),config:f,run:function(e){return l.push(e),this}};return a&&f(a),p})}})}(e))("ng",["ngLocale"],["$provide",function(e){e.provider({$$sanitizeUri:Bt}),e.provider("$compile",We).directive({a:Ki,input:fo,textarea:fo,form:Zi,script:ra,select:aa,option:sa,ngBind:go,ngBindHtml:vo,ngBindTemplate:mo,ngClass:bo,ngClassEven:wo,ngClassOdd:xo,ngCloak:Co,ngController:Eo,ngForm:Qi,ngHide:Jo,ngIf:Ao,ngInclude:To,ngInit:Mo,ngNonBindable:Uo,ngPluralize:zo,ngRef:Go,ngRepeat:Ko,ngShow:Yo,ngStyle:Xo,ngSwitch:Zo,ngSwitchWhen:Qo,ngSwitchDefault:ea,ngOptions:Bo,ngTransclude:na,ngModel:jo,ngList:No,ngChange:yo,pattern:ua,ngPattern:ua,required:ca,ngRequired:ca,minlength:fa,ngMinlength:fa,maxlength:la,ngMaxlength:la,ngValue:$o,ngModelOptions:Fo}).directive({ngInclude:Oo,input:po}).directive(Yi).directive(So),e.provider({$anchorScroll:qe,$animate:Qr,$animateCss:ni,$$animateJs:Xr,$$animateQueue:Zr,$$AnimateRunner:ti,$$animateAsyncRun:ei,$browser:He,$cacheFactory:Be,$controller:Ze,$document:Qe,$$isDocumentHidden:et,$exceptionHandler:tt,$filter:an,$$forceReflow:ui,$interpolate:pt,$interval:dt,$$intervalFactory:ht,$http:ut,$httpParamSerializer:rt,$httpParamSerializerJQLike:it,$httpBackend:ft,$xhrFactory:lt,$jsonpCallbacks:vi,$location:St,$log:kt,$parse:jt,$rootScope:Ht,$q:qt,$$q:Ft,$sce:Gt,$sceDelegate:Wt,$sniffer:Kt,$$taskTrackerFactory:Yt,$templateCache:ze,$templateRequest:Xt,$$testability:Zt,$timeout:Qt,$window:nn,$$rAF:_t,$$jqLite:Pe,$$Map:Hr,$$cookieReader:on})}]).info({angularVersion:"1.7.8"})}(cr),cr.module("ngLocale",[],["$provide",function(e){e.value("$locale",{DATETIME_FORMATS:{AMPMS:["AM","PM"],DAY:"Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),ERANAMES:["Before Christ","Anno Domini"],ERAS:["BC","AD"],FIRSTDAYOFWEEK:6,MONTH:"January February March April May June July August September October November December".split(" "),SHORTDAY:"Sun Mon Tue Wed Thu Fri Sat".split(" "),SHORTMONTH:"Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec".split(" "),STANDALONEMONTH:"January February March April May June July August September October November December".split(" "),WEEKENDRANGE:[5,6],fullDate:"EEEE, MMMM d, y",longDate:"MMMM d, y",medium:"MMM d, y h:mm:ss a",mediumDate:"MMM d, y",mediumTime:"h:mm:ss a",short:"M/d/yy h:mm a",shortDate:"M/d/yy",shortTime:"h:mm a"},NUMBER_FORMATS:{CURRENCY_SYM:"$",DECIMAL_SEP:".",GROUP_SEP:",",PATTERNS:[{gSize:3,lgSize:3,maxFrac:3,minFrac:0,minInt:1,negPre:"-",negSuf:"",posPre:"",posSuf:""},{gSize:3,lgSize:3,maxFrac:2,minFrac:2,minInt:1,negPre:"-Â¤",negSuf:"",posPre:"Â¤",posSuf:""}]},id:"en-us",localeID:"en_US",pluralCat:function(e,t){var n=0|e,r=t;return void 0===r&&(r=Math.min(function(e){var t=(e+="").indexOf(".");return-1==t?0:e.length-t-1}(e),3)),Math.pow(10,r),1==n&&0==r?"one":"other"}})}]),Kn(function(){J(e.document,X)}))}(window),!window.angular.$$csp().noInlineStyle&&window.angular.element(document.head).prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>'),function(){function e(e){return angular.isUndefined(e)||null===e}var t={TAB:9,ENTER:13,ESC:27,SPACE:32,LEFT:37,UP:38,RIGHT:39,DOWN:40,SHIFT:16,CTRL:17,ALT:18,PAGE_UP:33,PAGE_DOWN:34,HOME:36,END:35,BACKSPACE:8,DELETE:46,COMMAND:91,MAP:{91:"COMMAND",8:"BACKSPACE",9:"TAB",13:"ENTER",16:"SHIFT",17:"CTRL",18:"ALT",19:"PAUSEBREAK",20:"CAPSLOCK",27:"ESC",32:"SPACE",33:"PAGE_UP",34:"PAGE_DOWN",35:"END",36:"HOME",37:"LEFT",38:"UP",39:"RIGHT",40:"DOWN",43:"+",44:"PRINTSCREEN",45:"INSERT",46:"DELETE",48:"0",49:"1",50:"2",51:"3",52:"4",53:"5",54:"6",55:"7",56:"8",57:"9",59:";",61:"=",65:"A",66:"B",67:"C",68:"D",69:"E",70:"F",71:"G",72:"H",73:"I",74:"J",75:"K",76:"L",77:"M",78:"N",79:"O",80:"P",81:"Q",82:"R",83:"S",84:"T",85:"U",86:"V",87:"W",88:"X",89:"Y",90:"Z",96:"0",97:"1",98:"2",99:"3",100:"4",101:"5",102:"6",103:"7",104:"8",105:"9",106:"*",107:"+",109:"-",110:".",111:"/",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NUMLOCK",145:"SCROLLLOCK",186:";",187:"=",188:",",189:"-",190:".",191:"/",192:"`",219:"[",220:"\\",221:"]",222:"'"},isControl:function(e){switch(e.which){case t.COMMAND:case t.SHIFT:case t.CTRL:case t.ALT:return!0}return!!(e.metaKey||e.ctrlKey||e.altKey)},isFunctionKey:function(e){return(e=e.which?e.which:e)>=112&&e<=123},isVerticalMovement:function(e){return~[t.UP,t.DOWN].indexOf(e)},isHorizontalMovement:function(e){return~[t.LEFT,t.RIGHT,t.BACKSPACE,t.DELETE].indexOf(e)},toSeparator:function(e){var n={ENTER:"\n",TAB:"\t",SPACE:" "}[e];return n||(t[e]?void 0:e)}};void 0===angular.element.prototype.querySelectorAll&&(angular.element.prototype.querySelectorAll=function(e){return angular.element(this[0].querySelectorAll(e))}),void 0===angular.element.prototype.closest&&(angular.element.prototype.closest=function(e){for(var t=this[0],n=t.matches||t.webkitMatchesSelector||t.mozMatchesSelector||t.msMatchesSelector;t;){if(n.bind(t)(e))return t;t=t.parentElement}return!1});var n=0,r=angular.module("ui.select",[]).constant("uiSelectConfig",{theme:"bootstrap",searchEnabled:!0,sortable:!1,placeholder:"",refreshDelay:1e3,closeOnSelect:!0,skipFocusser:!1,dropdownPosition:"auto",removeSelected:!0,resetSearchInput:!0,generateId:function(){return n++},appendToBody:!1,spinnerEnabled:!1,spinnerClass:"glyphicon glyphicon-refresh ui-select-spin",backspaceReset:!0}).service("uiSelectMinErr",function(){var e=angular.$$minErr("ui.select");return function(){var t=e.apply(this,arguments).message.replace(new RegExp("\nhttp://errors.angularjs.org/.*"),"");return new Error(t)}}).directive("uisTranscludeAppend",function(){return{link:function(e,t,n,r,i){i(e,function(e){t.append(e)})}}}).filter("highlight",function(){return function(e,t){return t&&e?(""+e).replace(new RegExp(function(e){return(""+e).replace(/([.?*+^$[\]\\(){}|-])/g,"\\$1")}(t),"gi"),'<span class="ui-select-highlight">$&</span>'):e}}).factory("uisOffset",["$document","$window",function(e,t){return function(n){var r=n[0].getBoundingClientRect();return{width:r.width||n.prop("offsetWidth"),height:r.height||n.prop("offsetHeight"),top:r.top+(t.pageYOffset||e[0].documentElement.scrollTop),left:r.left+(t.pageXOffset||e[0].documentElement.scrollLeft)}}}]);r.directive("uiSelectChoices",["uiSelectConfig","uisRepeatParser","uiSelectMinErr","$compile","$window",function(e,t,n,r,i){return{restrict:"EA",require:"^uiSelect",replace:!0,transclude:!0,templateUrl:function(t){return t.addClass("ui-select-choices"),(t.parent().attr("theme")||e.theme)+"/choices.tpl.html"},compile:function(r,o){if(!o.repeat)throw n("repeat","Expected 'repeat' expression.");var a=o.groupBy,s=o.groupFilter;if(a){var c=r.querySelectorAll(".ui-select-choices-group");if(1!==c.length)throw n("rows","Expected 1 .ui-select-choices-group but got '{0}'.",c.length);c.attr("ng-repeat",t.getGroupNgRepeatExpression())}var u=t.parse(o.repeat),l=r.querySelectorAll(".ui-select-choices-row");if(1!==l.length)throw n("rows","Expected 1 .ui-select-choices-row but got '{0}'.",l.length);l.attr("ng-repeat",u.repeatExpression(a)).attr("ng-if","$select.open");var f=r.querySelectorAll(".ui-select-choices-row-inner");if(1!==f.length)throw n("rows","Expected 1 .ui-select-choices-row-inner but got '{0}'.",f.length);return f.attr("uis-transclude-append",""),(i.document.addEventListener?l:f).attr("ng-click","$select.select("+u.itemName+",$select.skipFocusser,$event)"),function(t,n,i,o){o.parseRepeatAttr(i.repeat,a,s),o.disableChoiceExpression=i.uiDisableChoice,o.onHighlightCallback=i.onHighlight,o.minimumInputLength=parseInt(i.minimumInputLength)||0,o.dropdownPosition=i.position?i.position.toLowerCase():e.dropdownPosition,t.$watch("$select.search",function(e){e&&!o.open&&o.multiple&&o.activate(!1,!0),o.activeIndex=o.tagging.isActivated?-1:0,!i.minimumInputLength||o.search.length>=i.minimumInputLength?o.refresh(i.refresh):o.items=[]}),i.$observe("refreshDelay",function(){var n=t.$eval(i.refreshDelay);o.refreshDelay=void 0!==n?n:e.refreshDelay}),t.$watch("$select.open",function(e){e?(r.attr("role","listbox"),o.refresh(i.refresh)):n.removeAttr("role")})}}}}]),r.controller("uiSelectCtrl",["$scope","$element","$timeout","$filter","$$uisDebounce","uisRepeatParser","uiSelectMinErr","uiSelectConfig","$parse","$injector","$window",function(n,r,i,o,a,s,c,u,l,f,p){function d(){m.resetSearchInput&&(m.search=v,m.selected&&m.items.length&&!m.multiple&&(m.activeIndex=function(e,t,n){if(e.findIndex)return e.findIndex(t,n);for(var r,i=Object(e),o=i.length>>>0,a=0;a<o;a++)if(r=i[a],t.call(n,r,a,i))return a;return-1}(m.items,function(e){return angular.equals(this,e)},m.selected)))}function h(e){return b.indexOf(e)>-1}function $(){var e=r.querySelectorAll(".ui-select-choices-content"),t=e.querySelectorAll(".ui-select-choices-row");if(t.length<1)throw c("choices","Expected multiple .ui-select-choices-row but got '{0}'.",t.length);if(!(m.activeIndex<0)){var n=t[m.activeIndex],i=n.offsetTop+n.clientHeight-e[0].scrollTop,o=e[0].offsetHeight;i>o?e[0].scrollTop+=i-o:i<n.clientHeight&&(m.isGrouped&&0===m.activeIndex?e[0].scrollTop=0:e[0].scrollTop-=n.clientHeight-i)}}var g,m=this,v="";if(m.placeholder=u.placeholder,m.searchEnabled=u.searchEnabled,m.sortable=u.sortable,m.refreshDelay=u.refreshDelay,m.paste=u.paste,m.resetSearchInput=u.resetSearchInput,m.refreshing=!1,m.spinnerEnabled=u.spinnerEnabled,m.spinnerClass=u.spinnerClass,m.removeSelected=u.removeSelected,m.closeOnSelect=!0,m.skipFocusser=!1,m.search=v,m.activeIndex=0,m.items=[],m.open=!1,m.focus=!1,m.disabled=!1,m.selected=void 0,m.dropdownPosition="auto",m.focusser=void 0,m.multiple=void 0,m.disableChoiceExpression=void 0,m.tagging={isActivated:!1,fct:void 0},m.taggingTokens={isActivated:!1,tokens:void 0},m.lockChoiceExpression=void 0,m.clickTriggeredSelect=!1,m.$filter=o,m.$element=r,m.$animate=function(){try{return f.get("$animate")}catch(e){return null}}(),m.searchInput=r.querySelectorAll("input.ui-select-search"),1!==m.searchInput.length)throw c("searchInput","Expected 1 input.ui-select-search but got '{0}'.",m.searchInput.length);m.isEmpty=function(){return e(m.selected)||""===m.selected||m.multiple&&0===m.selected.length},m.activate=function(e,t){if(m.disabled||m.open)m.open&&!m.searchEnabled&&m.close();else{t||d(),n.$broadcast("uis:activate"),m.open=!0,m.activeIndex=m.activeIndex>=m.items.length?0:m.activeIndex,-1===m.activeIndex&&!1!==m.taggingLabel&&(m.activeIndex=0);var o=r.querySelectorAll(".ui-select-choices-content"),a=r.querySelectorAll(".ui-select-search");if(m.$animate&&m.$animate.on&&m.$animate.enabled(o[0])){var s=function t(n,r){"start"===r&&0===m.items.length?(m.$animate.off("removeClass",a[0],t),i(function(){m.focusSearchInput(e)})):"close"===r&&(m.$animate.off("enter",o[0],t),i(function(){m.focusSearchInput(e)}))};m.items.length>0?m.$animate.on("enter",o[0],s):m.$animate.on("removeClass",a[0],s)}else i(function(){m.focusSearchInput(e),!m.tagging.isActivated&&m.items.length>1&&$()})}},m.focusSearchInput=function(e){m.search=e||m.search,m.searchInput[0].focus()},m.findGroupByName=function(e){return m.groups&&m.groups.filter(function(t){return t.name===e})[0]},m.parseRepeatAttr=function(e,t,r){m.setItemsFn=t?function(e){var i=n.$eval(t);if(m.groups=[],angular.forEach(e,function(e){var t=angular.isFunction(i)?i(e):e[i],n=m.findGroupByName(t);n?n.items.push(e):m.groups.push({name:t,items:[e]})}),r){var o=n.$eval(r);angular.isFunction(o)?m.groups=o(m.groups):angular.isArray(o)&&(m.groups=function(e,t){var n,r,i=[];for(n=0;n<t.length;n++)for(r=0;r<e.length;r++)e[r].name==[t[n]]&&i.push(e[r]);return i}(m.groups,o))}m.items=[],m.groups.forEach(function(e){m.items=m.items.concat(e.items)})}:function(e){m.items=e||[]},m.parserResult=s.parse(e),m.isGrouped=!!t,m.itemProperty=m.parserResult.itemName;var i=m.parserResult.source,o=function(){var e=i(n);n.$uisSource=Object.keys(e).map(function(t){var n={};return n[m.parserResult.keyName]=t,n.value=e[t],n})};m.parserResult.keyName&&(o(),m.parserResult.source=l("$uisSource"+m.parserResult.filters),n.$watch(i,function(e,t){e!==t&&o()},!0)),m.refreshItems=function(e){e=e||m.parserResult.source(n);var t=m.selected;if(m.isEmpty()||angular.isArray(t)&&!t.length||!m.multiple||!m.removeSelected)m.setItemsFn(e);else if(null!=e){var r=e.filter(function(e){return angular.isArray(t)?t.every(function(t){return!angular.equals(e,t)}):!angular.equals(e,t)});m.setItemsFn(r)}"auto"!==m.dropdownPosition&&"up"!==m.dropdownPosition||n.calculateDropdownPos(),n.$broadcast("uis:refresh")},n.$watchCollection(m.parserResult.source,function(e){if(null==e)m.items=[];else{if(!angular.isArray(e))throw c("items","Expected an array but got '{0}'.",e);m.refreshItems(e),angular.isDefined(m.ngModel.$modelValue)&&(m.ngModel.$modelValue=null)}})},m.refresh=function(e){void 0!==e&&(g&&i.cancel(g),g=i(function(){if(n.$select.search.length>=n.$select.minimumInputLength){var t=n.$eval(e);t&&angular.isFunction(t.then)&&!m.refreshing&&(m.refreshing=!0,t.finally(function(){m.refreshing=!1}))}},m.refreshDelay))},m.isActive=function(e){if(!m.open)return!1;var t=m.items.indexOf(e[m.itemProperty]),n=t==m.activeIndex;return!(!n||t<0)&&(n&&!angular.isUndefined(m.onHighlightCallback)&&e.$eval(m.onHighlightCallback),n)};var y=function(e){return m.selected&&angular.isArray(m.selected)&&m.selected.filter(function(t){return angular.equals(t,e)}).length>0},b=[];m.isDisabled=function(e){if(m.open){var t=e[m.itemProperty],n=!1;if(m.items.indexOf(t)>=0&&(angular.isDefined(m.disableChoiceExpression)||m.multiple)){if(t.isTag)return!1;m.multiple&&(n=y(t)),!n&&angular.isDefined(m.disableChoiceExpression)&&(n=!!e.$eval(m.disableChoiceExpression)),function(e,t){var n=b.indexOf(e);t&&-1===n&&b.push(e),!t&&n>-1&&b.splice(n,1)}(t,n)}return n}},m.select=function(t,r,i){if(e(t)||!h(t)){if(!m.items&&!m.search&&!m.tagging.isActivated)return;if(!t||!h(t)){if(m.clickTriggeredSelect=!1,i&&("click"===i.type||"touchend"===i.type)&&t&&(m.clickTriggeredSelect=!0),m.tagging.isActivated&&!1===m.clickTriggeredSelect){if(!1===m.taggingLabel)if(m.activeIndex<0){if(void 0===t&&(t=void 0!==m.tagging.fct?m.tagging.fct(m.search):m.search),!t||angular.equals(m.items[0],t))return}else t=m.items[m.activeIndex];else if(0===m.activeIndex){if(void 0===t)return;if(void 0!==m.tagging.fct&&"string"==typeof t){if(!(t=m.tagging.fct(t)))return}else"string"==typeof t&&(t=t.replace(m.taggingLabel,"").trim())}if(y(t))return void m.close(r)}d(),n.$broadcast("uis:select",t),m.closeOnSelect&&m.close(r)}}},m.close=function(e){m.open&&(m.ngModel&&m.ngModel.$setTouched&&m.ngModel.$setTouched(),m.open=!1,d(),n.$broadcast("uis:close",e))},m.setFocus=function(){m.focus||m.focusInput[0].focus()},m.clear=function(e){m.select(null),e.stopPropagation(),i(function(){m.focusser[0].focus()},0,!1)},m.toggle=function(e){m.open?(m.close(),e.preventDefault(),e.stopPropagation()):m.activate()},m.isLocked=function(){return!1},n.$watch(function(){return angular.isDefined(m.lockChoiceExpression)&&""!==m.lockChoiceExpression},function(e){function t(e,t){var n=r.indexOf(e);t&&-1===n&&r.push(e),!t&&n>-1&&r.splice(n,1)}function n(e){return r.indexOf(e)>-1}if(e){var r=[];m.isLocked=function(e,r){var i=!1,o=m.selected[r];return o&&(e?t(o,i=!!e.$eval(m.lockChoiceExpression)):i=n(o)),i}}});var x=null,w=!1;m.sizeSearchInput=function(){var e=m.searchInput[0],t=m.$element[0],r=function(){return t.clientWidth*!!e.offsetParent},o=function(t){if(0===t)return!1;var n=t-e.offsetLeft;return n<50&&(n=t),m.searchInput.css("width",n+"px"),!0};m.searchInput.css("width","10px"),i(function(){null!==x||o(r())||(x=n.$watch(function(){w||(w=!0,n.$$postDigest(function(){w=!1,o(r())&&(x(),x=null)}))},angular.noop))})},m.searchInput.on("keydown",function(e){var r=e.which;~[t.ENTER,t.ESC].indexOf(r)&&(e.preventDefault(),e.stopPropagation()),n.$apply(function(){var n=!1;if((m.items.length>0||m.tagging.isActivated)&&(function(e){var n=!0;switch(e){case t.DOWN:if(!m.open&&m.multiple)m.activate(!1,!0);else if(m.activeIndex<m.items.length-1)for(var r=++m.activeIndex;h(m.items[r])&&r<m.items.length;)m.activeIndex=++r;break;case t.UP:var i=0===m.search.length&&m.tagging.isActivated?-1:0;if(!m.open&&m.multiple)m.activate(!1,!0);else if(m.activeIndex>i)for(var o=--m.activeIndex;h(m.items[o])&&o>i;)m.activeIndex=--o;break;case t.TAB:m.multiple&&!m.open||m.select(m.items[m.activeIndex],!0);break;case t.ENTER:m.open&&(m.tagging.isActivated||m.activeIndex>=0)?m.select(m.items[m.activeIndex],m.skipFocusser):m.activate(!1,!0);break;case t.ESC:m.close();break;default:n=!1}return n}(r)||m.searchEnabled||(e.preventDefault(),e.stopPropagation()),m.taggingTokens.isActivated)){for(var o=0;o<m.taggingTokens.tokens.length;o++)m.taggingTokens.tokens[o]===t.MAP[e.keyCode]&&m.search.length>0&&(n=!0);n&&i(function(){m.searchInput.triggerHandler("tagged");var n=m.search.replace(t.MAP[e.keyCode],"").trim();m.tagging.fct&&(n=m.tagging.fct(n)),n&&m.select(n,!0)})}}),t.isVerticalMovement(r)&&m.items.length>0&&$(),r!==t.ENTER&&r!==t.ESC||(e.preventDefault(),e.stopPropagation())}),m.searchInput.on("paste",function(e){var n;if(n=window.clipboardData&&window.clipboardData.getData?window.clipboardData.getData("Text"):(e.originalEvent||e).clipboardData.getData("text/plain"),(n=m.search+n)&&n.length>0)if(m.taggingTokens.isActivated){for(var r=[],i=0;i<m.taggingTokens.tokens.length;i++){var o=t.toSeparator(m.taggingTokens.tokens[i])||m.taggingTokens.tokens[i];if(n.indexOf(o)>-1){r=n.split(o);break}}0===r.length&&(r=[n]);var a=m.search;angular.forEach(r,function(e){var t=m.tagging.fct?m.tagging.fct(e):e;t&&m.select(t,!0)}),m.search=a||v,e.preventDefault(),e.stopPropagation()}else m.paste&&(m.paste(n),m.search=v,e.preventDefault(),e.stopPropagation())}),m.searchInput.on("tagged",function(){i(function(){d()})});var C=a(function(){m.sizeSearchInput()},50);angular.element(p).bind("resize",C),n.$on("$destroy",function(){m.searchInput.off("keyup keydown tagged blur paste"),angular.element(p).off("resize",C)}),n.$watch("$select.activeIndex",function(e){e&&r.find("input").attr("aria-activedescendant","ui-select-choices-row-"+m.generatedId+"-"+e)}),n.$watch("$select.open",function(e){e||r.find("input").removeAttr("aria-activedescendant")})}]),r.directive("uiSelect",["$document","uiSelectConfig","uiSelectMinErr","uisOffset","$compile","$parse","$timeout",function(e,t,n,r,i,o,a){return{restrict:"EA",templateUrl:function(e,n){return(n.theme||t.theme)+(angular.isDefined(n.multiple)?"/select-multiple.tpl.html":"/select.tpl.html")},replace:!0,transclude:!0,require:["uiSelect","^ngModel"],scope:!0,controller:"uiSelectCtrl",controllerAs:"$select",compile:function(i,s){var c=/{(.*)}\s*{(.*)}/.exec(s.ngClass);if(c){var u="{"+c[1]+", "+c[2]+"}";s.ngClass=u,i.attr("ng-class",u)}return angular.isDefined(s.multiple)?i.append("<ui-select-multiple/>").removeAttr("multiple"):i.append("<ui-select-single/>"),s.inputId&&(i.querySelectorAll("input.ui-select-search")[0].id=s.inputId),function(i,s,c,u,l){function f(e){if(h.open){if(!(window.jQuery?window.jQuery.contains(s[0],e.target):s[0].contains(e.target))&&!h.clickTriggeredSelect){var t;if(h.skipFocusser)t=!0;else{var n=angular.element(e.target).controller("uiSelect");(t=n&&n!==h)||(t=~["input","button","textarea","select"].indexOf(e.target.tagName.toLowerCase()))}h.close(t),i.$digest()}h.clickTriggeredSelect=!1}}function p(){var t=r(s);(m=angular.element('<div class="ui-select-placeholder"></div>'))[0].style.width=t.width+"px",m[0].style.height=t.height+"px",s.after(m),v=s[0].style.width,e.find("body").append(s),s[0].style.position="absolute",s[0].style.left=t.left+"px",s[0].style.top=t.top+"px",s[0].style.width=t.width+"px"}function d(){null!==m&&(m.replaceWith(s),m=null,s[0].style.position="",s[0].style.left="",s[0].style.top="",s[0].style.width=v,h.setFocus())}var h=u[0],$=u[1];h.generatedId=t.generateId(),h.baseTitle=c.title||"Select box",h.focusserTitle=h.baseTitle+" focus",h.focusserId="focusser-"+h.generatedId,h.closeOnSelect=angular.isDefined(c.closeOnSelect)?o(c.closeOnSelect)():t.closeOnSelect,i.$watch("skipFocusser",function(){var e=i.$eval(c.skipFocusser);h.skipFocusser=void 0!==e?e:t.skipFocusser}),h.onSelectCallback=o(c.onSelect),h.onRemoveCallback=o(c.onRemove),h.ngModel=$,h.choiceGrouped=function(e){return h.isGrouped&&e&&e.name},c.tabindex&&c.$observe("tabindex",function(e){h.focusInput.attr("tabindex",e),s.removeAttr("tabindex")}),i.$watch(function(){return i.$eval(c.searchEnabled)},function(e){h.searchEnabled=void 0!==e?e:t.searchEnabled}),i.$watch("sortable",function(){var e=i.$eval(c.sortable);h.sortable=void 0!==e?e:t.sortable}),c.$observe("backspaceReset",function(){var e=i.$eval(c.backspaceReset);h.backspaceReset=void 0===e||e}),c.$observe("limit",function(){h.limit=angular.isDefined(c.limit)?parseInt(c.limit,10):void 0}),i.$watch("removeSelected",function(){var e=i.$eval(c.removeSelected);h.removeSelected=void 0!==e?e:t.removeSelected}),c.$observe("disabled",function(){h.disabled=void 0!==c.disabled&&c.disabled}),c.$observe("resetSearchInput",function(){var e=i.$eval(c.resetSearchInput);h.resetSearchInput=void 0===e||e}),c.$observe("paste",function(){h.paste=i.$eval(c.paste)}),c.$observe("tagging",function(){if(void 0!==c.tagging){var e=i.$eval(c.tagging);h.tagging={isActivated:!0,fct:!0!==e?e:void 0}}else h.tagging={isActivated:!1,fct:void 0}}),c.$observe("taggingLabel",function(){void 0!==c.tagging&&("false"===c.taggingLabel?h.taggingLabel=!1:h.taggingLabel=void 0!==c.taggingLabel?c.taggingLabel:"(new)")}),c.$observe("taggingTokens",function(){if(void 0!==c.tagging){var e=void 0!==c.taggingTokens?c.taggingTokens.split("|"):[",","ENTER"];h.taggingTokens={isActivated:!0,tokens:e}}}),c.$observe("spinnerEnabled",function(){var e=i.$eval(c.spinnerEnabled);h.spinnerEnabled=void 0!==e?e:t.spinnerEnabled}),c.$observe("spinnerClass",function(){var e=c.spinnerClass;h.spinnerClass=void 0!==e?c.spinnerClass:t.spinnerClass}),angular.isDefined(c.autofocus)&&a(function(){h.setFocus()}),angular.isDefined(c.focusOn)&&i.$on(c.focusOn,function(){a(function(){h.setFocus()})}),e.on("click",f),i.$on("$destroy",function(){e.off("click",f)}),l(i,function(e){var t=angular.element("<div>").append(e),r=t.querySelectorAll(".ui-select-match");if(r.removeAttr("ui-select-match"),r.removeAttr("data-ui-select-match"),1!==r.length)throw n("transcluded","Expected 1 .ui-select-match but got '{0}'.",r.length);s.querySelectorAll(".ui-select-match").replaceWith(r);var i=t.querySelectorAll(".ui-select-choices");if(i.removeAttr("ui-select-choices"),i.removeAttr("data-ui-select-choices"),1!==i.length)throw n("transcluded","Expected 1 .ui-select-choices but got '{0}'.",i.length);s.querySelectorAll(".ui-select-choices").replaceWith(i);var o=t.querySelectorAll(".ui-select-no-choice");o.removeAttr("ui-select-no-choice"),o.removeAttr("data-ui-select-no-choice"),1==o.length&&s.querySelectorAll(".ui-select-no-choice").replaceWith(o)});var g=i.$eval(c.appendToBody);(void 0!==g?g:t.appendToBody)&&(i.$watch("$select.open",function(e){e?p():d()}),i.$on("$destroy",function(){d()}));var m=null,v="",y=null,b="direction-up";i.$watch("$select.open",function(){"auto"!==h.dropdownPosition&&"up"!==h.dropdownPosition||i.calculateDropdownPos()});var x=function(e,t){e=e||r(s),t=t||r(y),y[0].style.position="absolute",y[0].style.top=-1*t.height+"px",s.addClass(b)},w=function(){a(function(){if("up"===h.dropdownPosition)x();else{s.removeClass(b);var t=r(s),n=r(y),i=e[0].documentElement.scrollTop||e[0].body.scrollTop;t.top+t.height+n.height>i+e[0].documentElement.clientHeight?x(t,n):function(e,t){s.removeClass(b),e=e||r(s),t=t||r(y),y[0].style.position="",y[0].style.top=""}(t,n)}y[0].style.opacity=1})},C=!1;i.calculateDropdownPos=function(){if(h.open){if(0===(y=angular.element(s).querySelectorAll(".ui-select-dropdown")).length)return;if(""!==h.search||C||(y[0].style.opacity=0,C=!0),!r(y).height&&h.$animate&&h.$animate.on&&h.$animate.enabled(y)){var e=!0;h.$animate.on("enter",y,function(t,n){"close"===n&&e&&(w(),e=!1)})}else w()}else{if(null===y||0===y.length)return;y[0].style.opacity=0,y[0].style.position="",y[0].style.top="",s.removeClass(b)}}}}}}]),r.directive("uiSelectMatch",["uiSelectConfig",function(e){function t(e,t){return e[0].hasAttribute(t)?e.attr(t):e[0].hasAttribute("data-"+t)?e.attr("data-"+t):e[0].hasAttribute("x-"+t)?e.attr("x-"+t):void 0}return{restrict:"EA",require:"^uiSelect",replace:!0,transclude:!0,templateUrl:function(n){n.addClass("ui-select-match");var r=n.parent();return(t(r,"theme")||e.theme)+(angular.isDefined(t(r,"multiple"))?"/match-multiple.tpl.html":"/match.tpl.html")},link:function(t,n,r,i){function o(e){i.allowClear=!!angular.isDefined(e)&&(""===e||"true"===e.toLowerCase())}i.lockChoiceExpression=r.uiLockChoice,r.$observe("placeholder",function(t){i.placeholder=void 0!==t?t:e.placeholder}),r.$observe("allowClear",o),o(r.allowClear),i.multiple&&i.sizeSearchInput()}}}]),r.directive("uiSelectMultiple",["uiSelectMinErr","$timeout",function(n,r){return{restrict:"EA",require:["^uiSelect","^ngModel"],controller:["$scope","$timeout",function(e,t){var n,r=this,i=e.$select;angular.isUndefined(i.selected)&&(i.selected=[]),e.$evalAsync(function(){n=e.ngModel}),r.activeMatchIndex=-1,r.updateModel=function(){n.$setViewValue(Date.now()),r.refreshComponent()},r.refreshComponent=function(){i.refreshItems&&i.refreshItems(),i.sizeSearchInput&&i.sizeSearchInput()},r.removeChoice=function(n){if(i.isLocked(null,n))return!1;var o=i.selected[n],a={};return a[i.parserResult.itemName]=o,i.selected.splice(n,1),r.activeMatchIndex=-1,i.sizeSearchInput(),t(function(){i.onRemoveCallback(e,{$item:o,$model:i.parserResult.modelMapper(e,a)})}),r.updateModel(),!0},r.getPlaceholder=function(){if(!i.selected||!i.selected.length)return i.placeholder}}],controllerAs:"$selectMultiple",link:function(i,o,a,s){function c(e){var n=function(e){return angular.isNumber(e.selectionStart)?e.selectionStart:e.value.length}(f.searchInput[0]),r=f.selected.length-1,i=d.activeMatchIndex,o=d.activeMatchIndex+1,a=d.activeMatchIndex-1,s=i;return!(n>0||f.search.length&&e==t.RIGHT||(f.close(),s=function(){switch(e){case t.LEFT:return~d.activeMatchIndex?a:r;case t.RIGHT:return~d.activeMatchIndex&&i!==r?o:(f.activate(),!1);case t.BACKSPACE:return~d.activeMatchIndex?d.removeChoice(i)?a:i:r;case t.DELETE:return!!~d.activeMatchIndex&&(d.removeChoice(d.activeMatchIndex),i)}}(),f.selected.length&&!1!==s?d.activeMatchIndex=Math.min(r,Math.max(0,s)):d.activeMatchIndex=-1,0))}function u(e){return void 0!==e&&void 0!==f.search&&e.filter(function(e){return void 0!==f.search.toUpperCase()&&void 0!==e&&e.toUpperCase()===f.search.toUpperCase()}).length>0}function l(e,t){var n=-1;if(angular.isArray(e))for(var r=angular.copy(e),i=0;i<r.length;i++)if(void 0===f.tagging.fct)r[i]+" "+f.taggingLabel===t&&(n=i);else{var o=r[i];angular.isObject(o)&&(o.isTag=!0),angular.equals(o,t)&&(n=i)}return n}var f=s[0],p=i.ngModel=s[1],d=i.$selectMultiple;f.multiple=!0,f.focusInput=f.searchInput,p.$isEmpty=function(e){return!e||0===e.length},p.$parsers.unshift(function(){for(var e,t={},n=[],r=f.selected.length-1;r>=0;r--)(t={})[f.parserResult.itemName]=f.selected[r],e=f.parserResult.modelMapper(i,t),n.unshift(e);return n}),p.$formatters.unshift(function(e){var t,n=f.parserResult&&f.parserResult.source(i,{$select:{search:""}}),r={};if(!n)return e;var o=[],a=function(e,n){if(e&&e.length){for(var a=e.length-1;a>=0;a--){if(r[f.parserResult.itemName]=e[a],t=f.parserResult.modelMapper(i,r),f.parserResult.trackByExp){var s=/(\w*)\./.exec(f.parserResult.trackByExp),c=/\.([^\s]+)/.exec(f.parserResult.trackByExp);if(s&&s.length>0&&s[1]==f.parserResult.itemName&&c&&c.length>0&&t[c[1]]==n[c[1]])return o.unshift(e[a]),!0}if(angular.equals(t,n))return o.unshift(e[a]),!0}return!1}};if(!e)return o;for(var s=e.length-1;s>=0;s--)a(f.selected,e[s])||a(n,e[s])||o.unshift(e[s]);return o}),i.$watchCollection(function(){return p.$modelValue},function(e,t){t!=e&&(angular.isDefined(p.$modelValue)&&(p.$modelValue=null),d.refreshComponent())}),p.$render=function(){if(!angular.isArray(p.$viewValue)){if(!e(p.$viewValue))throw n("multiarr","Expected model value to be array but got '{0}'",p.$viewValue);p.$viewValue=[]}f.selected=p.$viewValue,d.refreshComponent(),i.$evalAsync()},i.$on("uis:select",function(e,t){if(!(f.selected.length>=f.limit)){f.selected.push(t);var n={};n[f.parserResult.itemName]=t,r(function(){f.onSelectCallback(i,{$item:t,$model:f.parserResult.modelMapper(i,n)})}),d.updateModel()}}),i.$on("uis:activate",function(){d.activeMatchIndex=-1}),i.$watch("$select.disabled",function(e,t){t&&!e&&f.sizeSearchInput()}),f.searchInput.on("keydown",function(e){var n=e.which;i.$apply(function(){var r=!1;t.isHorizontalMovement(n)&&(r=c(n)),r&&n!=t.TAB&&(e.preventDefault(),e.stopPropagation())})}),f.searchInput.on("keyup",function(e){if(t.isVerticalMovement(e.which)||i.$evalAsync(function(){f.activeIndex=!1===f.taggingLabel?-1:0}),f.tagging.isActivated&&f.search.length>0){if(e.which===t.TAB||t.isControl(e)||t.isFunctionKey(e)||e.which===t.ESC||t.isVerticalMovement(e.which))return;if(f.activeIndex=!1===f.taggingLabel?-1:0,!1===f.taggingLabel)return;var n,r,o,a=angular.copy(f.items),s=angular.copy(f.items),c=!1,p=-1;if(void 0!==f.tagging.fct){if((r=f.$filter("filter")(a,{isTag:!0})).length>0&&(o=r[0]),a.length>0&&o&&(c=!0,a=a.slice(1,a.length),s=s.slice(1,s.length)),n=f.tagging.fct(f.search),s.some(function(e){return angular.equals(e,n)})||f.selected.some(function(e){return angular.equals(e,n)}))return void i.$evalAsync(function(){f.activeIndex=0,f.items=a});n&&(n.isTag=!0)}else{if((r=f.$filter("filter")(a,function(e){return e.match(f.taggingLabel)})).length>0&&(o=r[0]),void 0!==a[0]&&a.length>0&&o&&(c=!0,a=a.slice(1,a.length),s=s.slice(1,s.length)),n=f.search+" "+f.taggingLabel,l(f.selected,f.search)>-1)return;if(u(s.concat(f.selected)))return void(c&&(a=s,i.$evalAsync(function(){f.activeIndex=0,f.items=a})));if(u(s))return void(c&&(f.items=s.slice(1,s.length)))}c&&(p=l(f.selected,n)),p>-1?a=a.slice(p+1,a.length-1):(a=[],n&&a.push(n),a=a.concat(s)),i.$evalAsync(function(){if(f.activeIndex=0,f.items=a,f.isGrouped){var e=n?a.slice(1):a;f.setItemsFn(e),n&&(f.items.unshift(n),f.groups.unshift({name:"",items:[n],tagging:!0}))}})}}),f.searchInput.on("blur",function(){r(function(){d.activeMatchIndex=-1})})}}}]),r.directive("uiSelectNoChoice",["uiSelectConfig",function(e){return{restrict:"EA",require:"^uiSelect",replace:!0,transclude:!0,templateUrl:function(t){return t.addClass("ui-select-no-choice"),(t.parent().attr("theme")||e.theme)+"/no-choice.tpl.html"}}}]),r.directive("uiSelectSingle",["$timeout","$compile",function(n,r){return{restrict:"EA",require:["^uiSelect","^ngModel"],link:function(i,o,a,s){var c=s[0],u=s[1];u.$parsers.unshift(function(t){if(e(t))return t;var n={};return n[c.parserResult.itemName]=t,c.parserResult.modelMapper(i,n)}),u.$formatters.unshift(function(t){if(e(t))return t;var n=c.parserResult&&c.parserResult.source(i,{$select:{search:""}}),r={};if(n){var o=function(e){return r[c.parserResult.itemName]=e,c.parserResult.modelMapper(i,r)===t};if(c.selected&&o(c.selected))return c.selected;for(var a=n.length-1;a>=0;a--)if(o(n[a]))return n[a]}return t}),i.$watch("$select.selected",function(e){u.$viewValue!==e&&u.$setViewValue(e)}),u.$render=function(){c.selected=u.$viewValue},i.$on("uis:select",function(t,r){c.selected=r;var o={};o[c.parserResult.itemName]=r,n(function(){c.onSelectCallback(i,{$item:r,$model:e(r)?r:c.parserResult.modelMapper(i,o)})})}),i.$on("uis:close",function(e,t){n(function(){c.focusser.prop("disabled",!1),t||c.focusser[0].focus()},0,!1)}),i.$on("uis:activate",function(){l.prop("disabled",!0)});var l=angular.element("<input ng-disabled='$select.disabled' class='ui-select-focusser ui-select-offscreen' type='text' id='{{ $select.focusserId }}' aria-label='{{ $select.focusserTitle }}' aria-haspopup='true' role='button' />");r(l)(i),c.focusser=l,c.focusInput=l,o.parent().append(l),l.bind("focus",function(){i.$evalAsync(function(){c.focus=!0})}),l.bind("blur",function(){i.$evalAsync(function(){c.focus=!1})}),l.bind("keydown",function(e){return e.which===t.BACKSPACE&&!1!==c.backspaceReset?(e.preventDefault(),e.stopPropagation(),c.select(void 0),void i.$apply()):void(e.which===t.TAB||t.isControl(e)||t.isFunctionKey(e)||e.which===t.ESC||(e.which!=t.DOWN&&e.which!=t.UP&&e.which!=t.ENTER&&e.which!=t.SPACE||(e.preventDefault(),e.stopPropagation(),c.activate()),i.$digest()))}),l.bind("keyup input",function(e){e.which===t.TAB||t.isControl(e)||t.isFunctionKey(e)||e.which===t.ESC||e.which==t.ENTER||e.which===t.BACKSPACE||(c.activate(l.val()),l.val(""),i.$digest())})}}}]),r.directive("uiSelectSort",["$timeout","uiSelectConfig","uiSelectMinErr",function(e,t,n){return{require:["^^uiSelect","^ngModel"],link:function(t,r,i,o){if(null===t[i.uiSelectSort])throw n("sort","Expected a list to sort");var a=o[0],s=o[1],c=angular.extend({axis:"horizontal"},t.$eval(i.uiSelectSortOptions)).axis,u="dragging",l="dropping",f="dropping-before",p="dropping-after";t.$watch(function(){return a.sortable},function(e){e?r.attr("draggable",!0):r.removeAttr("draggable")}),r.on("dragstart",function(e){r.addClass(u),(e.dataTransfer||e.originalEvent.dataTransfer).setData("text",t.$index.toString())}),r.on("dragend",function(){h(u)});var d,h=function(e){angular.forEach(a.$element.querySelectorAll("."+e),function(t){angular.element(t).removeClass(e)})},$=function(e){e.preventDefault(),("vertical"===c?e.offsetY||e.layerY||(e.originalEvent?e.originalEvent.offsetY:0):e.offsetX||e.layerX||(e.originalEvent?e.originalEvent.offsetX:0))<this["vertical"===c?"offsetHeight":"offsetWidth"]/2?(h(p),r.addClass(f)):(h(f),r.addClass(p))},g=function(t){t.preventDefault();var n=parseInt((t.dataTransfer||t.originalEvent.dataTransfer).getData("text"),10);e.cancel(d),d=e(function(){m(n)},20)},m=function(e){var n,o=t.$eval(i.uiSelectSort),a=o[e];n=r.hasClass(f)?e<t.$index?t.$index-1:t.$index:e<t.$index?t.$index:t.$index+1,function(e,t){this.splice(t,0,this.splice(e,1)[0])}.apply(o,[e,n]),s.$setViewValue(Date.now()),t.$apply(function(){t.$emit("uiSelectSort:change",{array:o,item:a,from:e,to:n})}),h(l),h(f),h(p),r.off("drop",g)};r.on("dragenter",function(){r.hasClass(u)||(r.addClass(l),r.on("dragover",$),r.on("drop",g))}),r.on("dragleave",function(e){e.target==r&&(h(l),h(f),h(p),r.off("dragover",$),r.off("drop",g))})}}}]),r.factory("$$uisDebounce",["$timeout",function(e){return function(t,n){var r;return function(){var i=this,o=Array.prototype.slice.call(arguments);r&&e.cancel(r),r=e(function(){t.apply(i,o)},n)}}}]),r.directive("uisOpenClose",["$parse","$timeout",function(e,t){return{restrict:"A",require:"uiSelect",link:function(n,r,i,o){o.onOpenCloseCallback=e(i.uisOpenClose),n.$watch("$select.open",function(e,r){e!==r&&t(function(){o.onOpenCloseCallback(n,{isOpen:e})})})}}}]),r.service("uisRepeatParser",["uiSelectMinErr","$parse",function(e,t){this.parse=function(n){var r;if(!(r=n.match(/^\s*(?:([\s\S]+?)\s+as\s+)?(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+(\s*[\s\S]+?)?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/)))throw e("iexp","Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.",n);var i=r[5],o="";if(r[3]){i=r[5].replace(/(^\()|(\)$)/g,"");var a=r[5].match(/^\s*(?:[\s\S]+?)(?:[^\|]|\|\|)+([\s\S]*)\s*$/);a&&a[1].trim()&&(o=a[1],i=i.replace(o,""))}return{itemName:r[4]||r[2],keyName:r[3],source:t(i),filters:o,trackByExp:r[6],modelMapper:t(r[1]||r[4]||r[2]),repeatExpression:function(e){var t=this.itemName+" in "+(e?"$group.items":"$select.items");return this.trackByExp&&(t+=" track by "+this.trackByExp),t}}},this.getGroupNgRepeatExpression=function(){return"$group in $select.groups track by $group.name"}}])}(),angular.module("ui.select").run(["$templateCache",function(e){e.put("bootstrap/choices.tpl.html",'<ul class="ui-select-choices ui-select-choices-content ui-select-dropdown dropdown-menu" ng-show="$select.open && $select.items.length > 0"><li class="ui-select-choices-group" id="ui-select-choices-{{ $select.generatedId }}"><div class="divider" ng-show="$select.isGrouped && $index > 0"></div><div ng-show="$select.isGrouped" class="ui-select-choices-group-label dropdown-header" ng-bind="$group.name"></div><div ng-attr-id="ui-select-choices-row-{{ $select.generatedId }}-{{$index}}" class="ui-select-choices-row" ng-class="{active: $select.isActive(this), disabled: $select.isDisabled(this)}" role="option"><span class="ui-select-choices-row-inner"></span></div></li></ul>'),e.put("bootstrap/match-multiple.tpl.html",'<span class="ui-select-match"><span ng-repeat="$item in $select.selected track by $index"><span class="ui-select-match-item btn btn-default btn-xs" tabindex="-1" type="button" ng-disabled="$select.disabled" ng-click="$selectMultiple.activeMatchIndex = $index;" ng-class="{\'btn-primary\':$selectMultiple.activeMatchIndex === $index, \'select-locked\':$select.isLocked(this, $index)}" ui-select-sort="$select.selected"><span class="close ui-select-match-close" ng-hide="$select.disabled" ng-click="$selectMultiple.removeChoice($index)">&nbsp;&times;</span> <span uis-transclude-append=""></span></span></span></span>'),e.put("bootstrap/match.tpl.html",'<div class="ui-select-match" ng-hide="$select.open && $select.searchEnabled" ng-disabled="$select.disabled" ng-class="{\'btn-default-focus\':$select.focus}"><span tabindex="-1" class="btn btn-default form-control ui-select-toggle" aria-label="{{ $select.baseTitle }} activate" ng-disabled="$select.disabled" ng-click="$select.activate()" style="outline: 0;"><span ng-show="$select.isEmpty()" class="ui-select-placeholder text-muted">{{$select.placeholder}}</span> <span ng-hide="$select.isEmpty()" class="ui-select-match-text pull-left" ng-class="{\'ui-select-allow-clear\': $select.allowClear && !$select.isEmpty()}" ng-transclude=""></span> <i class="caret pull-right" ng-click="$select.toggle($event)"></i> <a ng-show="$select.allowClear && !$select.isEmpty() && ($select.disabled !== true)" aria-label="{{ $select.baseTitle }} clear" style="margin-right: 10px" ng-click="$select.clear($event)" class="btn btn-xs btn-link pull-right"><i class="glyphicon glyphicon-remove" aria-hidden="true"></i></a></span></div>'),e.put("bootstrap/no-choice.tpl.html",'<ul class="ui-select-no-choice dropdown-menu" ng-show="$select.items.length == 0"><li ng-transclude=""></li></ul>'),e.put("bootstrap/select-multiple.tpl.html",'<div class="ui-select-container ui-select-multiple ui-select-bootstrap dropdown form-control" ng-class="{open: $select.open}"><div><div class="ui-select-match"></div><input type="search" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" class="ui-select-search input-xs" placeholder="{{$selectMultiple.getPlaceholder()}}" ng-disabled="$select.disabled" ng-click="$select.activate()" ng-model="$select.search" role="combobox" aria-expanded="{{$select.open}}" aria-label="{{$select.baseTitle}}" ng-class="{\'spinner\': $select.refreshing}" ondrop="return false;"></div><div class="ui-select-choices"></div><div class="ui-select-no-choice"></div></div>'),e.put("bootstrap/select.tpl.html",'<div class="ui-select-container ui-select-bootstrap dropdown" ng-class="{open: $select.open}"><div class="ui-select-match"></div><span ng-show="$select.open && $select.refreshing && $select.spinnerEnabled" class="ui-select-refreshing {{$select.spinnerClass}}"></span> <input type="search" autocomplete="off" tabindex="-1" aria-expanded="true" aria-label="{{ $select.baseTitle }}" aria-owns="ui-select-choices-{{ $select.generatedId }}" class="form-control ui-select-search" ng-class="{ \'ui-select-search-hidden\' : !$select.searchEnabled }" placeholder="{{$select.placeholder}}" ng-model="$select.search" ng-show="$select.open"><div class="ui-select-choices"></div><div class="ui-select-no-choice"></div></div>'),e.put("select2/choices.tpl.html",'<ul tabindex="-1" class="ui-select-choices ui-select-choices-content select2-results"><li class="ui-select-choices-group" ng-class="{\'select2-result-with-children\': $select.choiceGrouped($group) }"><div ng-show="$select.choiceGrouped($group)" class="ui-select-choices-group-label select2-result-label" ng-bind="$group.name"></div><ul id="ui-select-choices-{{ $select.generatedId }}" ng-class="{\'select2-result-sub\': $select.choiceGrouped($group), \'select2-result-single\': !$select.choiceGrouped($group) }"><li role="option" ng-attr-id="ui-select-choices-row-{{ $select.generatedId }}-{{$index}}" class="ui-select-choices-row" ng-class="{\'select2-highlighted\': $select.isActive(this), \'select2-disabled\': $select.isDisabled(this)}"><div class="select2-result-label ui-select-choices-row-inner"></div></li></ul></li></ul>'),e.put("select2/match-multiple.tpl.html",'<span class="ui-select-match"><li class="ui-select-match-item select2-search-choice" ng-repeat="$item in $select.selected track by $index" ng-class="{\'select2-search-choice-focus\':$selectMultiple.activeMatchIndex === $index, \'select2-locked\':$select.isLocked(this, $index)}" ui-select-sort="$select.selected"><span uis-transclude-append=""></span> <a href="javascript:;" class="ui-select-match-close select2-search-choice-close" ng-click="$selectMultiple.removeChoice($index)" tabindex="-1"></a></li></span>'),e.put("select2/match.tpl.html",'<a class="select2-choice ui-select-match" ng-class="{\'select2-default\': $select.isEmpty()}" ng-click="$select.toggle($event)" aria-label="{{ $select.baseTitle }} select"><span ng-show="$select.isEmpty()" class="select2-chosen">{{$select.placeholder}}</span> <span ng-hide="$select.isEmpty()" class="select2-chosen" ng-transclude=""></span> <abbr ng-if="$select.allowClear && !$select.isEmpty()" class="select2-search-choice-close" ng-click="$select.clear($event)"></abbr> <span class="select2-arrow ui-select-toggle"><b></b></span></a>'),e.put("select2/no-choice.tpl.html",'<div class="ui-select-no-choice dropdown" ng-show="$select.items.length == 0"><div class="dropdown-content"><div data-selectable="" ng-transclude=""></div></div></div>'),e.put("select2/select-multiple.tpl.html",'<div class="ui-select-container ui-select-multiple select2 select2-container select2-container-multi" ng-class="{\'select2-container-active select2-dropdown-open open\': $select.open, \'select2-container-disabled\': $select.disabled}"><ul class="select2-choices"><span class="ui-select-match"></span><li class="select2-search-field"><input type="search" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" role="combobox" aria-expanded="true" aria-owns="ui-select-choices-{{ $select.generatedId }}" aria-label="{{ $select.baseTitle }}" aria-activedescendant="ui-select-choices-row-{{ $select.generatedId }}-{{ $select.activeIndex }}" class="select2-input ui-select-search" placeholder="{{$selectMultiple.getPlaceholder()}}" ng-disabled="$select.disabled" ng-hide="$select.disabled" ng-model="$select.search" ng-click="$select.activate()" style="width: 34px;" ondrop="return false;"></li></ul><div class="ui-select-dropdown select2-drop select2-with-searchbox select2-drop-active" ng-class="{\'select2-display-none\': !$select.open || $select.items.length === 0}"><div class="ui-select-choices"></div></div></div>'),e.put("select2/select.tpl.html",'<div class="ui-select-container select2 select2-container" ng-class="{\'select2-container-active select2-dropdown-open open\': $select.open, \'select2-container-disabled\': $select.disabled, \'select2-container-active\': $select.focus, \'select2-allowclear\': $select.allowClear && !$select.isEmpty()}"><div class="ui-select-match"></div><div class="ui-select-dropdown select2-drop select2-with-searchbox select2-drop-active" ng-class="{\'select2-display-none\': !$select.open}"><div class="search-container" ng-class="{\'ui-select-search-hidden\':!$select.searchEnabled, \'select2-search\':$select.searchEnabled}"><input type="search" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" ng-class="{\'select2-active\': $select.refreshing}" role="combobox" aria-expanded="true" aria-owns="ui-select-choices-{{ $select.generatedId }}" aria-label="{{ $select.baseTitle }}" class="ui-select-search select2-input" ng-model="$select.search"></div><div class="ui-select-choices"></div><div class="ui-select-no-choice"></div></div></div>'),e.put("selectize/choices.tpl.html",'<div ng-show="$select.open" class="ui-select-choices ui-select-dropdown selectize-dropdown" ng-class="{\'single\': !$select.multiple, \'multi\': $select.multiple}"><div class="ui-select-choices-content selectize-dropdown-content"><div class="ui-select-choices-group optgroup"><div ng-show="$select.isGrouped" class="ui-select-choices-group-label optgroup-header" ng-bind="$group.name"></div><div role="option" class="ui-select-choices-row" ng-class="{active: $select.isActive(this), disabled: $select.isDisabled(this)}"><div class="option ui-select-choices-row-inner" data-selectable=""></div></div></div></div></div>'),e.put("selectize/match-multiple.tpl.html",'<div class="ui-select-match" data-value="" ng-repeat="$item in $select.selected track by $index" ng-click="$selectMultiple.activeMatchIndex = $index;" ng-class="{\'active\':$selectMultiple.activeMatchIndex === $index}" ui-select-sort="$select.selected"><span class="ui-select-match-item" ng-class="{\'select-locked\':$select.isLocked(this, $index)}"><span uis-transclude-append=""></span> <span class="remove ui-select-match-close" ng-hide="$select.disabled" ng-click="$selectMultiple.removeChoice($index)">&times;</span></span></div>'),e.put("selectize/match.tpl.html",'<div ng-hide="$select.searchEnabled && ($select.open || $select.isEmpty())" class="ui-select-match"><span ng-show="!$select.searchEnabled && ($select.isEmpty() || $select.open)" class="ui-select-placeholder text-muted">{{$select.placeholder}}</span> <span ng-hide="$select.isEmpty() || $select.open" ng-transclude=""></span></div>'),e.put("selectize/no-choice.tpl.html",'<div class="ui-select-no-choice selectize-dropdown" ng-show="$select.items.length == 0"><div class="selectize-dropdown-content"><div data-selectable="" ng-transclude=""></div></div></div>'),e.put("selectize/select-multiple.tpl.html",'<div class="ui-select-container selectize-control multi plugin-remove_button" ng-class="{\'open\': $select.open}"><div class="selectize-input" ng-class="{\'focus\': $select.open, \'disabled\': $select.disabled, \'selectize-focus\' : $select.focus}" ng-click="$select.open && !$select.searchEnabled ? $select.toggle($event) : $select.activate()"><div class="ui-select-match"></div><input type="search" autocomplete="off" tabindex="-1" class="ui-select-search" ng-class="{\'ui-select-search-hidden\':!$select.searchEnabled}" placeholder="{{$selectMultiple.getPlaceholder()}}" ng-model="$select.search" ng-disabled="$select.disabled" aria-expanded="{{$select.open}}" aria-label="{{ $select.baseTitle }}" ondrop="return false;"></div><div class="ui-select-choices"></div><div class="ui-select-no-choice"></div></div>'),e.put("selectize/select.tpl.html",'<div class="ui-select-container selectize-control single" ng-class="{\'open\': $select.open}"><div class="selectize-input" ng-class="{\'focus\': $select.open, \'disabled\': $select.disabled, \'selectize-focus\' : $select.focus}" ng-click="$select.open && !$select.searchEnabled ? $select.toggle($event) : $select.activate()"><div class="ui-select-match"></div><input type="search" autocomplete="off" tabindex="-1" class="ui-select-search ui-select-toggle" ng-class="{\'ui-select-search-hidden\':!$select.searchEnabled}" ng-click="$select.toggle($event)" placeholder="{{$select.placeholder}}" ng-model="$select.search" ng-hide="!$select.isEmpty() && !$select.open" ng-disabled="$select.disabled" aria-label="{{ $select.baseTitle }}"></div><div class="ui-select-choices"></div><div class="ui-select-no-choice"></div></div>')}]),function(e,t){var n,r,i,o,a,s,c,u,l,f,p=t.$$minErr("$sanitize");t.module("ngSanitize",[]).provider("$sanitize",function(){var d=!1,h=!1;this.$get=["$$sanitizeUri",function(e){return d=!0,h&&r(S,C),function(t){var n=[];return l(t,f(n,function(t,n){return!/^unsafe:/.test(e(t,n))})),n.join("")}}],this.enableSvg=function(e){return a(e)?(h=e,this):h},this.addValidElements=function(e){return d||(o(e)&&(e={htmlElements:e}),D(C,e.svgElements),D(m,e.htmlVoidElements),D(S,e.htmlVoidElements),D(S,e.htmlElements)),this},this.addValidAttrs=function(e){return d||r(O,N(e,!0)),this},n=t.bind,r=t.extend,i=t.forEach,o=t.isArray,a=t.isDefined,s=t.$$lowercase,c=t.noop,l=function(e,t){null==e?e="":"string"!=typeof e&&(e=""+e);var n=I(e);if(!n)return"";var r=5;do{if(0===r)throw p("uinput","Failed to sanitize html because the input is unstable");r--,e=n.innerHTML,n=I(e)}while(e!==n.innerHTML);for(var i=n.firstChild;i;){switch(i.nodeType){case 1:t.start(i.nodeName.toLowerCase(),P(i.attributes));break;case 3:t.chars(i.textContent)}var o;if(!((o=i.firstChild)||(1===i.nodeType&&t.end(i.nodeName.toLowerCase()),o=V("nextSibling",i))))for(;null==o&&(i=V("parentNode",i))!==n;)o=V("nextSibling",i),1===i.nodeType&&t.end(i.nodeName.toLowerCase());i=o}for(;i=n.firstChild;)n.removeChild(i)},f=function(e,t){var r=!1,o=n(e,e.push);return{start:function(e,n){e=s(e),!r&&E[e]&&(r=e),r||!0!==S[e]||(o("<"),o(e),i(n,function(n,r){var i=s(r),a="img"===e&&"src"===i||"background"===i;!0!==O[i]||!0===k[i]&&!t(n,a)||(o(" "),o(r),o('="'),o(L(n)),o('"'))}),o(">"))},end:function(e){e=s(e),r||!0!==S[e]||!0===m[e]||(o("</"),o(e),o(">")),e==r&&(r=!1)},chars:function(e){r||o(L(e))}}},u=e.Node.prototype.contains||function(e){return!!(16&this.compareDocumentPosition(e))};var $=/[\uD800-\uDBFF][\uDC00-\uDFFF]/g,g=/([^#-~ |!])/g,m=M("area,br,col,hr,img,wbr"),v=M("colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr"),y=M("rp,rt"),b=r({},y,v),x=r({},v,M("address,article,aside,blockquote,caption,center,del,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,h6,header,hgroup,hr,ins,map,menu,nav,ol,pre,section,table,ul")),w=r({},y,M("a,abbr,acronym,b,bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,q,ruby,rp,rt,s,samp,small,span,strike,strong,sub,sup,time,tt,u,var")),C=M("circle,defs,desc,ellipse,font-face,font-face-name,font-face-src,g,glyph,hkern,image,linearGradient,line,marker,metadata,missing-glyph,mpath,path,polygon,polyline,radialGradient,rect,stop,svg,switch,text,title,tspan"),E=M("script,style"),S=r({},m,x,w,b),k=M("background,cite,href,longdesc,src,xlink:href,xml:base"),A=M("abbr,align,alt,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,compact,coords,dir,face,headers,height,hreflang,hspace,ismap,lang,language,nohref,nowrap,rel,rev,rows,rowspan,rules,scope,scrolling,shape,size,span,start,summary,tabindex,target,title,type,valign,value,vspace,width"),T=M("accent-height,accumulate,additive,alphabetic,arabic-form,ascent,baseProfile,bbox,begin,by,calcMode,cap-height,class,color,color-rendering,content,cx,cy,d,dx,dy,descent,display,dur,end,fill,fill-rule,font-family,font-size,font-stretch,font-style,font-variant,font-weight,from,fx,fy,g1,g2,glyph-name,gradientUnits,hanging,height,horiz-adv-x,horiz-origin-x,ideographic,k,keyPoints,keySplines,keyTimes,lang,marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mathematical,max,min,offset,opacity,orient,origin,overline-position,overline-thickness,panose-1,path,pathLength,points,preserveAspectRatio,r,refX,refY,repeatCount,repeatDur,requiredExtensions,requiredFeatures,restart,rotate,rx,ry,slope,stemh,stemv,stop-color,stop-opacity,strikethrough-position,strikethrough-thickness,stroke,stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,stroke-width,systemLanguage,target,text-anchor,to,transform,type,u1,u2,underline-position,underline-thickness,unicode,unicode-range,units-per-em,values,version,viewBox,visibility,width,widths,x,x-height,x1,x2,xlink:actuate,xlink:arcrole,xlink:role,xlink:show,xlink:title,xlink:type,xml:base,xml:lang,xml:space,xmlns,xmlns:xlink,y,y1,y2,zoomAndPan",!0),O=r({},k,T,A);function M(e,t){return N(e.split(","),t)}function N(e,t){var n,r={};for(n=0;n<e.length;n++)r[t?s(e[n]):e[n]]=!0;return r}function D(e,t){t&&t.length&&r(e,N(t))}var I=function(e,t){var n;if(!t||!t.implementation)throw p("noinert","Can't create an inert html document");var r=((n=t.implementation.createHTMLDocument("inert")).documentElement||n.getDocumentElement()).querySelector("body");return r.innerHTML='<svg><g onload="this.parentNode.remove()"></g></svg>',r.querySelector("svg")?(r.innerHTML='<svg><p><style><img src="</style><img src=x onerror=alert(1)//">',r.querySelector("svg img")?function(t){t="<remove></remove>"+t;try{var n=(new e.DOMParser).parseFromString(t,"text/html").body;return n.firstChild.remove(),n}catch(e){return}}:function(e){return r.innerHTML=e,t.documentMode&&R(r),r}):function(t){t="<remove></remove>"+t;try{t=encodeURI(t)}catch(e){return}var n=new e.XMLHttpRequest;n.responseType="document",n.open("GET","data:text/html;charset=utf-8,"+t,!1),n.send(null);var r=n.response.body;return r.firstChild.remove(),r}}(e,e.document);function P(e){for(var t={},n=0,r=e.length;n<r;n++){var i=e[n];t[i.name]=i.value}return t}function L(e){return e.replace(/&/g,"&amp;").replace($,function(e){return"&#"+(1024*(e.charCodeAt(0)-55296)+(e.charCodeAt(1)-56320)+65536)+";"}).replace(g,function(e){return"&#"+e.charCodeAt(0)+";"}).replace(/</g,"&lt;").replace(/>/g,"&gt;")}function R(t){for(;t;){if(t.nodeType===e.Node.ELEMENT_NODE)for(var n=t.attributes,r=0,i=n.length;r<i;r++){var o=n[r],a=o.name.toLowerCase();"xmlns:ns1"!==a&&0!==a.lastIndexOf("ns1:",0)||(t.removeAttributeNode(o),r--,i--)}var s=t.firstChild;s&&R(s),t=V("nextSibling",t)}}function V(e,t){var n=t[e];if(n&&u.call(t,n))throw p("elclob","Failed to sanitize html because the element is clobbered: {0}",t.outerHTML||t.outerText);return n}}).info({angularVersion:"1.7.8"}),t.module("ngSanitize").filter("linky",["$sanitize",function(e){var n=/((s?ftp|https?):\/\/|(www\.)|(mailto:)?[A-Za-z0-9._%+-]+@)\S*[^\s.;,(){}<>"\u201d\u2019]/i,r=/^mailto:/i,i=t.$$minErr("linky"),o=t.isDefined,a=t.isFunction,s=t.isObject,u=t.isString;return function(t,l,p){if(null==t||""===t)return t;if(!u(t))throw i("notstring","Expected string but received: {0}",t);for(var d,h,$,g=a(p)?p:s(p)?function(){return p}:function(){return{}},m=t,v=[];d=m.match(n);)h=d[0],d[2]||d[4]||(h=(d[3]?"http://":"mailto:")+h),$=d.index,y(m.substr(0,$)),b(h,d[0].replace(r,"")),m=m.substring($+d[0].length);return y(m),e(v.join(""));function y(e){var t,n;e&&v.push((t=e,f(n=[],c).chars(t),n.join("")))}function b(e,t){var n,r=g(e);for(n in v.push("<a "),r)v.push(n+'="'+r[n]+'" ');!o(l)||"target"in r||v.push('target="',l,'" '),v.push('href="',e.replace(/"/g,"&quot;"),'">'),y(t),v.push("</a>")}}}])}(window,window.angular),function(){var e=angular.module("autocomplete",["ui.select","ngSanitize"]);e.factory("apiHelper",["$http","$q",function(e,t){return{get:function(n){var r=t.defer();return e.get(n).then(function(e){e.data?r.resolve(e.data):r.reject(error)}),r.promise}}}]),e.controller("mainController",["$scope","apiHelper","$log",function(e,t,n){e.form={person:""},e.people=[],e.peopeleSearch=[],e.suggestion="";var r=function(t){e.suggestion=t};e.refreshPeople=function(i){if(i)return e.people=e.peopleSearch.filter(function(e){var t=e.name,n=e.email,r=e.country,o=t.toLowerCase().indexOf(i.toLowerCase())>-1||n.toLowerCase().indexOf(i.toLowerCase())>-1||r.toLowerCase().indexOf(i.toLowerCase())>-1;if(o)return e}),void function(){if(1==e.people.length){var t=e.people[0],n=t.name,i=t.email,o=t.age,a=t.country;r("".concat(n," - ").concat(i," - ").concat(o," - ").concat(a))}else r("")}();t.get("people.json").then(function(t){e.people=angular.copy(t.people),e.peopleSearch=angular.copy(t.people),e.improvedPlaceholder=""}).catch(function(e){return n.debug(e)})},e.onOpenClose=function(t){t||(e.suggestion="")}}])}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
